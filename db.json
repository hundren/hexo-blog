{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/avatar.JPG","path":"avatar.JPG","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/zhi.jpg","path":"zhi.jpg","modified":0,"renderable":0},{"_id":"source/wei.jpg","path":"wei.jpg","modified":0,"renderable":0},{"_id":"source/images/Developer Menu.jpg","path":"images/Developer Menu.jpg","modified":0,"renderable":0},{"_id":"source/images/model.png","path":"images/model.png","modified":0,"renderable":0},{"_id":"source/images/project/harroman.jpg","path":"images/project/harroman.jpg","modified":0,"renderable":0},{"_id":"source/images/project/iot_install.jpg","path":"images/project/iot_install.jpg","modified":0,"renderable":0},{"_id":"source/images/project/iot_user.jpg","path":"images/project/iot_user.jpg","modified":0,"renderable":0},{"_id":"source/images/project/iot_wx.jpg","path":"images/project/iot_wx.jpg","modified":0,"renderable":0},{"_id":"source/images/project/shilianmobile.png","path":"images/project/shilianmobile.png","modified":0,"renderable":0},{"_id":"source/shake.mp3","path":"shake.mp3","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/project/chezi.png","path":"images/project/chezi.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/avatar.JPG","hash":"511b1dfbb04b2ff656dab5d57883e6e0a79f2b48","modified":1555749730285},{"_id":"source/favicon.ico","hash":"ee05c2cb5fdea8483485183cef0bf9183e7af9d1","modified":1555749730285},{"_id":"source/harlem-shake-style.css","hash":"afe2162cc83d52611dcb6edd18d3572c30d38aef","modified":1555749730286},{"_id":"source/zhi.jpg","hash":"bdca6dd9e6d575a66ddbaca031d1fc311a679793","modified":1555749730293},{"_id":"source/wei.jpg","hash":"4e985de37062ea5fe882c4b145e393fed2ab7440","modified":1555749730293},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1555755050519},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1555755050519},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1555755050519},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1555755050520},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1555755050520},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1555755050520},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1555755050521},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1555755050521},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1555755050521},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1555755050521},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1555755050521},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1555755050521},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1555755050522},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1555755050522},{"_id":"themes/next/_config.yml","hash":"e5f9a66f9cd3d51508f85f5a3250ae184ca6eae9","modified":1565147615299},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1555755050538},{"_id":"source/_posts/icon-change.md","hash":"64f3729a262d9a8fee1e64d3d6ea5e919f42fea2","modified":1565161259647},{"_id":"source/_posts/hello-world.md","hash":"a2c4cb2d6cf0c5a7a3a136493fa3105d83f70b27","modified":1565161195839},{"_id":"source/_posts/javascript-model.md","hash":"a76421d2916c9f451a9f1b0965190bd01b132bc7","modified":1560439517908},{"_id":"source/_posts/js-note.md","hash":"ee34541f5d6e10644054e734c3feeb747e16cc37","modified":1560439409908},{"_id":"source/_posts/js-var.md","hash":"d172d43c55fe70e72559407180883ed71e484e0c","modified":1555749730284},{"_id":"source/_posts/project.md","hash":"3db1c02bb201f08083a08dfcf79e40ef533a096f","modified":1566179442812},{"_id":"source/_posts/rn.md","hash":"dfda884eb4c5bb9f8d56c7bcd1efe7fa3e2d0aa0","modified":1555749730284},{"_id":"source/_posts/wehchat-small.md","hash":"29e46f1d26988b44504a95d5307047566671ab92","modified":1560439559347},{"_id":"source/_posts/test-list.md","hash":"f1a2c728b7eee16c3b5d0b5d5b2a2cb55c363583","modified":1560439478017},{"_id":"source/_posts/typescript-note.md","hash":"0866ffb7a505fe4f487806e5db59024994261eb7","modified":1560439062268},{"_id":"source/categories/index.md","hash":"4935dba7bbabf8949f24045834e9d99753c6161e","modified":1555749730285},{"_id":"source/about/index.html","hash":"5ec4a12a01a062c25019079e5bd227864491a5e3","modified":1558277544218},{"_id":"source/images/Developer Menu.jpg","hash":"3412a86d77a28d50dd2eb318ce819ecbdf8cb2be","modified":1555749730286},{"_id":"source/tags/index.md","hash":"e6474e1f3ad5696a0206542ff774f07a895bf051","modified":1555749730293},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1555755050511},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1555755050512},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1555754573022},{"_id":"themes/next/.git/index","hash":"3b5b5def0b7bd65dc66621f9646d7bfdccdfaf0e","modified":1555755050608},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1555755050509},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1555755050520},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1555755050520},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1555755050520},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1555755050520},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1555755050522},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1555755050523},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1555755050522},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1555755050523},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1555755050523},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1555755050523},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1555755050523},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1555755050523},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1555755050523},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1555755050523},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1555755050524},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1555755050524},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1555755050524},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1555755050524},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1555755050524},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1555755050524},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1555755050525},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1555755050537},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1555755050537},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1555755050537},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1555755050537},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1555755050537},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1555755050538},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1555755050538},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1555755050538},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1555755050538},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1555755050607},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1555755050607},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1555755050608},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050566},{"_id":"source/images/model.png","hash":"a47af344b3fce8f7e5dc0aa02c2789d72c7a99c8","modified":1555749730287},{"_id":"source/images/project/harroman.jpg","hash":"9fea4faffbff285d34a868696e444b91ce9e32f6","modified":1555749730288},{"_id":"source/images/project/iot_install.jpg","hash":"2439ce417339ed81dcac951fb7684e673e830324","modified":1555749730288},{"_id":"source/images/project/iot_user.jpg","hash":"3faaaf9ea1c19005b97d6b06211190fe4dc08298","modified":1555749730288},{"_id":"source/images/project/iot_wx.jpg","hash":"a2c71f98c0d5e1e46134f2719ad6cb58f6424f56","modified":1555749730289},{"_id":"source/images/project/shilianmobile.png","hash":"d944e3289622175db341c62f4601aa45f918af71","modified":1555749730290},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1555754573022},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1555754573023},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1555754573025},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1555754573023},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1555754573023},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1555754573024},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1555754573025},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1555754573023},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1555754573024},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1555754573024},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1555754573021},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1555754573025},{"_id":"source/shake.mp3","hash":"a94719322a56bb60e6262484a84895f7190f7c98","modified":1555749730292},{"_id":"themes/next/.git/logs/HEAD","hash":"d7583a7588497cc7d00f982f3692c09f5fa236a6","modified":1555755050512},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555755050525},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555755050525},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1555755050525},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1555755050525},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1555755050526},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1555755050526},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1555755050525},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1555755050526},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1555755050526},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1555755050527},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2bb776d0c6397f766d19abd205dcc4a80ca35deb","modified":1565140618903},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1555755050527},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1555755050528},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1555755050528},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1555755050528},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1555755050529},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1555755050530},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1555755050530},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1555755050534},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1555755050534},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1555755050534},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1555755050534},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1555755050535},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1555755050535},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1555755050535},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1555755050539},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1555755050539},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1555755050539},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1555755050539},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1555755050539},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1555755050539},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1555755050540},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1555755050540},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1555755050540},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1555755050566},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555755050567},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555755050567},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555755050567},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555755050567},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555755050567},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555755050568},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555755050568},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555755050568},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555755050568},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555755050568},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555755050568},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555755050568},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555755050568},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555755050569},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555755050569},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555755050569},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555755050569},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555755050569},{"_id":"source/images/project/chezi.png","hash":"3385c0f476d76e4eee11e9b7d478dda8aec47140","modified":1555749730287},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050530},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050530},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050557},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050557},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050558},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050566},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555755050566},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1555755050511},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1555755050527},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1555755050527},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1555755050528},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1555755050528},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1555755050529},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1555755050529},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1555755050529},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1555755050528},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1555755050529},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1555755050530},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1555755050530},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1555755050530},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1555755050530},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1555755050531},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1555755050532},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1555755050532},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1555755050532},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1555755050532},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1555755050532},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1555755050532},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1555755050532},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1555755050533},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1555755050533},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1555755050533},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1555755050533},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1555755050533},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1555755050533},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1555755050533},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1555755050536},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1555755050536},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1555755050536},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1555755050537},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1555755050557},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1555755050557},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1555755050558},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1555755050558},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1555755050566},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1555755050566},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1555755050566},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1555755050566},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555755050569},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1555755050569},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555755050570},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1555755050570},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1555755050570},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1555755050570},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1555755050570},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1555755050570},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1555755050571},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555755050571},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1555755050571},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555755050578},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1555755050578},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555755050575},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1555755050579},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1555755050579},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1555755050582},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1555755050582},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1555755050582},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1555755050582},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1555755050583},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1555755050583},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1555755050583},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1555755050584},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555755050584},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1555755050595},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1555755050596},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1555755050596},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1555755050596},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1555755050596},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555755050596},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1555755050597},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555755050596},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1555755050597},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1555755050597},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555755050599},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555755050598},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555755050599},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555755050599},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555755050599},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555755050599},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555755050599},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1555755050600},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1555755050600},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1555755050600},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1555755050600},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1555755050604},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1555755050604},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555755050607},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555755050606},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555755050607},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555755050595},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d7583a7588497cc7d00f982f3692c09f5fa236a6","modified":1555755050512},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1555755050511},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1555755050536},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1555755050536},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1555755050540},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1555755050540},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1555755050540},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1555755050545},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1555755050550},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1555755050554},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1555755050555},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1555755050555},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1555755050556},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1555755050556},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1555755050556},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1555755050556},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1555755050559},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1555755050559},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1555755050560},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1555755050560},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1555755050560},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1555755050561},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1555755050561},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1555755050561},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1555755050563},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1555755050563},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1555755050564},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1555755050564},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1555755050564},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1555755050565},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1555755050565},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1555755050565},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1555755050565},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1555755050565},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1555755050565},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1555755050570},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1555755050573},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555755050579},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1555755050574},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1555755050574},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555755050579},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555755050580},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555755050580},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555755050580},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555755050580},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555755050581},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555755050582},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555755050582},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555755050583},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555755050583},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555755050585},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555755050584},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555755050585},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555755050604},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555755050604},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1555755050574},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555755050594},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555755050605},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d7583a7588497cc7d00f982f3692c09f5fa236a6","modified":1555755050511},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1555755050542},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1555755050542},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1555755050541},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1555755050542},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1555755050542},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1555755050543},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1555755050543},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1555755050544},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1555755050544},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1555755050544},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1555755050545},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1555755050546},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1555755050546},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1555755050546},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1555755050546},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1555755050547},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1555755050548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1555755050549},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1555755050549},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1555755050549},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1555755050550},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1555755050550},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1555755050550},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1555755050550},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1555755050550},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1555755050550},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1555755050551},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1555755050551},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1555755050551},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1555755050551},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1555755050551},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1555755050552},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1555755050552},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1555755050552},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1555755050552},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1555755050553},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1555755050553},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1555755050554},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1555755050554},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1555755050554},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1555755050562},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555755050562},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555755050565},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555755050572},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555755050572},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555755050572},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555755050572},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555755050572},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555755050580},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555755050580},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555755050581},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555755050581},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555755050581},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555755050581},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555755050593},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555755050594},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555755050586},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555755050588},{"_id":"themes/next/.git/objects/pack/pack-a22441d9cf9615334864bdd6f0dc9f36fa85a688.idx","hash":"e1a03c22c203c8bc00116c1eb37b303209841ad6","modified":1555755050497},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1555755050577},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1555755050603},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1555755050591},{"_id":"themes/next/.git/objects/pack/pack-a22441d9cf9615334864bdd6f0dc9f36fa85a688.pack","hash":"b6f7b404d7357ffea67227f3b4b61bf694599f9d","modified":1555755050494},{"_id":"source/_posts/module.md","hash":"789689f8a514ba8f8bc738e301deb5182041cb36","modified":1570871848911}],"Category":[{"name":"学习笔记","_id":"ck1nb72u30005dgqixa3kpwpb"},{"name":"文章","_id":"ck1nb72u9000adgqiydkiv3jg"},{"name":"项目","_id":"ck1nb72ug000ndgqiat8day4g"}],"Data":[],"Page":[{"_content":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}","source":"harlem-shake-style.css","raw":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}","date":"2019-04-20T08:42:10.286Z","updated":"2019-04-20T08:42:10.286Z","path":"harlem-shake-style.css","layout":"false","title":"","comments":1,"_id":"ck1nb72t10000dgqiz3bwsyop","content":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}","site":{"data":{}},"excerpt":"","more":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}"},{"title":"categories","date":"2017-03-14T16:28:38.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-15 00:28:38\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-04-20T08:42:10.285Z","path":"categories/index.html","layout":"page","_id":"ck1nb72u00002dgqi68pmao86","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n\twidth: 200px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n.canvas-box{\n\tposition: relative;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA(你好)\",\"A(我叫Hugo)\",\"B(我是一名)\",\"C(前端工程师)\",\"D(兼业余H5游戏爱好开发者)\",\"E(后台语言技能树:nodejs)\",\"F(有微信小程序开发经验)\",\"G(后面有彩蛋欢迎继续挑战)\",\"H(再后面有我的邮箱地址,加油)\",\"I(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt+\"秒\"; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n\t<div class=\"label\">现在的我: <span id=\"score\">AA</span></div>\n\t<div class=\"label\">曾经的我: <span id=\"max_score\">AA</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div class=\"canvas-box\">\n\t\t<canvas id=\"canvas\" width=\"850\" height=\"510\">\n\t\t</canvas>\n\t\t<div id=\"timer\">剩余时间:</div>\n\t</div>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    \n    </body>\n    </html>","source":"about/index.html","raw":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n\twidth: 200px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n.canvas-box{\n\tposition: relative;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA(你好)\",\"A(我叫Hugo)\",\"B(我是一名)\",\"C(前端工程师)\",\"D(兼业余H5游戏爱好开发者)\",\"E(后台语言技能树:nodejs)\",\"F(有微信小程序开发经验)\",\"G(后面有彩蛋欢迎继续挑战)\",\"H(再后面有我的邮箱地址,加油)\",\"I(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt+\"秒\"; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n\t<div class=\"label\">现在的我: <span id=\"score\">AA</span></div>\n\t<div class=\"label\">曾经的我: <span id=\"max_score\">AA</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div class=\"canvas-box\">\n\t\t<canvas id=\"canvas\" width=\"850\" height=\"510\">\n\t\t</canvas>\n\t\t<div id=\"timer\">剩余时间:</div>\n\t</div>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    \n    </body>\n    </html>","date":"2019-05-19T14:52:24.218Z","updated":"2019-05-19T14:52:24.218Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ck1nb72u20004dgqiz03ow7cn","content":"<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n\twidth: 200px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n.canvas-box{\n\tposition: relative;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA(你好)\",\"A(我叫Hugo)\",\"B(我是一名)\",\"C(前端工程师)\",\"D(兼业余H5游戏爱好开发者)\",\"E(后台语言技能树:nodejs)\",\"F(有微信小程序开发经验)\",\"G(后面有彩蛋欢迎继续挑战)\",\"H(再后面有我的邮箱地址,加油)\",\"I(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt+\"秒\"; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onload=\"init();\">\n\t<div class=\"label\">现在的我: <span id=\"score\">AA</span></div>\n\t<div class=\"label\">曾经的我: <span id=\"max_score\">AA</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div class=\"canvas-box\">\n\t\t<canvas id=\"canvas\" width=\"850\" height=\"510\">\n\t\t</canvas>\n\t\t<div id=\"timer\">剩余时间:</div>\n\t</div>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br>\n    \n    </body>\n    </html>","site":{"data":{}},"excerpt":"","more":"<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n\twidth: 200px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n.canvas-box{\n\tposition: relative;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA(你好)\",\"A(我叫Hugo)\",\"B(我是一名)\",\"C(前端工程师)\",\"D(兼业余H5游戏爱好开发者)\",\"E(后台语言技能树:nodejs)\",\"F(有微信小程序开发经验)\",\"G(后面有彩蛋欢迎继续挑战)\",\"H(再后面有我的邮箱地址,加油)\",\"I(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt+\"秒\"; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onload=\"init();\">\n\t<div class=\"label\">现在的我: <span id=\"score\">AA</span></div>\n\t<div class=\"label\">曾经的我: <span id=\"max_score\">AA</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div class=\"canvas-box\">\n\t\t<canvas id=\"canvas\" width=\"850\" height=\"510\">\n\t\t</canvas>\n\t\t<div id=\"timer\">剩余时间:</div>\n\t</div>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br>\n    \n    </body>\n    </html>"},{"title":"tags","date":"2017-03-14T15:43:45.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-14 23:43:45\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-04-20T08:42:10.293Z","path":"tags/index.html","layout":"page","_id":"ck1nb72xg001idgqivoucu82z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"怎样更改组件库的图标？","date":"2019-03-14T15:09:37.000Z","_content":"想必很多前端现在都是用别人的组件库，ant-design、element-ui或者vant等，那么当组件上的icon和我们美丽动人的UI小姐姐画出的UI稿不一样的时候，你们会怎么做呢？\n<!-- more -->\n## 组件api替换大法\n1、组件本身提供api给你更换icon，换之则可\n2、但每次使用都要替换也是挺麻烦的，可以尝试先封装一下，使用高阶组件\n\n>可行性高，操作容易、略麻烦\n\n## 源码copy大法\n1、不使用传统的npm install的包安装方法\n2、将组件库的源码copy下来单独一个文件\n3、修改源码组件对应的图标\n4、或者自己建立一个私有的npm库将整个组件库推上去\n\n>1、一次操作到位\n>2、但是组件库版本滞后\n\n## webpack修改大法\n以ant-design为例子\n### webpack上的resolve路径\n``` bash\n  resolve: {\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.less', '.css', '.json'],\n    alias: {\n      '@src': path.resolve(__dirname, '../', './src'),\n      '@package': path.resolve(__dirname, '../', 'src', 'package'),\n      '@libs': path.resolve(__dirname, '../', 'src', 'libs'),\n      '@assets': path.resolve(__dirname, '../', 'src', 'assets'),\n      '@ant-design/icons/lib/dist$': path.resolve(__dirname, '../', 'src', 'icon.js'),\n      'vue': 'vue/dist/vue.esm.js',\n    }\n  }\n```\n主要就是改变这个打包路径 '@ant-design/icons/lib/dist$'\n\n### icon.js的文件\n``` bash\n\nexport {\n  default as CloseOutline\n} from '@libs/components/icons/CloseOutline'\nexport {\n  default as CheckOutline\n} from '@ant-design/icons/lib/outline/CheckOutline'\nexport {\n  default as LoadingOutline\n} from '@ant-design/icons/lib/outline/LoadingOutline'\nexport {\n  default as CheckCircleOutline\n} from '@ant-design/icons/lib/outline/CheckCircleOutline'\nexport {\n  default as InfoCircleOutline\n} from '@ant-design/icons/lib/outline/InfoCircleOutline'\nexport {\n  default as CloseCircleOutline\n} from '@ant-design/icons/lib/outline/CloseCircleOutline'\nexport {\n  default as ExclamationCircleOutline\n} from '@ant-design/icons/lib/outline/ExclamationCircleOutline'\nexport {\n  default as CheckCircleFill\n} from '@ant-design/icons/lib/fill/CheckCircleFill'\nexport {\n  default as InfoCircleFill\n} from '@ant-design/icons/lib/fill/InfoCircleFill'\nexport {\n  default as CloseCircleFill\n} from '@ant-design/icons/lib/fill/CloseCircleFill'\nexport {\n  default as ExclamationCircleFill\n} from '@ant-design/icons/lib/fill/ExclamationCircleFill'\nexport { default as UpOutline } from '@ant-design/icons/lib/outline/UpOutline'\nexport {\n  default as DownOutline\n} from '@ant-design/icons/lib/outline/DownOutline'\nexport {\n  default as LeftOutline\n} from '@ant-design/icons/lib/outline/LeftOutline'\nexport {\n  default as RightOutline\n} from '@ant-design/icons/lib/outline/RightOutline'\nexport {\n  default as RedoOutline\n} from '@ant-design/icons/lib/outline/RedoOutline'\nexport {\n  default as CalendarOutline\n} from '@ant-design/icons/lib/outline/CalendarOutline'\nexport {\n  default as SearchOutline\n} from '@ant-design/icons/lib/outline/SearchOutline'\nexport {\n  default as BarsOutline\n} from '@ant-design/icons/lib/outline/BarsOutline'\nexport {\n  default as StarFill\n} from '@ant-design/icons/lib/fill/StarFill'\nexport {\n  default as FilterOutline\n} from '@ant-design/icons/lib/outline/FilterOutline'\nexport {\n  default as CaretUpFill\n} from '@ant-design/icons/lib/fill/CaretUpFill'\nexport {\n  default as CaretDownFill\n} from '@ant-design/icons/lib/fill/CaretDownFill'\nexport {\n  default as CaretUpOutline\n} from '@ant-design/icons/lib/outline/CaretUpOutline'\nexport {\n  default as CaretDownOutline\n} from '@ant-design/icons/lib/outline/CaretDownOutline'\nexport {\n  default as PlusOutline\n} from '@ant-design/icons/lib/outline/PlusOutline'\nexport {\n  default as FileOutline\n} from '@ant-design/icons/lib/outline/FileOutline'\nexport {\n  default as FolderOpenOutline\n} from '@ant-design/icons/lib/outline/FolderOpenOutline'\nexport {\n  default as FolderOutline\n} from '@ant-design/icons/lib/outline/FolderOutline'\nexport {\n  default as PaperClipOutline\n} from '@ant-design/icons/lib/outline/PaperClipOutline'\nexport {\n  default as PictureOutline\n} from '@ant-design/icons/lib/outline/PictureOutline'\nexport {\n  default as EyeOutline\n} from '@ant-design/icons/lib/outline/EyeOutline'\nexport {\n  default as DeleteOutline\n} from '@ant-design/icons/lib/outline/DeleteOutline'\n\n```\n就是将你需要更改的图标的地址改为你本地的\n而且这里可以只引入一些你需要的图标，会减少一些icon库的打包大小\n\n### 本地的图标\n```bash\n\"use strict\"\nObject.defineProperty(exports, \"__esModule\", { value: true })\nvar CloseOutline = {\n  name: 'close',\n  theme: 'outline',\n  icon: {\n    tag: 'svg',\n    attrs: { version: '1.0', viewBox: '0 0 16 16', focusable: false },\n    children: [\n      {\n        tag: 'path',\n        attrs: {\n          'fill-rule': 'evenodd',\n          d: 'M10.17 7.72l5.63-5.67a.63.63 0 000-.9l-.86-.91a.63.63 0 00-.91 0L8.35 5.9a.42.42 0 01-.61 0L2.06.2a.63.63 0 00-.91 0l-.91.9a.63.63 0 000 .91l5.68 5.67c.17.17.17.43 0 .6L.2 13.98a.63.63 0 000 .92l.9.9c.27.26.66.26.92 0l5.68-5.66a.42.42 0 01.6 0l5.68 5.67c.26.25.65.25.91 0l.91-.91a.63.63 0 000-.91l-5.63-5.67a.42.42 0 010-.6'\n        }\n      }\n    ]\n  }\n}\nexports.default = CloseOutline\n```\n使用ant-design-icons的库做转换\n[https://github.com/ant-design/ant-design-icons](https://github.com/ant-design/ant-design-icons)\n\n---\n\n## 总结\n各有利弊,欢迎补充","source":"_posts/icon-change.md","raw":"---\ntitle: 怎样更改组件库的图标？\ndate: 2019-03-14 23:09:37\ncategories: 学习笔记\ntags: [填坑]\n---\n想必很多前端现在都是用别人的组件库，ant-design、element-ui或者vant等，那么当组件上的icon和我们美丽动人的UI小姐姐画出的UI稿不一样的时候，你们会怎么做呢？\n<!-- more -->\n## 组件api替换大法\n1、组件本身提供api给你更换icon，换之则可\n2、但每次使用都要替换也是挺麻烦的，可以尝试先封装一下，使用高阶组件\n\n>可行性高，操作容易、略麻烦\n\n## 源码copy大法\n1、不使用传统的npm install的包安装方法\n2、将组件库的源码copy下来单独一个文件\n3、修改源码组件对应的图标\n4、或者自己建立一个私有的npm库将整个组件库推上去\n\n>1、一次操作到位\n>2、但是组件库版本滞后\n\n## webpack修改大法\n以ant-design为例子\n### webpack上的resolve路径\n``` bash\n  resolve: {\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.less', '.css', '.json'],\n    alias: {\n      '@src': path.resolve(__dirname, '../', './src'),\n      '@package': path.resolve(__dirname, '../', 'src', 'package'),\n      '@libs': path.resolve(__dirname, '../', 'src', 'libs'),\n      '@assets': path.resolve(__dirname, '../', 'src', 'assets'),\n      '@ant-design/icons/lib/dist$': path.resolve(__dirname, '../', 'src', 'icon.js'),\n      'vue': 'vue/dist/vue.esm.js',\n    }\n  }\n```\n主要就是改变这个打包路径 '@ant-design/icons/lib/dist$'\n\n### icon.js的文件\n``` bash\n\nexport {\n  default as CloseOutline\n} from '@libs/components/icons/CloseOutline'\nexport {\n  default as CheckOutline\n} from '@ant-design/icons/lib/outline/CheckOutline'\nexport {\n  default as LoadingOutline\n} from '@ant-design/icons/lib/outline/LoadingOutline'\nexport {\n  default as CheckCircleOutline\n} from '@ant-design/icons/lib/outline/CheckCircleOutline'\nexport {\n  default as InfoCircleOutline\n} from '@ant-design/icons/lib/outline/InfoCircleOutline'\nexport {\n  default as CloseCircleOutline\n} from '@ant-design/icons/lib/outline/CloseCircleOutline'\nexport {\n  default as ExclamationCircleOutline\n} from '@ant-design/icons/lib/outline/ExclamationCircleOutline'\nexport {\n  default as CheckCircleFill\n} from '@ant-design/icons/lib/fill/CheckCircleFill'\nexport {\n  default as InfoCircleFill\n} from '@ant-design/icons/lib/fill/InfoCircleFill'\nexport {\n  default as CloseCircleFill\n} from '@ant-design/icons/lib/fill/CloseCircleFill'\nexport {\n  default as ExclamationCircleFill\n} from '@ant-design/icons/lib/fill/ExclamationCircleFill'\nexport { default as UpOutline } from '@ant-design/icons/lib/outline/UpOutline'\nexport {\n  default as DownOutline\n} from '@ant-design/icons/lib/outline/DownOutline'\nexport {\n  default as LeftOutline\n} from '@ant-design/icons/lib/outline/LeftOutline'\nexport {\n  default as RightOutline\n} from '@ant-design/icons/lib/outline/RightOutline'\nexport {\n  default as RedoOutline\n} from '@ant-design/icons/lib/outline/RedoOutline'\nexport {\n  default as CalendarOutline\n} from '@ant-design/icons/lib/outline/CalendarOutline'\nexport {\n  default as SearchOutline\n} from '@ant-design/icons/lib/outline/SearchOutline'\nexport {\n  default as BarsOutline\n} from '@ant-design/icons/lib/outline/BarsOutline'\nexport {\n  default as StarFill\n} from '@ant-design/icons/lib/fill/StarFill'\nexport {\n  default as FilterOutline\n} from '@ant-design/icons/lib/outline/FilterOutline'\nexport {\n  default as CaretUpFill\n} from '@ant-design/icons/lib/fill/CaretUpFill'\nexport {\n  default as CaretDownFill\n} from '@ant-design/icons/lib/fill/CaretDownFill'\nexport {\n  default as CaretUpOutline\n} from '@ant-design/icons/lib/outline/CaretUpOutline'\nexport {\n  default as CaretDownOutline\n} from '@ant-design/icons/lib/outline/CaretDownOutline'\nexport {\n  default as PlusOutline\n} from '@ant-design/icons/lib/outline/PlusOutline'\nexport {\n  default as FileOutline\n} from '@ant-design/icons/lib/outline/FileOutline'\nexport {\n  default as FolderOpenOutline\n} from '@ant-design/icons/lib/outline/FolderOpenOutline'\nexport {\n  default as FolderOutline\n} from '@ant-design/icons/lib/outline/FolderOutline'\nexport {\n  default as PaperClipOutline\n} from '@ant-design/icons/lib/outline/PaperClipOutline'\nexport {\n  default as PictureOutline\n} from '@ant-design/icons/lib/outline/PictureOutline'\nexport {\n  default as EyeOutline\n} from '@ant-design/icons/lib/outline/EyeOutline'\nexport {\n  default as DeleteOutline\n} from '@ant-design/icons/lib/outline/DeleteOutline'\n\n```\n就是将你需要更改的图标的地址改为你本地的\n而且这里可以只引入一些你需要的图标，会减少一些icon库的打包大小\n\n### 本地的图标\n```bash\n\"use strict\"\nObject.defineProperty(exports, \"__esModule\", { value: true })\nvar CloseOutline = {\n  name: 'close',\n  theme: 'outline',\n  icon: {\n    tag: 'svg',\n    attrs: { version: '1.0', viewBox: '0 0 16 16', focusable: false },\n    children: [\n      {\n        tag: 'path',\n        attrs: {\n          'fill-rule': 'evenodd',\n          d: 'M10.17 7.72l5.63-5.67a.63.63 0 000-.9l-.86-.91a.63.63 0 00-.91 0L8.35 5.9a.42.42 0 01-.61 0L2.06.2a.63.63 0 00-.91 0l-.91.9a.63.63 0 000 .91l5.68 5.67c.17.17.17.43 0 .6L.2 13.98a.63.63 0 000 .92l.9.9c.27.26.66.26.92 0l5.68-5.66a.42.42 0 01.6 0l5.68 5.67c.26.25.65.25.91 0l.91-.91a.63.63 0 000-.91l-5.63-5.67a.42.42 0 010-.6'\n        }\n      }\n    ]\n  }\n}\nexports.default = CloseOutline\n```\n使用ant-design-icons的库做转换\n[https://github.com/ant-design/ant-design-icons](https://github.com/ant-design/ant-design-icons)\n\n---\n\n## 总结\n各有利弊,欢迎补充","slug":"icon-change","published":1,"updated":"2019-08-07T07:00:59.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72tx0001dgqi9lkq03ix","content":"<p>想必很多前端现在都是用别人的组件库，ant-design、element-ui或者vant等，那么当组件上的icon和我们美丽动人的UI小姐姐画出的UI稿不一样的时候，你们会怎么做呢？<br><a id=\"more\"></a></p>\n<h2 id=\"组件api替换大法\"><a href=\"#组件api替换大法\" class=\"headerlink\" title=\"组件api替换大法\"></a>组件api替换大法</h2><p>1、组件本身提供api给你更换icon，换之则可<br>2、但每次使用都要替换也是挺麻烦的，可以尝试先封装一下，使用高阶组件</p>\n<blockquote>\n<p>可行性高，操作容易、略麻烦</p>\n</blockquote>\n<h2 id=\"源码copy大法\"><a href=\"#源码copy大法\" class=\"headerlink\" title=\"源码copy大法\"></a>源码copy大法</h2><p>1、不使用传统的npm install的包安装方法<br>2、将组件库的源码copy下来单独一个文件<br>3、修改源码组件对应的图标<br>4、或者自己建立一个私有的npm库将整个组件库推上去</p>\n<blockquote>\n<p>1、一次操作到位<br>2、但是组件库版本滞后</p>\n</blockquote>\n<h2 id=\"webpack修改大法\"><a href=\"#webpack修改大法\" class=\"headerlink\" title=\"webpack修改大法\"></a>webpack修改大法</h2><p>以ant-design为例子</p>\n<h3 id=\"webpack上的resolve路径\"><a href=\"#webpack上的resolve路径\" class=\"headerlink\" title=\"webpack上的resolve路径\"></a>webpack上的resolve路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [<span class=\"string\">'.ts'</span>, <span class=\"string\">'.tsx'</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.less'</span>, <span class=\"string\">'.css'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">  <span class=\"built_in\">alias</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'@src'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@package'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'package'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@libs'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'libs'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@assets'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'assets'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@ant-design/icons/lib/dist$'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'icon.js'</span>),</span><br><span class=\"line\">    <span class=\"string\">'vue'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要就是改变这个打包路径 ‘@ant-design/icons/lib/dist$’</p>\n<h3 id=\"icon-js的文件\"><a href=\"#icon-js的文件\" class=\"headerlink\" title=\"icon.js的文件\"></a>icon.js的文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CloseOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@libs/components/icons/CloseOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CheckOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CheckOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as LoadingOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/LoadingOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CheckCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CheckCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as InfoCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/InfoCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CloseCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CloseCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as ExclamationCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/ExclamationCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CheckCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CheckCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as InfoCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/InfoCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CloseCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CloseCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as ExclamationCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/ExclamationCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123; default as UpOutline &#125; from <span class=\"string\">'@ant-design/icons/lib/outline/UpOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as DownOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/DownOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as LeftOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/LeftOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as RightOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/RightOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as RedoOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/RedoOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CalendarOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CalendarOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as SearchOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/SearchOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as BarsOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/BarsOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as StarFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/StarFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FilterOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FilterOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretUpFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CaretUpFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretDownFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CaretDownFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretUpOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CaretUpOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretDownOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CaretDownOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as PlusOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/PlusOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FileOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FileOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FolderOpenOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FolderOpenOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FolderOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FolderOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as PaperClipOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/PaperClipOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as PictureOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/PictureOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as EyeOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/EyeOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as DeleteOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/DeleteOutline'</span></span><br></pre></td></tr></table></figure>\n<p>就是将你需要更改的图标的地址改为你本地的<br>而且这里可以只引入一些你需要的图标，会减少一些icon库的打包大小</p>\n<h3 id=\"本地的图标\"><a href=\"#本地的图标\" class=\"headerlink\" title=\"本地的图标\"></a>本地的图标</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"use strict\"</span></span><br><span class=\"line\">Object.defineProperty(exports, <span class=\"string\">\"__esModule\"</span>, &#123; value: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">var CloseOutline = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'close'</span>,</span><br><span class=\"line\">  theme: <span class=\"string\">'outline'</span>,</span><br><span class=\"line\">  icon: &#123;</span><br><span class=\"line\">    tag: <span class=\"string\">'svg'</span>,</span><br><span class=\"line\">    attrs: &#123; version: <span class=\"string\">'1.0'</span>, viewBox: <span class=\"string\">'0 0 16 16'</span>, focusable: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        tag: <span class=\"string\">'path'</span>,</span><br><span class=\"line\">        attrs: &#123;</span><br><span class=\"line\">          <span class=\"string\">'fill-rule'</span>: <span class=\"string\">'evenodd'</span>,</span><br><span class=\"line\">          d: <span class=\"string\">'M10.17 7.72l5.63-5.67a.63.63 0 000-.9l-.86-.91a.63.63 0 00-.91 0L8.35 5.9a.42.42 0 01-.61 0L2.06.2a.63.63 0 00-.91 0l-.91.9a.63.63 0 000 .91l5.68 5.67c.17.17.17.43 0 .6L.2 13.98a.63.63 0 000 .92l.9.9c.27.26.66.26.92 0l5.68-5.66a.42.42 0 01.6 0l5.68 5.67c.26.25.65.25.91 0l.91-.91a.63.63 0 000-.91l-5.63-5.67a.42.42 0 010-.6'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.default = CloseOutline</span><br></pre></td></tr></table></figure>\n<p>使用ant-design-icons的库做转换<br><a href=\"https://github.com/ant-design/ant-design-icons\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design-icons</a></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>各有利弊,欢迎补充</p>\n","site":{"data":{}},"excerpt":"<p>想必很多前端现在都是用别人的组件库，ant-design、element-ui或者vant等，那么当组件上的icon和我们美丽动人的UI小姐姐画出的UI稿不一样的时候，你们会怎么做呢？<br>","more":"</p>\n<h2 id=\"组件api替换大法\"><a href=\"#组件api替换大法\" class=\"headerlink\" title=\"组件api替换大法\"></a>组件api替换大法</h2><p>1、组件本身提供api给你更换icon，换之则可<br>2、但每次使用都要替换也是挺麻烦的，可以尝试先封装一下，使用高阶组件</p>\n<blockquote>\n<p>可行性高，操作容易、略麻烦</p>\n</blockquote>\n<h2 id=\"源码copy大法\"><a href=\"#源码copy大法\" class=\"headerlink\" title=\"源码copy大法\"></a>源码copy大法</h2><p>1、不使用传统的npm install的包安装方法<br>2、将组件库的源码copy下来单独一个文件<br>3、修改源码组件对应的图标<br>4、或者自己建立一个私有的npm库将整个组件库推上去</p>\n<blockquote>\n<p>1、一次操作到位<br>2、但是组件库版本滞后</p>\n</blockquote>\n<h2 id=\"webpack修改大法\"><a href=\"#webpack修改大法\" class=\"headerlink\" title=\"webpack修改大法\"></a>webpack修改大法</h2><p>以ant-design为例子</p>\n<h3 id=\"webpack上的resolve路径\"><a href=\"#webpack上的resolve路径\" class=\"headerlink\" title=\"webpack上的resolve路径\"></a>webpack上的resolve路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [<span class=\"string\">'.ts'</span>, <span class=\"string\">'.tsx'</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.less'</span>, <span class=\"string\">'.css'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">  <span class=\"built_in\">alias</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'@src'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@package'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'package'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@libs'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'libs'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@assets'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'assets'</span>),</span><br><span class=\"line\">    <span class=\"string\">'@ant-design/icons/lib/dist$'</span>: path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'icon.js'</span>),</span><br><span class=\"line\">    <span class=\"string\">'vue'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要就是改变这个打包路径 ‘@ant-design/icons/lib/dist$’</p>\n<h3 id=\"icon-js的文件\"><a href=\"#icon-js的文件\" class=\"headerlink\" title=\"icon.js的文件\"></a>icon.js的文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CloseOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@libs/components/icons/CloseOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CheckOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CheckOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as LoadingOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/LoadingOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CheckCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CheckCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as InfoCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/InfoCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CloseCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CloseCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as ExclamationCircleOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/ExclamationCircleOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CheckCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CheckCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as InfoCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/InfoCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CloseCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CloseCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as ExclamationCircleFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/ExclamationCircleFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123; default as UpOutline &#125; from <span class=\"string\">'@ant-design/icons/lib/outline/UpOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as DownOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/DownOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as LeftOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/LeftOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as RightOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/RightOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as RedoOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/RedoOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CalendarOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CalendarOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as SearchOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/SearchOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as BarsOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/BarsOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as StarFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/StarFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FilterOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FilterOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretUpFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CaretUpFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretDownFill</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/fill/CaretDownFill'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretUpOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CaretUpOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as CaretDownOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/CaretDownOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as PlusOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/PlusOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FileOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FileOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FolderOpenOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FolderOpenOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as FolderOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/FolderOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as PaperClipOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/PaperClipOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as PictureOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/PictureOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as EyeOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/EyeOutline'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> &#123;</span><br><span class=\"line\">  default as DeleteOutline</span><br><span class=\"line\">&#125; from <span class=\"string\">'@ant-design/icons/lib/outline/DeleteOutline'</span></span><br></pre></td></tr></table></figure>\n<p>就是将你需要更改的图标的地址改为你本地的<br>而且这里可以只引入一些你需要的图标，会减少一些icon库的打包大小</p>\n<h3 id=\"本地的图标\"><a href=\"#本地的图标\" class=\"headerlink\" title=\"本地的图标\"></a>本地的图标</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"use strict\"</span></span><br><span class=\"line\">Object.defineProperty(exports, <span class=\"string\">\"__esModule\"</span>, &#123; value: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">var CloseOutline = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'close'</span>,</span><br><span class=\"line\">  theme: <span class=\"string\">'outline'</span>,</span><br><span class=\"line\">  icon: &#123;</span><br><span class=\"line\">    tag: <span class=\"string\">'svg'</span>,</span><br><span class=\"line\">    attrs: &#123; version: <span class=\"string\">'1.0'</span>, viewBox: <span class=\"string\">'0 0 16 16'</span>, focusable: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        tag: <span class=\"string\">'path'</span>,</span><br><span class=\"line\">        attrs: &#123;</span><br><span class=\"line\">          <span class=\"string\">'fill-rule'</span>: <span class=\"string\">'evenodd'</span>,</span><br><span class=\"line\">          d: <span class=\"string\">'M10.17 7.72l5.63-5.67a.63.63 0 000-.9l-.86-.91a.63.63 0 00-.91 0L8.35 5.9a.42.42 0 01-.61 0L2.06.2a.63.63 0 00-.91 0l-.91.9a.63.63 0 000 .91l5.68 5.67c.17.17.17.43 0 .6L.2 13.98a.63.63 0 000 .92l.9.9c.27.26.66.26.92 0l5.68-5.66a.42.42 0 01.6 0l5.68 5.67c.26.25.65.25.91 0l.91-.91a.63.63 0 000-.91l-5.63-5.67a.42.42 0 010-.6'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.default = CloseOutline</span><br></pre></td></tr></table></figure>\n<p>使用ant-design-icons的库做转换<br><a href=\"https://github.com/ant-design/ant-design-icons\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design-icons</a></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>各有利弊,欢迎补充</p>"},{"title":"Hello Hexo","date":"2016-02-14T15:09:37.000Z","_content":"博客换上Hexo主题，\n## 很久以前\n<!-- more -->\n### 就被它的这个\n\n``` bash\n试试代码\n```\n1001001111100101010110\n\n>试试区块 这是一个区块\n\n*这是斜体文字* \n**这是加粗的文字** \n<font size=4>我是变大的字</font>\n[这是个链接](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html)\n\n### 文章目录吸引了\n\n``` bash\nconsole.log('hello world');\n```\n列表？\n1. Red\n2. Green\n3. Blue\n\n### 今天终于能够换来试试\n\n``` bash\n$('#life').html('希望每个月能更一篇，以此为鉴');\n```\n### 表示好兴奋\n\n大家提提意见博客能有什么改造的地方\n\n``` bash\nfunction bye(){return \"恭喜你获得阅读我的第一篇博客成就！\"}\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello Hexo\ndate: 2016-02-14 23:09:37\ncategories: 文章\ntags: 第一次\n---\n博客换上Hexo主题，\n## 很久以前\n<!-- more -->\n### 就被它的这个\n\n``` bash\n试试代码\n```\n1001001111100101010110\n\n>试试区块 这是一个区块\n\n*这是斜体文字* \n**这是加粗的文字** \n<font size=4>我是变大的字</font>\n[这是个链接](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html)\n\n### 文章目录吸引了\n\n``` bash\nconsole.log('hello world');\n```\n列表？\n1. Red\n2. Green\n3. Blue\n\n### 今天终于能够换来试试\n\n``` bash\n$('#life').html('希望每个月能更一篇，以此为鉴');\n```\n### 表示好兴奋\n\n大家提提意见博客能有什么改造的地方\n\n``` bash\nfunction bye(){return \"恭喜你获得阅读我的第一篇博客成就！\"}\n```\n","slug":"hello-world","published":1,"updated":"2019-08-07T06:59:55.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72u00003dgqino7cp19t","content":"<p>博客换上Hexo主题，</p>\n<h2 id=\"很久以前\"><a href=\"#很久以前\" class=\"headerlink\" title=\"很久以前\"></a>很久以前</h2><a id=\"more\"></a>\n<h3 id=\"就被它的这个\"><a href=\"#就被它的这个\" class=\"headerlink\" title=\"就被它的这个\"></a>就被它的这个</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">试试代码</span><br></pre></td></tr></table></figure>\n<p>1001001111100101010110</p>\n<blockquote>\n<p>试试区块 这是一个区块</p>\n</blockquote>\n<p><em>这是斜体文字</em><br><strong>这是加粗的文字</strong> </p>\n<p><font size=\"4\">我是变大的字</font><br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html\" target=\"_blank\" rel=\"noopener\">这是个链接</a></p>\n<h3 id=\"文章目录吸引了\"><a href=\"#文章目录吸引了\" class=\"headerlink\" title=\"文章目录吸引了\"></a>文章目录吸引了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure>\n<p>列表？</p>\n<ol>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ol>\n<h3 id=\"今天终于能够换来试试\"><a href=\"#今天终于能够换来试试\" class=\"headerlink\" title=\"今天终于能够换来试试\"></a>今天终于能够换来试试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#life'</span>).html(<span class=\"string\">'希望每个月能更一篇，以此为鉴'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"表示好兴奋\"><a href=\"#表示好兴奋\" class=\"headerlink\" title=\"表示好兴奋\"></a>表示好兴奋</h3><p>大家提提意见博客能有什么改造的地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bye</span></span>()&#123;<span class=\"built_in\">return</span> <span class=\"string\">\"恭喜你获得阅读我的第一篇博客成就！\"</span>&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>博客换上Hexo主题，</p>\n<h2 id=\"很久以前\"><a href=\"#很久以前\" class=\"headerlink\" title=\"很久以前\"></a>很久以前</h2>","more":"<h3 id=\"就被它的这个\"><a href=\"#就被它的这个\" class=\"headerlink\" title=\"就被它的这个\"></a>就被它的这个</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">试试代码</span><br></pre></td></tr></table></figure>\n<p>1001001111100101010110</p>\n<blockquote>\n<p>试试区块 这是一个区块</p>\n</blockquote>\n<p><em>这是斜体文字</em><br><strong>这是加粗的文字</strong> </p>\n<p><font size=\"4\">我是变大的字</font><br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html\" target=\"_blank\" rel=\"noopener\">这是个链接</a></p>\n<h3 id=\"文章目录吸引了\"><a href=\"#文章目录吸引了\" class=\"headerlink\" title=\"文章目录吸引了\"></a>文章目录吸引了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure>\n<p>列表？</p>\n<ol>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ol>\n<h3 id=\"今天终于能够换来试试\"><a href=\"#今天终于能够换来试试\" class=\"headerlink\" title=\"今天终于能够换来试试\"></a>今天终于能够换来试试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#life'</span>).html(<span class=\"string\">'希望每个月能更一篇，以此为鉴'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"表示好兴奋\"><a href=\"#表示好兴奋\" class=\"headerlink\" title=\"表示好兴奋\"></a>表示好兴奋</h3><p>大家提提意见博客能有什么改造的地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bye</span></span>()&#123;<span class=\"built_in\">return</span> <span class=\"string\">\"恭喜你获得阅读我的第一篇博客成就！\"</span>&#125;</span><br></pre></td></tr></table></figure>"},{"title":"1.10乘100为什么不等于110","date":"2017-02-14T15:09:37.000Z","_content":"## 事情的起因\n要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。\n<!-- more -->\n&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。\n&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。\n&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。\n&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。\n## 问题剖释\n&emsp;&emsp;空中传来旁白君的声音，它解析道：\n&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。\n&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。 \n``` bash\n>1.10*100\n110.00000000000001\n```\nWHAT THE *!\n## IEEE754 双精度浮点数\nJavascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。\n而浮点数表示方式具有以下特点：\n1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；\n\n2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；\n\n3.浮点数只能精确表示m*2e的数值；\n\n4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；\n\n5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。\n\n由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。\n\n### So Why 1.10 * 100 === 110.00000000000001?\n1.1.10实际存储时的位模式是：\n0011111111110001100110011001100110011001100110011001100110011001;\n2.100实际存储时的位模式是\n0110010000000000000000000000000000000000000000000000000000000000;\n3.实际存储的位模式作为操作数进行浮点数乘法:\n110000110011100010111011110111100110100001100000000000000。\n转换为十进制即为110.00000000000001。\n\n### 0.1+0.2\n其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元\n``` bash\n>1.00*100\n100\n```\n就不会有问题了。\n\n## 总结\nJS坑常有，我们慢慢填之。","source":"_posts/js-note.md","raw":"---\ntitle: 1.10乘100为什么不等于110\ndate: 2017-02-14 23:09:37\ncategories: 学习笔记\ntags: [JS填坑,填坑]\n---\n## 事情的起因\n要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。\n<!-- more -->\n&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。\n&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。\n&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。\n&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。\n## 问题剖释\n&emsp;&emsp;空中传来旁白君的声音，它解析道：\n&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。\n&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。 \n``` bash\n>1.10*100\n110.00000000000001\n```\nWHAT THE *!\n## IEEE754 双精度浮点数\nJavascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。\n而浮点数表示方式具有以下特点：\n1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；\n\n2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；\n\n3.浮点数只能精确表示m*2e的数值；\n\n4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；\n\n5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。\n\n由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。\n\n### So Why 1.10 * 100 === 110.00000000000001?\n1.1.10实际存储时的位模式是：\n0011111111110001100110011001100110011001100110011001100110011001;\n2.100实际存储时的位模式是\n0110010000000000000000000000000000000000000000000000000000000000;\n3.实际存储的位模式作为操作数进行浮点数乘法:\n110000110011100010111011110111100110100001100000000000000。\n转换为十进制即为110.00000000000001。\n\n### 0.1+0.2\n其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元\n``` bash\n>1.00*100\n100\n```\n就不会有问题了。\n\n## 总结\nJS坑常有，我们慢慢填之。","slug":"js-note","published":1,"updated":"2019-06-13T15:23:29.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72u50007dgqikx8nj4iw","content":"<h2 id=\"事情的起因\"><a href=\"#事情的起因\" class=\"headerlink\" title=\"事情的起因\"></a>事情的起因</h2><p>要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。<br><a id=\"more\"></a><br>&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。<br>&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。<br>&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。<br>&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。</p>\n<h2 id=\"问题剖释\"><a href=\"#问题剖释\" class=\"headerlink\" title=\"问题剖释\"></a>问题剖释</h2><p>&emsp;&emsp;空中传来旁白君的声音，它解析道：<br>&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。<br>&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;1.10*100</span><br><span class=\"line\">110.00000000000001</span><br></pre></td></tr></table></figure></p>\n<p>WHAT THE *!</p>\n<h2 id=\"IEEE754-双精度浮点数\"><a href=\"#IEEE754-双精度浮点数\" class=\"headerlink\" title=\"IEEE754 双精度浮点数\"></a>IEEE754 双精度浮点数</h2><p>Javascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。<br>而浮点数表示方式具有以下特点：<br>1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；</p>\n<p>2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；</p>\n<p>3.浮点数只能精确表示m*2e的数值；</p>\n<p>4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；</p>\n<p>5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。</p>\n<p>由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。</p>\n<h3 id=\"So-Why-1-10-100-110-00000000000001\"><a href=\"#So-Why-1-10-100-110-00000000000001\" class=\"headerlink\" title=\"So Why 1.10 * 100 === 110.00000000000001?\"></a>So Why 1.10 * 100 === 110.00000000000001?</h3><p>1.1.10实际存储时的位模式是：<br>0011111111110001100110011001100110011001100110011001100110011001;<br>2.100实际存储时的位模式是<br>0110010000000000000000000000000000000000000000000000000000000000;<br>3.实际存储的位模式作为操作数进行浮点数乘法:<br>110000110011100010111011110111100110100001100000000000000。<br>转换为十进制即为110.00000000000001。</p>\n<h3 id=\"0-1-0-2\"><a href=\"#0-1-0-2\" class=\"headerlink\" title=\"0.1+0.2\"></a>0.1+0.2</h3><p>其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;1.00*100</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure></p>\n<p>就不会有问题了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>JS坑常有，我们慢慢填之。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"事情的起因\"><a href=\"#事情的起因\" class=\"headerlink\" title=\"事情的起因\"></a>事情的起因</h2><p>要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。<br>","more":"<br>&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。<br>&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。<br>&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。<br>&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。</p>\n<h2 id=\"问题剖释\"><a href=\"#问题剖释\" class=\"headerlink\" title=\"问题剖释\"></a>问题剖释</h2><p>&emsp;&emsp;空中传来旁白君的声音，它解析道：<br>&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。<br>&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;1.10*100</span><br><span class=\"line\">110.00000000000001</span><br></pre></td></tr></table></figure></p>\n<p>WHAT THE *!</p>\n<h2 id=\"IEEE754-双精度浮点数\"><a href=\"#IEEE754-双精度浮点数\" class=\"headerlink\" title=\"IEEE754 双精度浮点数\"></a>IEEE754 双精度浮点数</h2><p>Javascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。<br>而浮点数表示方式具有以下特点：<br>1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；</p>\n<p>2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；</p>\n<p>3.浮点数只能精确表示m*2e的数值；</p>\n<p>4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；</p>\n<p>5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。</p>\n<p>由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。</p>\n<h3 id=\"So-Why-1-10-100-110-00000000000001\"><a href=\"#So-Why-1-10-100-110-00000000000001\" class=\"headerlink\" title=\"So Why 1.10 * 100 === 110.00000000000001?\"></a>So Why 1.10 * 100 === 110.00000000000001?</h3><p>1.1.10实际存储时的位模式是：<br>0011111111110001100110011001100110011001100110011001100110011001;<br>2.100实际存储时的位模式是<br>0110010000000000000000000000000000000000000000000000000000000000;<br>3.实际存储的位模式作为操作数进行浮点数乘法:<br>110000110011100010111011110111100110100001100000000000000。<br>转换为十进制即为110.00000000000001。</p>\n<h3 id=\"0-1-0-2\"><a href=\"#0-1-0-2\" class=\"headerlink\" title=\"0.1+0.2\"></a>0.1+0.2</h3><p>其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;1.00*100</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure></p>\n<p>就不会有问题了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>JS坑常有，我们慢慢填之。</p>"},{"title":"《JavaScript设计模式》很有感","date":"2017-06-14T15:09:37.000Z","_content":"之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）\n<!-- more -->\n先给个书的链接: [JavaScript设计模式-张容铭](https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&ie=UTF8&qid=1482324196&sr=1-2&keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F)\n\n# 什么是设计模式\n\n设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。\n\n# 创建型设计模式\n\n创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。\n\n## 简单工厂模式\n作者把简单工厂模式比喻成一个神奇的魔术师。\n\n定义\n\n又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。\n\n使用场景\n\n看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：\n\n``` bash\n// 篮球基类\nvar Basketball = function() {\n    this.intro = '篮球盛行于美国';\n};\nBasketball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要5名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 足球基类\nvar Football = function() {\n    this.intro = '足球盛行于美国';\n};\nFootball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要11名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 运动工厂\nvar SportsFactory = function(name) {\n    switch(name) {\n        case 'NBA': \n            return new Basketball();\n        case 'wordCup': \n            return new Football();\n    }\n};\n```\n\n当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。\n简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。\n\n收获与总结\n\n团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。\n\n## 工厂方法模式\n\n作者把工厂方法模式比喻成一张名片。\n\n定义\n\n通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。\n\n使用场景\n\n在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。\n\n```bash\n// 工厂类\nvar Factory = function(type, content) {\n    if(this instanceof Factory) {\n        var s = new this[type](content);\n        return s;\n    } else {\n        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染\n        return new Factory(type, content);\n    }\n};\nFactory.prototype = {\n    Java: function(content) {\n        // ...\n    },\n    JavaScript: function(content) {\n        // ...\n    },\n    php: function(content) {\n        // ...\n    }\n};\n```\n\n这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。\n\n收获与总结\n\n对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。\n\n## 抽象工厂模式\n\n抽象工厂模式让你感觉出现的都是幻觉。\n\n定义\n\n通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。\n\n抽象类\n\n抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。\n\n使用场景\n\n抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。\n\n```bash\n// 抽象工厂方法\nvar VehicleFactory = function(subType, superType) {\n    // 判断抽象工厂中是否有该抽象类\n    if(typeof VehicleFactory[superType] === 'function') {\n        // 缓存类\n        function F() {};\n        // 继承父类属性和方法\n        F.prototype = new VehicleFactory[superType]();\n        // 将子类构造函数指向子类\n        subType.constructor = subType;\n        // 子类原型继承父类\n        subType.prototype = new F();\n    } else {\n        // 不存在该抽象类抛出错误\n        throw new Error('未创建该抽象类');\n    }\n};\n// 小汽车抽象类\nVehicleFactory.Car = function() {\n    this.type = 'car';\n};\nVehicleFactory.Car.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用')\n    }\n};\n// 公交车抽象类\nVehicleFactory.Bus = function() {\n    this.type = 'bus';\n};\nVehicleFactory.Bus.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用');\n    }\n};\n```\n\n抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。\n\n收获与总结\n\n抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。\n\n## 建造者模式\n\n建造者模式告诉我们分即是合。\n\n定义\n\n将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。\n\n应用场景\n\n现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。\n建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。\n\n```bash\n// 创建一位人类\nvar Human = function(param) {\n    // 技能\n    this.skill = param && param.skill || '保密';\n    // 兴趣爱好\n    this.hobby = param && param.hobby || '保密';\n};\n// 类人原型方法\nHuman.prototype = {\n    getSkill: function() {\n        return this.skill;\n    },\n    getHobby: function() {\n        return this.hobby;\n    }\n};\n// 实例化姓名类\nvar Named = function(name) {\n    var that = this;\n    // 构造器，解析姓名的姓与名\n    (function(name, that) {\n        that.wholeName = name;\n        if(name.indexOf(' ') > -1) {\n            that.FirstName = name.slice(0, name.indexOf(' '));\n            that.FirstName = name.slice(name.indexOf(' '));\n        }\n    })(name, that);\n};\n// 实例化职位类\nvar Work = function(work) {\n    var that = this;\n    // 构造器，通过传入的职位特征来设置相应职位及描述\n    (function(work, that) {\n        switch(work) {\n            case 'code':\n                that.work = '工程师';\n                break;\n            case 'UI':\n            case 'UE':\n                that.work = '设计师';\n                break;\n            case 'teach':\n                that.work = '教师';\n                break;\n            default:\n                that.work = work;\n        }\n    })(work, that);\n};\n// 更换期望的职位\nWork.prototype.changeWork = function(work) {\n    this.work = work;\n```\n\n下面来创建一位应聘者\n\n```bash\n// 应聘者创建类\nvar Person = function(name, work) {\n    // 创建应聘者缓存对象\n    var _person = new Human();\n    // 创建应聘者姓名解析对象\n    _person.name = new Named(name);\n    // 创建应聘者期望职位\n    _person.work = new Work(work);\n    // 返回创建的应聘者对象\n    return _person;\n}\n```\n\n收获与总结\n\n建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。\n\n## 原型模式\n\n原型模式是JavaScript语言之魂。\n\n定义\n\n用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。\n\n使用场景\n\n还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。\n原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。\n\n```bash\n// 原型对象复制方法\nfunction prototypeExtend() {\n    var F = function() {},\n        args = arguments,\n        i = 0,\n        len = args.length;\n    for (; i < len; i++) {\n        // 遍历每个模板对象中的属性\n        for(var j in args[i]) {\n            F.prototype[j] = args[i][j];\n        }\n    }\n    // 返回缓存类实例\n    return new F();\n}\n```\n\n企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。\n\n```bash\nvar penguin = prototypeExtend({\n    speed: 20,\n    swim: function() {\n        console.log('游泳速度' + this.speed);\n    },\n    run: function() {\n        console.log('奔跑速度' + this.speed);\n    }\n})\n```\n\n这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。\n\n收获与总结\n\n原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。\n\n## 单例模式\n\n哈哈，让你感受下一个人的寂寞。\n\n定义\n\n又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。\n\n使用场景\n\n单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。\n\n```bash\nvar A = {\n    Util: {\n        util_method1: function() {},\n        util_method2: function() {}\n    },\n    Tool: {\n        tool_method1: function() {},\n        tool_method2: function() {}\n    },\n    Ajax: {\n        ajax_method1: function() {},\n        ajax_method2: function() {}\n    }\n    ...\n}\n```\n\n如果想使用这个代码库，像下面这样访问即可：\n\n```bash\nA.Util.util_method1();\nA.Tool.tool_method2();\n```\n\n收获与总结\n\n单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。\n\n# 结构型设计模式\n\n结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。\n\n## 外观模式\n\n作者把这种模式比喻成一种套餐服务。\n\n定义\n\n为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。\n\n使用场景\n\n为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。\n\n```bash\n// 外观模式实现\nfunction addEvent(dom, type, fn) {\n    // 对于支持DOM2级事件处理程序的浏览器\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    // 对于不支持addEventListener但支持attachEvent的浏览器\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\n```\n\n解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。\n\n收获与总结\n\n当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。\n\n## 适配器模式\n\n听到这个模式的名字，有没有想到水管弯弯的场景呢？\n\n定义\n\n将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。\n\n使用场景\n\n公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。\n适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。\nJavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。\n\n```bash\nfunction doSomeThing(name, title, age, color, size, prize){}\n```\n\n记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：\n\n```bash\n/**\n * obj.name: name\n * obj.title: title\n * obj.age: age\n * obj.color: color\n * obj.size: size\n * obj.prize: prize\n***/\nfunction doSomeThing(obj){}\n```\n\n然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。\n\n```bash\nfunction doSomeThing(obj) {\n    var _adapter = {\n        name: '雨夜清荷',\n        title: '设计模式',\n        age: 24,\n        color: 'pink',\n        size: 100,\n        prize: 50\n    };\n    for(var i in _adapter) {\n        _adapter[i] = obj[i] || _adapter[i];\n    }\n}\n```\n\n收获与总结\n\nJavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。\n\n## 代理模式\n\n有没有想到牛郎织女鹊桥相会的场景？\n\n定义\n\n由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。\n\n使用场景\n\n跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。\n代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。\n\n```bash\n// 前端浏览器页面\n<script type=\"text/javascript\">\n// 回调函数\nfunction jsonpCallBack(res,req) {\n    console.log(res,req);\n}\n</script>\n<script type=\"text/javascript\" src=\"http://localhost/test/jsonp.php?callback=jsonp CallBack&data=getJsonPData\"></script>\n\n\n// 另一个域下的服务器请求接口\n<?php\n/* 后端获取请求字段数据，并生成返回内容 */\n$data = $_GET[\"data\"];\n$callback = $_GET[\"callback\"];\necho $callback.\"('success', '\".$data.\"')\";\n?>\n```\n\n这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。\n\n收获与总结\n\n代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。\n由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。\n\n## 装饰者模式\n\n显然房子装修就是一种典型的装饰者模式。\n\n定义\n\n在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。\n\n使用场景\n\n静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。\n\n```bash\n// 装饰者\nvar decorator = function(input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input);\n    // 若事件源已经绑定事件\n    if(typeof input.onclick === 'function') {\n        // 缓存事件源原有回调函数\n        var oldClickFn = input.onclick;\n        // 为事件源定义新的事件\n        input.onclick = function() {\n            // 事件源原有回调函数\n            oldClickFn();\n            // 执行事件源新增回调函数\n            fn();\n        }\n    } else {\n        input.onclick = fn;\n    }\n}\n```\n\n收获与总结\n\n除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。\n\n## 桥接模式\n\n作者把这种模式比喻成城市间的公路。\n\n定义\n\n在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。\n\n使用场景\n\n有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。\n对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。\n\n```bash\nfunction changeColor(dom, color, bg) {\n    // 设置元素的字体颜色\n    dom.style.color = color;\n    // 设置元素的背景颜色\n    dom.style.background = bg;\n}\n````\n\n接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。\n对于事件的桥接方法，可以用一个匿名函数来代替。\n\n```bash\nvar spans = document.getElementsByTagName('span');\nspans[0].onmouseover = function() {\n    changeColor(this, 'red', '#ddd');\n}\n```\n\n收获与总结\n\n桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。\n\n## 组合模式\n\n作者把组合模式比喻成超值午餐，感觉很形象。\n\n定义\n\n又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n使用场景\n\n为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。\n我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。\n在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。\n\n收获与总结\n\n组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。\n\n享元模式\n\n作者把享元模式比喻成城市公交车，可以仔细思考一番。\n\n定义\n\n运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。\n\n使用场景\n\n现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。\n享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。\n\n```bash\nvar Flyweight = function() {\n    // 已创建的元素\n    var created = [];\n    // 创建一个新闻包装容器\n    function create() {\n        var dom = document.createElement('div');\n        // 将容器插入新闻列表容器中\n        document.getElementById('container').appendChild(dom);\n        // 缓存新创建的元素\n        created.push(dom);\n        // 返回创建的新元素\n        return dom;\n    }\n    return {\n        // 获取创建新闻元素方法\n        getDiv: function() {\n            // 如果已创建的元素小于当前页元素总个数(5个)，则创建\n            if(created.length < 5) {\n                return created();\n            } else {\n                // 获取第一个元素，并插入去后面\n                var div = created.shift();\n                created.push(div);\n                return div;\n            }\n        }\n    }\n}\n````\n\n上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。\n\n```bash\nvar paper = 0,\n    num = 5,\n    len = article.length;\n// 添加五条新闻\nfor(var i = 0; i < 5; i++) {\n    if(article[i])\n        // 通过享元类获取创建的元素并写入新闻内容\n        Flyweight.getDiv().innerHTML = article[i];\n}\n\n// 下一页按钮绑定事件\ndocument.getElementById('next_page').onclick = function() {\n    // 如果新闻内容不足5条则返回\n    if(article.length < 5) {\n        return;\n    }\n    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引\n        j = 0;\n    // 插入5条新闻\n    for(; j < 5; j++) {\n        // 如果存在n+j条则插入\n        if(article[n + j]) {\n            Flyweight.getDiv().innerHTML = article[n + j];\n        // 否则插入起始位置第n+j-len条\n        } else if(article[n + j - len]) {\n            Flyweight.getDiv().innerHTML = article[n + j - len];\n        } else {\n            Flyweight.getDiv().innerHTML = \"\";\n        }\n    }\n}\n```\n\n这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。\n\n收获与总结\n\n享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。\n\n# 行为型设计模式\n\n行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。\n\n## 模板方法模式\n\n作者把这种模式比喻成照猫画虎。\n\n定义\n\n父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。\n\n使用场景\n\n提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。\n模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。\n打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。\n模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。\n\n```bash\n// 格式化字符串方法\nfunction formateString(str, data) {\n    return str.replace(/\\{#(\\w+)#\\}/g, function(match, key) {\n        return typeof data[key] === undefined ? '': data[key]\n    });\n}\n// 基础导航\nvar Nav = function(data) {\n    // 基础导航样式模板\n    this.item = '<a href=\"{#href#}\" title=\"{#title#}\">{#name#}</a>';\n    // 创建字符串\n    this.html = '';\n    // 格式化数据\n    for(var i = 0, len = data.length; i < len; i++) {\n        this.html += formateString(this.item, data[i]);\n    }\n    // 返回字符串数据\n    return this.html;\n}\n```\n\n对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。\n\n```bash\nvar NumNav = function(data) {\n    // 消息提醒信息组件模板\n    var tpl = '<b>{#num#}</b>';\n    // 装饰数据\n    for(var i = data.length - 1; i >= 0; i--) {\n        data[i].name += data[i].name + formateString(tpl, data[i]);\n    }\n    // 继承基础导航类\n    return Nav.call(this, data);\n}\n```\n\n收获与总结\n\n模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。\n\n## 观察者模式\n\n作者把这种模式比喻成通信卫星。\n\n定义\n\n又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。\n\n使用场景\n\n在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。\n观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。\n这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。\n\n```bash\nvar Observer = (function() {\n    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存\n    var __messages = {};\n    return {\n        // 注册信息接口\n        regist: function() {},\n        // 发布信息接口\n        fire: function() {},\n        // 移除信息接口\n        remove: function() {}\n    }\n})();\n```\n\n下面就是可以自己具体实现这些接口了。\n\n收获与总结\n\n观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。\n\n## 状态模式\n\n作者把这种模式比喻成超级玛丽。\n\n定义\n\n当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。\n\n使用场景\n\n平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。\n将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。\n\n```bash\n// 投票结果状态对象\nvar ResultState = function() {\n    // 判断结果保存在内部状态中\n    var States = {\n        // 每种状态作为一种独立方法保存\n        state0: function() {\n            console.log('这是第一种情况')：\n        },\n        state1: function() {\n            console.log('这是第二种情况')：\n        },\n        state2: function() {\n            console.log('这是第三种情况')：\n        },\n        state3: function() {\n            console.log('这是第四种情况')：\n        }\n    }\n    // 获取某种状态并执行对应方法\n    function show(result) {\n        States['state' + result] && States['state' + result]();\n    }\n    return {\n        // 返回调用状态方法接口\n        show: show\n    }\n}();\n```\n\n想调用第三种结果就可以如下调用\n\n```bash\nResultState.show(3);\n```\n\n对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。\n\n收获与总结\n\n状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。\n\n## 策略模式\n\n作者把这种模式比喻成活诸葛。\n\n定义\n\n将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。\n\n使用场景\n\n年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。\n结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：\n\n```bash\n// 价格策略对象\nvar PriceStrategy = function() {\n    // 内部算法对象\n    var strategy = {\n        // 100返30\n        return30: function(price) {},\n        // 100返50\n        return50: function(price) {},\n        // 9折\n        percent90: function(price) {},\n        // 8折\n        percent80: function(price) {},\n        // 5折\n        percent50: function(price) {},\n    }\n    // 策略算法调用接口\n    return function(algorithm, price) {\n        return strategy[algorithm] && strategy[algorithm](price);\n    }\n}();\n```\n\n收获与总结\n\n策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。\n\n## 职责链模式\n\n作者把这种模式比喻成一个有序车站。\n\n定义\n\n解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。\n\n使用场景\n\n项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。\n对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。\n\n收获与总结\n\n职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。\n\n## 命令模式\n\n定义\n\n将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。\n\n使用场景\n\n现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。\n命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。\n那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。\n\n```bash\n// 模块实现模块\nvar viewCommand = (function() {\n    var tpl = {\n        // 展示图片结构模块\n        product: [\n            '<div>',.....,'</div>'\n        ].join(''),\n        // 展示标题结构模块\n        title: [\n        '<div>',.....,'</div>'\n        ].join(''),\n    },\n    // 格式化字符串缓存字符串\n    html = '';\n    // 格式化字符串\n    function formateString(str, obj) {}\n    // 方法集合\n    var Action = {\n        // 创建方法\n        create: function(data, view) {\n            // 解析数据\n            if(data.length) {\n                // 遍历\n                for(var i = 0, len = data.length; i < len; i++) {\n                    html += formateString(tpl[view], data[i]);\n                }\n            } else {\n                html += formateString(tpl[view], data);\n            }\n        },\n        // 展示方法\n        display: function(container, data, vuew) {\n            // 如果传入数据\n            if(data) {\n                // 根据给的数据创建视图\n                this.create(data, view);\n            }\n            // 展示模块\n            document.getElementById(container).innerHTML = html;\n            // 展示后清空缓存字符串\n            html = '';\n        }\n    }\n    // 命令接口\n    return function excute(msg) {\n        // 解析命令，如果msg.param不是数组则将其转化为数组\n        msg.param = Object.prototype.toString.call(msg.param) === \"[object Array]\" ? msg.param : [msg.param];\n        // Action内部调用的方法引用this，此处保证作用域this执行传入Action\n        Action[msg.command].apply(Action, msg.param)\n    }\n})();\n```\n\n下面就可以测试这个命令对象了：\n\n```bash\nvar productData = [\n    {\n        src: 'command/02.jpg',\n        text: '绽放的桃花'\n    },\n    {\n        src: 'command/03.jpg',\n        text: '阳光下的温馨'\n    }\n],\n// 模块标题数据\ntitleData = {\n    title: '夏日里的一片温馨',\n    tips: '暖暖的温情带给人们家的感觉'\n}\n// 调用命令对象\nviewCommand({\n    command: 'display',\n    param: ['title', titleData, 'title']\n});\nviewCommand({\n    command: 'create',\n    param: ['product', productData, 'product']\n});\n```\n\n有了命令模式，想创建任何页面视图都是一件很简单的事情。\n\n收获与总结\n\n命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。\n\n## 访问者模式\n\n作者把这种模式比喻成驻华大使。\n\n定义\n\n针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。\n\n使用场景\n\n用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：\n\n```bash\nvar bindEvent = function(dom, type, fn) {\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\nvar demo = document.getElementById('demo');\nbindEvent(demo, 'click', function() {\n    this.style.background = 'red';\n});\n```\n\n这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。\n访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：\n\n```bash\nfunction bindIEEvent(dom, type, fn, data) {\n    var data = data || {};\n    dom.attachEvent('on' + type, function(e){\n        fn.call(dom, e, data);\n    });\n};\n```\n\n上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。\n\n收获与总结\n\n访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。\n\n## 中介者模式\n\n作者把这种模式比喻成媒婆，好吧，我笑了这里。\n\n定义\n\n通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。\n\n使用场景\n\n项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。\n观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。\n如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：\n\n```bash\n// 中介者对象\nvar Mediator = function() {\n    // 消息对象\n    var _msg = {};\n    return {\n        // 订阅消息方法，type:消息名称 action:消息回调函数\n        register: function(type, action) {\n            // 如果消息存在\n            if(_msg[type])\n                // 存入回调函数\n                _msg[type].push(action);\n            else {\n                // 不存在则建立消息容器\n                _msg[type] = [];\n                _msg[type].push(action);\n            }\n        },\n        // 发布消息方法\n        send: function(type) {\n            // 如果该消息已经被订阅\n            if(_msg[type]) {\n                // 遍历已存储的消息回调函数\n                for(var i = 0, len = _msg[type].length; i < len; i++) {\n                    // 执行回调函数\n                    _msg[type][i] && _msg[type][i]();\n                }\n            }\n        }\n    }\n}();\n```\n\n这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。\n\n收获与总结\n\n同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。\n\n备忘录模式\n\n定义\n\n在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。\n\n使用场景\n\n在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：\n\n```bash\n// Page备忘录类\nvar Page = function() {\n    // 信息缓存对象\n    var cache = {};\n    return function(page, fn) {\n        // 判断该页数据是否在缓存中\n        if(cache[page]) {\n            // 显示该页内容\n            showPage(page, cache[page]);\n            // 执行成功回调函数\n            fn && fn();\n        } else {\n            // 否则异步请求\n            $.post('./data/getNewsData.php', {\n                page: page\n            }, function(res) {\n                // 成功返回\n                if(res.errNo == 0) {\n                    showPage(page, res.data);\n                    cache[page] = res.data;\n                    fn && fn();\n                } else {\n                    // 处理异常\n                }\n            })\n        }\n    }\n}\n```\n\n上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。\n\n收获与总结\n\n备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。\n\n## 迭代器模式\n\n作者把这种模式比喻成一个点钞机。\n\n定义\n\n在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。\n\n使用场景\n\n迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：\n\n```bash\nvar Iterator = function(items, container) {\n    // 获取父元素\n    var container = container && document.getElementById(container) || document,\n    // 获取元素\n        items = container.getElementsByTagName(items),\n    // 获取元素长度\n        length = items.length,\n    // 当前索引值\n        index = 0;\n    // 缓存原生数组splice方法\n    var splice = [].splice;\n    return {\n        // 获取第一个元素\n        first: function() {},\n        // 获取最后一个元素\n        second: function() {},\n        // 获取前一个元素\n        pre: function() {},\n        // 获取后一个元素\n        next: function() {},\n        // 获取某一个元素\n        get: function(num) {},\n        // 对每一个元素执行某一个方法\n        dealEach: function(fn) {},\n        // 对某一个元素执行某一个方法\n        dealItem: function(num, fn) {},\n        // 排他方式处理某一个元素\n        exclusive: function() {}\n    }\n}\n```\n\n下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。\n\n收获与总结\n\n通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。\n\n## 解释器模式\n\n定义\n\n对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。\n\n使用场景\n\n一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：\n\n```bash\n<div calss=\"wrap\">\n    <div class=\"link-inner\">\n        <a href=\"#\">link</a>\n    </div>\n    <div class=\"button-inner\">\n        <button>text</button>\n    </div>\n</div>\n```\n\n要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV>DIV2>SPAN。\n上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。\n\n收获与总结\n\n一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。\n\n# 技巧型设计模式\n\n技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。\n\n# 架构型设计模式\n\n架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。\n\n学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。","source":"_posts/javascript-model.md","raw":"---\ntitle: 《JavaScript设计模式》很有感\ndate: 2017-06-14 23:09:37\ncategories: 学习笔记\ntags: [神书推荐]\n---\n之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）\n<!-- more -->\n先给个书的链接: [JavaScript设计模式-张容铭](https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&ie=UTF8&qid=1482324196&sr=1-2&keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F)\n\n# 什么是设计模式\n\n设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。\n\n# 创建型设计模式\n\n创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。\n\n## 简单工厂模式\n作者把简单工厂模式比喻成一个神奇的魔术师。\n\n定义\n\n又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。\n\n使用场景\n\n看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：\n\n``` bash\n// 篮球基类\nvar Basketball = function() {\n    this.intro = '篮球盛行于美国';\n};\nBasketball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要5名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 足球基类\nvar Football = function() {\n    this.intro = '足球盛行于美国';\n};\nFootball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要11名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 运动工厂\nvar SportsFactory = function(name) {\n    switch(name) {\n        case 'NBA': \n            return new Basketball();\n        case 'wordCup': \n            return new Football();\n    }\n};\n```\n\n当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。\n简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。\n\n收获与总结\n\n团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。\n\n## 工厂方法模式\n\n作者把工厂方法模式比喻成一张名片。\n\n定义\n\n通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。\n\n使用场景\n\n在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。\n\n```bash\n// 工厂类\nvar Factory = function(type, content) {\n    if(this instanceof Factory) {\n        var s = new this[type](content);\n        return s;\n    } else {\n        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染\n        return new Factory(type, content);\n    }\n};\nFactory.prototype = {\n    Java: function(content) {\n        // ...\n    },\n    JavaScript: function(content) {\n        // ...\n    },\n    php: function(content) {\n        // ...\n    }\n};\n```\n\n这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。\n\n收获与总结\n\n对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。\n\n## 抽象工厂模式\n\n抽象工厂模式让你感觉出现的都是幻觉。\n\n定义\n\n通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。\n\n抽象类\n\n抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。\n\n使用场景\n\n抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。\n\n```bash\n// 抽象工厂方法\nvar VehicleFactory = function(subType, superType) {\n    // 判断抽象工厂中是否有该抽象类\n    if(typeof VehicleFactory[superType] === 'function') {\n        // 缓存类\n        function F() {};\n        // 继承父类属性和方法\n        F.prototype = new VehicleFactory[superType]();\n        // 将子类构造函数指向子类\n        subType.constructor = subType;\n        // 子类原型继承父类\n        subType.prototype = new F();\n    } else {\n        // 不存在该抽象类抛出错误\n        throw new Error('未创建该抽象类');\n    }\n};\n// 小汽车抽象类\nVehicleFactory.Car = function() {\n    this.type = 'car';\n};\nVehicleFactory.Car.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用')\n    }\n};\n// 公交车抽象类\nVehicleFactory.Bus = function() {\n    this.type = 'bus';\n};\nVehicleFactory.Bus.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用');\n    }\n};\n```\n\n抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。\n\n收获与总结\n\n抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。\n\n## 建造者模式\n\n建造者模式告诉我们分即是合。\n\n定义\n\n将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。\n\n应用场景\n\n现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。\n建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。\n\n```bash\n// 创建一位人类\nvar Human = function(param) {\n    // 技能\n    this.skill = param && param.skill || '保密';\n    // 兴趣爱好\n    this.hobby = param && param.hobby || '保密';\n};\n// 类人原型方法\nHuman.prototype = {\n    getSkill: function() {\n        return this.skill;\n    },\n    getHobby: function() {\n        return this.hobby;\n    }\n};\n// 实例化姓名类\nvar Named = function(name) {\n    var that = this;\n    // 构造器，解析姓名的姓与名\n    (function(name, that) {\n        that.wholeName = name;\n        if(name.indexOf(' ') > -1) {\n            that.FirstName = name.slice(0, name.indexOf(' '));\n            that.FirstName = name.slice(name.indexOf(' '));\n        }\n    })(name, that);\n};\n// 实例化职位类\nvar Work = function(work) {\n    var that = this;\n    // 构造器，通过传入的职位特征来设置相应职位及描述\n    (function(work, that) {\n        switch(work) {\n            case 'code':\n                that.work = '工程师';\n                break;\n            case 'UI':\n            case 'UE':\n                that.work = '设计师';\n                break;\n            case 'teach':\n                that.work = '教师';\n                break;\n            default:\n                that.work = work;\n        }\n    })(work, that);\n};\n// 更换期望的职位\nWork.prototype.changeWork = function(work) {\n    this.work = work;\n```\n\n下面来创建一位应聘者\n\n```bash\n// 应聘者创建类\nvar Person = function(name, work) {\n    // 创建应聘者缓存对象\n    var _person = new Human();\n    // 创建应聘者姓名解析对象\n    _person.name = new Named(name);\n    // 创建应聘者期望职位\n    _person.work = new Work(work);\n    // 返回创建的应聘者对象\n    return _person;\n}\n```\n\n收获与总结\n\n建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。\n\n## 原型模式\n\n原型模式是JavaScript语言之魂。\n\n定义\n\n用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。\n\n使用场景\n\n还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。\n原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。\n\n```bash\n// 原型对象复制方法\nfunction prototypeExtend() {\n    var F = function() {},\n        args = arguments,\n        i = 0,\n        len = args.length;\n    for (; i < len; i++) {\n        // 遍历每个模板对象中的属性\n        for(var j in args[i]) {\n            F.prototype[j] = args[i][j];\n        }\n    }\n    // 返回缓存类实例\n    return new F();\n}\n```\n\n企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。\n\n```bash\nvar penguin = prototypeExtend({\n    speed: 20,\n    swim: function() {\n        console.log('游泳速度' + this.speed);\n    },\n    run: function() {\n        console.log('奔跑速度' + this.speed);\n    }\n})\n```\n\n这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。\n\n收获与总结\n\n原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。\n\n## 单例模式\n\n哈哈，让你感受下一个人的寂寞。\n\n定义\n\n又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。\n\n使用场景\n\n单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。\n\n```bash\nvar A = {\n    Util: {\n        util_method1: function() {},\n        util_method2: function() {}\n    },\n    Tool: {\n        tool_method1: function() {},\n        tool_method2: function() {}\n    },\n    Ajax: {\n        ajax_method1: function() {},\n        ajax_method2: function() {}\n    }\n    ...\n}\n```\n\n如果想使用这个代码库，像下面这样访问即可：\n\n```bash\nA.Util.util_method1();\nA.Tool.tool_method2();\n```\n\n收获与总结\n\n单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。\n\n# 结构型设计模式\n\n结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。\n\n## 外观模式\n\n作者把这种模式比喻成一种套餐服务。\n\n定义\n\n为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。\n\n使用场景\n\n为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。\n\n```bash\n// 外观模式实现\nfunction addEvent(dom, type, fn) {\n    // 对于支持DOM2级事件处理程序的浏览器\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    // 对于不支持addEventListener但支持attachEvent的浏览器\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\n```\n\n解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。\n\n收获与总结\n\n当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。\n\n## 适配器模式\n\n听到这个模式的名字，有没有想到水管弯弯的场景呢？\n\n定义\n\n将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。\n\n使用场景\n\n公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。\n适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。\nJavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。\n\n```bash\nfunction doSomeThing(name, title, age, color, size, prize){}\n```\n\n记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：\n\n```bash\n/**\n * obj.name: name\n * obj.title: title\n * obj.age: age\n * obj.color: color\n * obj.size: size\n * obj.prize: prize\n***/\nfunction doSomeThing(obj){}\n```\n\n然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。\n\n```bash\nfunction doSomeThing(obj) {\n    var _adapter = {\n        name: '雨夜清荷',\n        title: '设计模式',\n        age: 24,\n        color: 'pink',\n        size: 100,\n        prize: 50\n    };\n    for(var i in _adapter) {\n        _adapter[i] = obj[i] || _adapter[i];\n    }\n}\n```\n\n收获与总结\n\nJavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。\n\n## 代理模式\n\n有没有想到牛郎织女鹊桥相会的场景？\n\n定义\n\n由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。\n\n使用场景\n\n跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。\n代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。\n\n```bash\n// 前端浏览器页面\n<script type=\"text/javascript\">\n// 回调函数\nfunction jsonpCallBack(res,req) {\n    console.log(res,req);\n}\n</script>\n<script type=\"text/javascript\" src=\"http://localhost/test/jsonp.php?callback=jsonp CallBack&data=getJsonPData\"></script>\n\n\n// 另一个域下的服务器请求接口\n<?php\n/* 后端获取请求字段数据，并生成返回内容 */\n$data = $_GET[\"data\"];\n$callback = $_GET[\"callback\"];\necho $callback.\"('success', '\".$data.\"')\";\n?>\n```\n\n这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。\n\n收获与总结\n\n代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。\n由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。\n\n## 装饰者模式\n\n显然房子装修就是一种典型的装饰者模式。\n\n定义\n\n在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。\n\n使用场景\n\n静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。\n\n```bash\n// 装饰者\nvar decorator = function(input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input);\n    // 若事件源已经绑定事件\n    if(typeof input.onclick === 'function') {\n        // 缓存事件源原有回调函数\n        var oldClickFn = input.onclick;\n        // 为事件源定义新的事件\n        input.onclick = function() {\n            // 事件源原有回调函数\n            oldClickFn();\n            // 执行事件源新增回调函数\n            fn();\n        }\n    } else {\n        input.onclick = fn;\n    }\n}\n```\n\n收获与总结\n\n除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。\n\n## 桥接模式\n\n作者把这种模式比喻成城市间的公路。\n\n定义\n\n在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。\n\n使用场景\n\n有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。\n对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。\n\n```bash\nfunction changeColor(dom, color, bg) {\n    // 设置元素的字体颜色\n    dom.style.color = color;\n    // 设置元素的背景颜色\n    dom.style.background = bg;\n}\n````\n\n接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。\n对于事件的桥接方法，可以用一个匿名函数来代替。\n\n```bash\nvar spans = document.getElementsByTagName('span');\nspans[0].onmouseover = function() {\n    changeColor(this, 'red', '#ddd');\n}\n```\n\n收获与总结\n\n桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。\n\n## 组合模式\n\n作者把组合模式比喻成超值午餐，感觉很形象。\n\n定义\n\n又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n使用场景\n\n为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。\n我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。\n在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。\n\n收获与总结\n\n组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。\n\n享元模式\n\n作者把享元模式比喻成城市公交车，可以仔细思考一番。\n\n定义\n\n运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。\n\n使用场景\n\n现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。\n享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。\n\n```bash\nvar Flyweight = function() {\n    // 已创建的元素\n    var created = [];\n    // 创建一个新闻包装容器\n    function create() {\n        var dom = document.createElement('div');\n        // 将容器插入新闻列表容器中\n        document.getElementById('container').appendChild(dom);\n        // 缓存新创建的元素\n        created.push(dom);\n        // 返回创建的新元素\n        return dom;\n    }\n    return {\n        // 获取创建新闻元素方法\n        getDiv: function() {\n            // 如果已创建的元素小于当前页元素总个数(5个)，则创建\n            if(created.length < 5) {\n                return created();\n            } else {\n                // 获取第一个元素，并插入去后面\n                var div = created.shift();\n                created.push(div);\n                return div;\n            }\n        }\n    }\n}\n````\n\n上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。\n\n```bash\nvar paper = 0,\n    num = 5,\n    len = article.length;\n// 添加五条新闻\nfor(var i = 0; i < 5; i++) {\n    if(article[i])\n        // 通过享元类获取创建的元素并写入新闻内容\n        Flyweight.getDiv().innerHTML = article[i];\n}\n\n// 下一页按钮绑定事件\ndocument.getElementById('next_page').onclick = function() {\n    // 如果新闻内容不足5条则返回\n    if(article.length < 5) {\n        return;\n    }\n    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引\n        j = 0;\n    // 插入5条新闻\n    for(; j < 5; j++) {\n        // 如果存在n+j条则插入\n        if(article[n + j]) {\n            Flyweight.getDiv().innerHTML = article[n + j];\n        // 否则插入起始位置第n+j-len条\n        } else if(article[n + j - len]) {\n            Flyweight.getDiv().innerHTML = article[n + j - len];\n        } else {\n            Flyweight.getDiv().innerHTML = \"\";\n        }\n    }\n}\n```\n\n这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。\n\n收获与总结\n\n享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。\n\n# 行为型设计模式\n\n行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。\n\n## 模板方法模式\n\n作者把这种模式比喻成照猫画虎。\n\n定义\n\n父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。\n\n使用场景\n\n提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。\n模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。\n打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。\n模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。\n\n```bash\n// 格式化字符串方法\nfunction formateString(str, data) {\n    return str.replace(/\\{#(\\w+)#\\}/g, function(match, key) {\n        return typeof data[key] === undefined ? '': data[key]\n    });\n}\n// 基础导航\nvar Nav = function(data) {\n    // 基础导航样式模板\n    this.item = '<a href=\"{#href#}\" title=\"{#title#}\">{#name#}</a>';\n    // 创建字符串\n    this.html = '';\n    // 格式化数据\n    for(var i = 0, len = data.length; i < len; i++) {\n        this.html += formateString(this.item, data[i]);\n    }\n    // 返回字符串数据\n    return this.html;\n}\n```\n\n对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。\n\n```bash\nvar NumNav = function(data) {\n    // 消息提醒信息组件模板\n    var tpl = '<b>{#num#}</b>';\n    // 装饰数据\n    for(var i = data.length - 1; i >= 0; i--) {\n        data[i].name += data[i].name + formateString(tpl, data[i]);\n    }\n    // 继承基础导航类\n    return Nav.call(this, data);\n}\n```\n\n收获与总结\n\n模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。\n\n## 观察者模式\n\n作者把这种模式比喻成通信卫星。\n\n定义\n\n又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。\n\n使用场景\n\n在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。\n观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。\n这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。\n\n```bash\nvar Observer = (function() {\n    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存\n    var __messages = {};\n    return {\n        // 注册信息接口\n        regist: function() {},\n        // 发布信息接口\n        fire: function() {},\n        // 移除信息接口\n        remove: function() {}\n    }\n})();\n```\n\n下面就是可以自己具体实现这些接口了。\n\n收获与总结\n\n观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。\n\n## 状态模式\n\n作者把这种模式比喻成超级玛丽。\n\n定义\n\n当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。\n\n使用场景\n\n平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。\n将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。\n\n```bash\n// 投票结果状态对象\nvar ResultState = function() {\n    // 判断结果保存在内部状态中\n    var States = {\n        // 每种状态作为一种独立方法保存\n        state0: function() {\n            console.log('这是第一种情况')：\n        },\n        state1: function() {\n            console.log('这是第二种情况')：\n        },\n        state2: function() {\n            console.log('这是第三种情况')：\n        },\n        state3: function() {\n            console.log('这是第四种情况')：\n        }\n    }\n    // 获取某种状态并执行对应方法\n    function show(result) {\n        States['state' + result] && States['state' + result]();\n    }\n    return {\n        // 返回调用状态方法接口\n        show: show\n    }\n}();\n```\n\n想调用第三种结果就可以如下调用\n\n```bash\nResultState.show(3);\n```\n\n对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。\n\n收获与总结\n\n状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。\n\n## 策略模式\n\n作者把这种模式比喻成活诸葛。\n\n定义\n\n将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。\n\n使用场景\n\n年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。\n结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：\n\n```bash\n// 价格策略对象\nvar PriceStrategy = function() {\n    // 内部算法对象\n    var strategy = {\n        // 100返30\n        return30: function(price) {},\n        // 100返50\n        return50: function(price) {},\n        // 9折\n        percent90: function(price) {},\n        // 8折\n        percent80: function(price) {},\n        // 5折\n        percent50: function(price) {},\n    }\n    // 策略算法调用接口\n    return function(algorithm, price) {\n        return strategy[algorithm] && strategy[algorithm](price);\n    }\n}();\n```\n\n收获与总结\n\n策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。\n\n## 职责链模式\n\n作者把这种模式比喻成一个有序车站。\n\n定义\n\n解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。\n\n使用场景\n\n项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。\n对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。\n\n收获与总结\n\n职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。\n\n## 命令模式\n\n定义\n\n将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。\n\n使用场景\n\n现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。\n命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。\n那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。\n\n```bash\n// 模块实现模块\nvar viewCommand = (function() {\n    var tpl = {\n        // 展示图片结构模块\n        product: [\n            '<div>',.....,'</div>'\n        ].join(''),\n        // 展示标题结构模块\n        title: [\n        '<div>',.....,'</div>'\n        ].join(''),\n    },\n    // 格式化字符串缓存字符串\n    html = '';\n    // 格式化字符串\n    function formateString(str, obj) {}\n    // 方法集合\n    var Action = {\n        // 创建方法\n        create: function(data, view) {\n            // 解析数据\n            if(data.length) {\n                // 遍历\n                for(var i = 0, len = data.length; i < len; i++) {\n                    html += formateString(tpl[view], data[i]);\n                }\n            } else {\n                html += formateString(tpl[view], data);\n            }\n        },\n        // 展示方法\n        display: function(container, data, vuew) {\n            // 如果传入数据\n            if(data) {\n                // 根据给的数据创建视图\n                this.create(data, view);\n            }\n            // 展示模块\n            document.getElementById(container).innerHTML = html;\n            // 展示后清空缓存字符串\n            html = '';\n        }\n    }\n    // 命令接口\n    return function excute(msg) {\n        // 解析命令，如果msg.param不是数组则将其转化为数组\n        msg.param = Object.prototype.toString.call(msg.param) === \"[object Array]\" ? msg.param : [msg.param];\n        // Action内部调用的方法引用this，此处保证作用域this执行传入Action\n        Action[msg.command].apply(Action, msg.param)\n    }\n})();\n```\n\n下面就可以测试这个命令对象了：\n\n```bash\nvar productData = [\n    {\n        src: 'command/02.jpg',\n        text: '绽放的桃花'\n    },\n    {\n        src: 'command/03.jpg',\n        text: '阳光下的温馨'\n    }\n],\n// 模块标题数据\ntitleData = {\n    title: '夏日里的一片温馨',\n    tips: '暖暖的温情带给人们家的感觉'\n}\n// 调用命令对象\nviewCommand({\n    command: 'display',\n    param: ['title', titleData, 'title']\n});\nviewCommand({\n    command: 'create',\n    param: ['product', productData, 'product']\n});\n```\n\n有了命令模式，想创建任何页面视图都是一件很简单的事情。\n\n收获与总结\n\n命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。\n\n## 访问者模式\n\n作者把这种模式比喻成驻华大使。\n\n定义\n\n针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。\n\n使用场景\n\n用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：\n\n```bash\nvar bindEvent = function(dom, type, fn) {\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\nvar demo = document.getElementById('demo');\nbindEvent(demo, 'click', function() {\n    this.style.background = 'red';\n});\n```\n\n这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。\n访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：\n\n```bash\nfunction bindIEEvent(dom, type, fn, data) {\n    var data = data || {};\n    dom.attachEvent('on' + type, function(e){\n        fn.call(dom, e, data);\n    });\n};\n```\n\n上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。\n\n收获与总结\n\n访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。\n\n## 中介者模式\n\n作者把这种模式比喻成媒婆，好吧，我笑了这里。\n\n定义\n\n通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。\n\n使用场景\n\n项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。\n观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。\n如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：\n\n```bash\n// 中介者对象\nvar Mediator = function() {\n    // 消息对象\n    var _msg = {};\n    return {\n        // 订阅消息方法，type:消息名称 action:消息回调函数\n        register: function(type, action) {\n            // 如果消息存在\n            if(_msg[type])\n                // 存入回调函数\n                _msg[type].push(action);\n            else {\n                // 不存在则建立消息容器\n                _msg[type] = [];\n                _msg[type].push(action);\n            }\n        },\n        // 发布消息方法\n        send: function(type) {\n            // 如果该消息已经被订阅\n            if(_msg[type]) {\n                // 遍历已存储的消息回调函数\n                for(var i = 0, len = _msg[type].length; i < len; i++) {\n                    // 执行回调函数\n                    _msg[type][i] && _msg[type][i]();\n                }\n            }\n        }\n    }\n}();\n```\n\n这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。\n\n收获与总结\n\n同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。\n\n备忘录模式\n\n定义\n\n在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。\n\n使用场景\n\n在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：\n\n```bash\n// Page备忘录类\nvar Page = function() {\n    // 信息缓存对象\n    var cache = {};\n    return function(page, fn) {\n        // 判断该页数据是否在缓存中\n        if(cache[page]) {\n            // 显示该页内容\n            showPage(page, cache[page]);\n            // 执行成功回调函数\n            fn && fn();\n        } else {\n            // 否则异步请求\n            $.post('./data/getNewsData.php', {\n                page: page\n            }, function(res) {\n                // 成功返回\n                if(res.errNo == 0) {\n                    showPage(page, res.data);\n                    cache[page] = res.data;\n                    fn && fn();\n                } else {\n                    // 处理异常\n                }\n            })\n        }\n    }\n}\n```\n\n上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。\n\n收获与总结\n\n备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。\n\n## 迭代器模式\n\n作者把这种模式比喻成一个点钞机。\n\n定义\n\n在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。\n\n使用场景\n\n迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：\n\n```bash\nvar Iterator = function(items, container) {\n    // 获取父元素\n    var container = container && document.getElementById(container) || document,\n    // 获取元素\n        items = container.getElementsByTagName(items),\n    // 获取元素长度\n        length = items.length,\n    // 当前索引值\n        index = 0;\n    // 缓存原生数组splice方法\n    var splice = [].splice;\n    return {\n        // 获取第一个元素\n        first: function() {},\n        // 获取最后一个元素\n        second: function() {},\n        // 获取前一个元素\n        pre: function() {},\n        // 获取后一个元素\n        next: function() {},\n        // 获取某一个元素\n        get: function(num) {},\n        // 对每一个元素执行某一个方法\n        dealEach: function(fn) {},\n        // 对某一个元素执行某一个方法\n        dealItem: function(num, fn) {},\n        // 排他方式处理某一个元素\n        exclusive: function() {}\n    }\n}\n```\n\n下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。\n\n收获与总结\n\n通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。\n\n## 解释器模式\n\n定义\n\n对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。\n\n使用场景\n\n一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：\n\n```bash\n<div calss=\"wrap\">\n    <div class=\"link-inner\">\n        <a href=\"#\">link</a>\n    </div>\n    <div class=\"button-inner\">\n        <button>text</button>\n    </div>\n</div>\n```\n\n要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV>DIV2>SPAN。\n上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。\n\n收获与总结\n\n一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。\n\n# 技巧型设计模式\n\n技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。\n\n# 架构型设计模式\n\n架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。\n\n学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。","slug":"javascript-model","published":1,"updated":"2019-06-13T15:25:17.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72u70008dgqi4v3wz7dt","content":"<p>之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）<br><a id=\"more\"></a><br>先给个书的链接: <a href=\"https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1482324196&amp;sr=1-2&amp;keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">JavaScript设计模式-张容铭</a></p>\n<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h1><p>设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。</p>\n<h1 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h1><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>作者把简单工厂模式比喻成一个神奇的魔术师。</p>\n<p>定义</p>\n<p>又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。</p>\n<p>使用场景</p>\n<p>看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 篮球基类</span><br><span class=\"line\">var Basketball = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.intro = <span class=\"string\">'篮球盛行于美国'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Basketball.prototype = &#123;</span><br><span class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'每个队伍需要5名队员'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 足球基类</span><br><span class=\"line\">var Football = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.intro = <span class=\"string\">'足球盛行于美国'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Football.prototype = &#123;</span><br><span class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'每个队伍需要11名队员'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 运动工厂</span><br><span class=\"line\">var SportsFactory = <span class=\"keyword\">function</span>(name) &#123;</span><br><span class=\"line\">    switch(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'NBA'</span>: </span><br><span class=\"line\">            <span class=\"built_in\">return</span> new Basketball();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'wordCup'</span>: </span><br><span class=\"line\">            <span class=\"built_in\">return</span> new Football();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。<br>简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。</p>\n<p>收获与总结</p>\n<p>团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。</p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>作者把工厂方法模式比喻成一张名片。</p>\n<p>定义</p>\n<p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p>\n<p>使用场景</p>\n<p>在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 工厂类</span><br><span class=\"line\">var Factory = <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, content) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(this instanceof Factory) &#123;</span><br><span class=\"line\">        var s = new this[<span class=\"built_in\">type</span>](content);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> s;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Factory(<span class=\"built_in\">type</span>, content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Factory.prototype = &#123;</span><br><span class=\"line\">    Java: <span class=\"keyword\">function</span>(content) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    JavaScript: <span class=\"keyword\">function</span>(content) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    php: <span class=\"keyword\">function</span>(content) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。</p>\n<p>收获与总结</p>\n<p>对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>抽象工厂模式让你感觉出现的都是幻觉。</p>\n<p>定义</p>\n<p>通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。</p>\n<p>抽象类</p>\n<p>抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。</p>\n<p>使用场景</p>\n<p>抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 抽象工厂方法</span><br><span class=\"line\">var VehicleFactory = <span class=\"keyword\">function</span>(subType, superType) &#123;</span><br><span class=\"line\">    // 判断抽象工厂中是否有该抽象类</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeof VehicleFactory[superType] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        // 缓存类</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">F</span></span>() &#123;&#125;;</span><br><span class=\"line\">        // 继承父类属性和方法</span><br><span class=\"line\">        F.prototype = new VehicleFactory[superType]();</span><br><span class=\"line\">        // 将子类构造函数指向子类</span><br><span class=\"line\">        subType.constructor = subType;</span><br><span class=\"line\">        // 子类原型继承父类</span><br><span class=\"line\">        subType.prototype = new F();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // 不存在该抽象类抛出错误</span><br><span class=\"line\">        throw new Error(<span class=\"string\">'未创建该抽象类'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 小汽车抽象类</span><br><span class=\"line\">VehicleFactory.Car = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.type = <span class=\"string\">'car'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">VehicleFactory.Car.prototype = &#123;</span><br><span class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 公交车抽象类</span><br><span class=\"line\">VehicleFactory.Bus = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.type = <span class=\"string\">'bus'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">VehicleFactory.Bus.prototype = &#123;</span><br><span class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。</p>\n<p>收获与总结</p>\n<p>抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。</p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p>建造者模式告诉我们分即是合。</p>\n<p>定义</p>\n<p>将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。</p>\n<p>应用场景</p>\n<p>现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。<br>建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一位人类</span><br><span class=\"line\">var Human = <span class=\"keyword\">function</span>(param) &#123;</span><br><span class=\"line\">    // 技能</span><br><span class=\"line\">    this.skill = param &amp;&amp; param.skill || <span class=\"string\">'保密'</span>;</span><br><span class=\"line\">    // 兴趣爱好</span><br><span class=\"line\">    this.hobby = param &amp;&amp; param.hobby || <span class=\"string\">'保密'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 类人原型方法</span><br><span class=\"line\">Human.prototype = &#123;</span><br><span class=\"line\">    getSkill: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.skill;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHobby: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.hobby;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 实例化姓名类</span><br><span class=\"line\">var Named = <span class=\"keyword\">function</span>(name) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 构造器，解析姓名的姓与名</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(name, that) &#123;</span><br><span class=\"line\">        that.wholeName = name;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.indexOf(<span class=\"string\">' '</span>) &gt; -1) &#123;</span><br><span class=\"line\">            that.FirstName = name.slice(0, name.indexOf(<span class=\"string\">' '</span>));</span><br><span class=\"line\">            that.FirstName = name.slice(name.indexOf(<span class=\"string\">' '</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(name, that);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 实例化职位类</span><br><span class=\"line\">var Work = <span class=\"keyword\">function</span>(work) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 构造器，通过传入的职位特征来设置相应职位及描述</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(work, that) &#123;</span><br><span class=\"line\">        switch(work) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'code'</span>:</span><br><span class=\"line\">                that.work = <span class=\"string\">'工程师'</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UI'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UE'</span>:</span><br><span class=\"line\">                that.work = <span class=\"string\">'设计师'</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'teach'</span>:</span><br><span class=\"line\">                that.work = <span class=\"string\">'教师'</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                that.work = work;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(work, that);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 更换期望的职位</span><br><span class=\"line\">Work.prototype.changeWork = <span class=\"keyword\">function</span>(work) &#123;</span><br><span class=\"line\">    this.work = work;</span><br></pre></td></tr></table></figure>\n<p>下面来创建一位应聘者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 应聘者创建类</span><br><span class=\"line\">var Person = <span class=\"keyword\">function</span>(name, work) &#123;</span><br><span class=\"line\">    // 创建应聘者缓存对象</span><br><span class=\"line\">    var _person = new Human();</span><br><span class=\"line\">    // 创建应聘者姓名解析对象</span><br><span class=\"line\">    _person.name = new Named(name);</span><br><span class=\"line\">    // 创建应聘者期望职位</span><br><span class=\"line\">    _person.work = new Work(work);</span><br><span class=\"line\">    // 返回创建的应聘者对象</span><br><span class=\"line\">    <span class=\"built_in\">return</span> _person;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>原型模式是JavaScript语言之魂。</p>\n<p>定义</p>\n<p>用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。</p>\n<p>使用场景</p>\n<p>还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。<br>原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原型对象复制方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">prototypeExtend</span></span>() &#123;</span><br><span class=\"line\">    var F = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        args = arguments,</span><br><span class=\"line\">        i = 0,</span><br><span class=\"line\">        len = args.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\">        // 遍历每个模板对象中的属性</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(var j <span class=\"keyword\">in</span> args[i]) &#123;</span><br><span class=\"line\">            F.prototype[j] = args[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 返回缓存类实例</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var penguin = prototypeExtend(&#123;</span><br><span class=\"line\">    speed: 20,</span><br><span class=\"line\">    swim: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'游泳速度'</span> + this.speed);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    run: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'奔跑速度'</span> + this.speed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。</p>\n<p>收获与总结</p>\n<p>原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>哈哈，让你感受下一个人的寂寞。</p>\n<p>定义</p>\n<p>又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。</p>\n<p>使用场景</p>\n<p>单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var A = &#123;</span><br><span class=\"line\">    Util: &#123;</span><br><span class=\"line\">        util_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        util_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Tool: &#123;</span><br><span class=\"line\">        tool_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        tool_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Ajax: &#123;</span><br><span class=\"line\">        ajax_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        ajax_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想使用这个代码库，像下面这样访问即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.Util.util_method1();</span><br><span class=\"line\">A.Tool.tool_method2();</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。</p>\n<h1 id=\"结构型设计模式\"><a href=\"#结构型设计模式\" class=\"headerlink\" title=\"结构型设计模式\"></a>结构型设计模式</h1><p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。</p>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><p>作者把这种模式比喻成一种套餐服务。</p>\n<p>定义</p>\n<p>为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。</p>\n<p>使用场景</p>\n<p>为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 外观模式实现</span><br><span class=\"line\"><span class=\"keyword\">function</span> addEvent(dom, <span class=\"built_in\">type</span>, fn) &#123;</span><br><span class=\"line\">    // 对于支持DOM2级事件处理程序的浏览器</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</span><br><span class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    // 对于不支持addEventListener但支持attachEvent的浏览器</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</span><br><span class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。</p>\n<p>收获与总结</p>\n<p>当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>听到这个模式的名字，有没有想到水管弯弯的场景呢？</p>\n<p>定义</p>\n<p>将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。</p>\n<p>使用场景</p>\n<p>公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。<br>适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。<br>JavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> doSomeThing(name, title, age, color, size, prize)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * obj.name: name</span><br><span class=\"line\"> * obj.title: title</span><br><span class=\"line\"> * obj.age: age</span><br><span class=\"line\"> * obj.color: color</span><br><span class=\"line\"> * obj.size: size</span><br><span class=\"line\"> * obj.prize: prize</span><br><span class=\"line\">***/</span><br><span class=\"line\"><span class=\"keyword\">function</span> doSomeThing(obj)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> doSomeThing(obj) &#123;</span><br><span class=\"line\">    var _adapter = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'雨夜清荷'</span>,</span><br><span class=\"line\">        title: <span class=\"string\">'设计模式'</span>,</span><br><span class=\"line\">        age: 24,</span><br><span class=\"line\">        color: <span class=\"string\">'pink'</span>,</span><br><span class=\"line\">        size: 100,</span><br><span class=\"line\">        prize: 50</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> _adapter) &#123;</span><br><span class=\"line\">        _adapter[i] = obj[i] || _adapter[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>JavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>有没有想到牛郎织女鹊桥相会的场景？</p>\n<p>定义</p>\n<p>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。</p>\n<p>使用场景</p>\n<p>跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。<br>代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 前端浏览器页面</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 回调函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> jsonpCallBack(res,req) &#123;</span><br><span class=\"line\">    console.log(res,req);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://localhost/test/jsonp.php?callback=jsonp CallBack&amp;data=getJsonPData\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 另一个域下的服务器请求接口</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">/* 后端获取请求字段数据，并生成返回内容 */</span><br><span class=\"line\"><span class=\"variable\">$data</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"data\"</span>];</span><br><span class=\"line\"><span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"callback\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">\"('success', '\"</span>.<span class=\"variable\">$data</span>.<span class=\"string\">\"')\"</span>;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。</p>\n<p>收获与总结</p>\n<p>代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。<br>由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。</p>\n<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h2><p>显然房子装修就是一种典型的装饰者模式。</p>\n<p>定义</p>\n<p>在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。</p>\n<p>使用场景</p>\n<p>静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 装饰者</span><br><span class=\"line\">var decorator = <span class=\"keyword\">function</span>(input, fn) &#123;</span><br><span class=\"line\">    // 获取事件源</span><br><span class=\"line\">    var input = document.getElementById(input);</span><br><span class=\"line\">    // 若事件源已经绑定事件</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeof input.onclick === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        // 缓存事件源原有回调函数</span><br><span class=\"line\">        var oldClickFn = input.onclick;</span><br><span class=\"line\">        // 为事件源定义新的事件</span><br><span class=\"line\">        input.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            // 事件源原有回调函数</span><br><span class=\"line\">            oldClickFn();</span><br><span class=\"line\">            // 执行事件源新增回调函数</span><br><span class=\"line\">            fn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        input.onclick = fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p>作者把这种模式比喻成城市间的公路。</p>\n<p>定义</p>\n<p>在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。</p>\n<p>使用场景</p>\n<p>有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。<br>对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> changeColor(dom, color, <span class=\"built_in\">bg</span>) &#123;</span><br><span class=\"line\">    // 设置元素的字体颜色</span><br><span class=\"line\">    dom.style.color = color;</span><br><span class=\"line\">    // 设置元素的背景颜色</span><br><span class=\"line\">    dom.style.background = <span class=\"built_in\">bg</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。<br>对于事件的桥接方法，可以用一个匿名函数来代替。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var spans = document.getElementsByTagName(<span class=\"string\">'span'</span>);</span><br><span class=\"line\">spans[0].onmouseover = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    changeColor(this, <span class=\"string\">'red'</span>, <span class=\"string\">'#ddd'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p>作者把组合模式比喻成超值午餐，感觉很形象。</p>\n<p>定义</p>\n<p>又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>使用场景</p>\n<p>为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。<br>我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。<br>在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。</p>\n<p>收获与总结</p>\n<p>组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。</p>\n<p>享元模式</p>\n<p>作者把享元模式比喻成城市公交车，可以仔细思考一番。</p>\n<p>定义</p>\n<p>运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p>\n<p>使用场景</p>\n<p>现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。<br>享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Flyweight = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 已创建的元素</span><br><span class=\"line\">    var created = [];</span><br><span class=\"line\">    // 创建一个新闻包装容器</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">create</span></span>() &#123;</span><br><span class=\"line\">        var dom = document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        // 将容器插入新闻列表容器中</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">'container'</span>).appendChild(dom);</span><br><span class=\"line\">        // 缓存新创建的元素</span><br><span class=\"line\">        created.push(dom);</span><br><span class=\"line\">        // 返回创建的新元素</span><br><span class=\"line\">        <span class=\"built_in\">return</span> dom;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 获取创建新闻元素方法</span><br><span class=\"line\">        getDiv: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            // 如果已创建的元素小于当前页元素总个数(5个)，则创建</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(created.length &lt; 5) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> created();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // 获取第一个元素，并插入去后面</span><br><span class=\"line\">                var div = created.shift();</span><br><span class=\"line\">                created.push(div);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> div;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var paper = 0,</span><br><span class=\"line\">    num = 5,</span><br><span class=\"line\">    len = article.length;</span><br><span class=\"line\">// 添加五条新闻</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(article[i])</span><br><span class=\"line\">        // 通过享元类获取创建的元素并写入新闻内容</span><br><span class=\"line\">        Flyweight.getDiv().innerHTML = article[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下一页按钮绑定事件</span><br><span class=\"line\">document.getElementById(<span class=\"string\">'next_page'</span>).onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 如果新闻内容不足5条则返回</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(article.length &lt; 5) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引</span><br><span class=\"line\">        j = 0;</span><br><span class=\"line\">    // 插入5条新闻</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; j &lt; 5; j++) &#123;</span><br><span class=\"line\">        // 如果存在n+j条则插入</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(article[n + j]) &#123;</span><br><span class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j];</span><br><span class=\"line\">        // 否则插入起始位置第n+j-len条</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(article[n + j - len]) &#123;</span><br><span class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j - len];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Flyweight.getDiv().innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。</p>\n<p>收获与总结</p>\n<p>享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。</p>\n<h1 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h1><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>作者把这种模式比喻成照猫画虎。</p>\n<p>定义</p>\n<p>父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>使用场景</p>\n<p>提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。<br>模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。<br>打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。<br>模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 格式化字符串方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> formateString(str, data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> str.replace(/\\&#123;<span class=\"comment\">#(\\w+)#\\&#125;/g, function(match, key) &#123;</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> typeof data[key] === undefined ? <span class=\"string\">''</span>: data[key]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 基础导航</span><br><span class=\"line\">var Nav = <span class=\"keyword\">function</span>(data) &#123;</span><br><span class=\"line\">    // 基础导航样式模板</span><br><span class=\"line\">    this.item = <span class=\"string\">'&lt;a href=\"&#123;#href#&#125;\" title=\"&#123;#title#&#125;\"&gt;&#123;#name#&#125;&lt;/a&gt;'</span>;</span><br><span class=\"line\">    // 创建字符串</span><br><span class=\"line\">    this.html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    // 格式化数据</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        this.html += formateString(this.item, data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 返回字符串数据</span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NumNav = <span class=\"keyword\">function</span>(data) &#123;</span><br><span class=\"line\">    // 消息提醒信息组件模板</span><br><span class=\"line\">    var tpl = <span class=\"string\">'&lt;b&gt;&#123;#num#&#125;&lt;/b&gt;'</span>;</span><br><span class=\"line\">    // 装饰数据</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = data.length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        data[i].name += data[i].name + formateString(tpl, data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 继承基础导航类</span><br><span class=\"line\">    <span class=\"built_in\">return</span> Nav.call(this, data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>作者把这种模式比喻成通信卫星。</p>\n<p>定义</p>\n<p>又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p>\n<p>使用场景</p>\n<p>在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。<br>观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。<br>这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Observer = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存</span><br><span class=\"line\">    var __messages = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 注册信息接口</span><br><span class=\"line\">        regist: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 发布信息接口</span><br><span class=\"line\">        fire: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 移除信息接口</span><br><span class=\"line\">        remove: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>下面就是可以自己具体实现这些接口了。</p>\n<p>收获与总结</p>\n<p>观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。</p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>作者把这种模式比喻成超级玛丽。</p>\n<p>定义</p>\n<p>当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。</p>\n<p>使用场景</p>\n<p>平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。<br>将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 投票结果状态对象</span><br><span class=\"line\">var ResultState = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 判断结果保存在内部状态中</span><br><span class=\"line\">    var States = &#123;</span><br><span class=\"line\">        // 每种状态作为一种独立方法保存</span><br><span class=\"line\">        state0: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第一种情况'</span>)：</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        state1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第二种情况'</span>)：</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        state2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第三种情况'</span>)：</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        state3: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第四种情况'</span>)：</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 获取某种状态并执行对应方法</span><br><span class=\"line\">    <span class=\"keyword\">function</span> show(result) &#123;</span><br><span class=\"line\">        States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 返回调用状态方法接口</span><br><span class=\"line\">        show: show</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>想调用第三种结果就可以如下调用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResultState.show(3);</span><br></pre></td></tr></table></figure>\n<p>对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。</p>\n<p>收获与总结</p>\n<p>状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>作者把这种模式比喻成活诸葛。</p>\n<p>定义</p>\n<p>将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p>\n<p>使用场景</p>\n<p>年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。<br>结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 价格策略对象</span><br><span class=\"line\">var PriceStrategy = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 内部算法对象</span><br><span class=\"line\">    var strategy = &#123;</span><br><span class=\"line\">        // 100返30</span><br><span class=\"line\">        return30: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 100返50</span><br><span class=\"line\">        return50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 9折</span><br><span class=\"line\">        percent90: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 8折</span><br><span class=\"line\">        percent80: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 5折</span><br><span class=\"line\">        percent50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 策略算法调用接口</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(algorithm, price) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。</p>\n<h2 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h2><p>作者把这种模式比喻成一个有序车站。</p>\n<p>定义</p>\n<p>解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。</p>\n<p>使用场景</p>\n<p>项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。<br>对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。</p>\n<p>收获与总结</p>\n<p>职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。</p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>定义</p>\n<p>将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。</p>\n<p>使用场景</p>\n<p>现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。<br>命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。<br>那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 模块实现模块</span><br><span class=\"line\">var viewCommand = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    var tpl = &#123;</span><br><span class=\"line\">        // 展示图片结构模块</span><br><span class=\"line\">        product: [</span><br><span class=\"line\">            <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">        ].join(<span class=\"string\">''</span>),</span><br><span class=\"line\">        // 展示标题结构模块</span><br><span class=\"line\">        title: [</span><br><span class=\"line\">        <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">        ].join(<span class=\"string\">''</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 格式化字符串缓存字符串</span><br><span class=\"line\">    html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    // 格式化字符串</span><br><span class=\"line\">    <span class=\"keyword\">function</span> formateString(str, obj) &#123;&#125;</span><br><span class=\"line\">    // 方法集合</span><br><span class=\"line\">    var Action = &#123;</span><br><span class=\"line\">        // 创建方法</span><br><span class=\"line\">        create: <span class=\"keyword\">function</span>(data, view) &#123;</span><br><span class=\"line\">            // 解析数据</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data.length) &#123;</span><br><span class=\"line\">                // 遍历</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    html += formateString(tpl[view], data[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                html += formateString(tpl[view], data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 展示方法</span><br><span class=\"line\">        display: <span class=\"keyword\">function</span>(container, data, vuew) &#123;</span><br><span class=\"line\">            // 如果传入数据</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data) &#123;</span><br><span class=\"line\">                // 根据给的数据创建视图</span><br><span class=\"line\">                this.create(data, view);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 展示模块</span><br><span class=\"line\">            document.getElementById(container).innerHTML = html;</span><br><span class=\"line\">            // 展示后清空缓存字符串</span><br><span class=\"line\">            html = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 命令接口</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span> excute(msg) &#123;</span><br><span class=\"line\">        // 解析命令，如果msg.param不是数组则将其转化为数组</span><br><span class=\"line\">        msg.param = Object.prototype.toString.call(msg.param) === <span class=\"string\">\"[object Array]\"</span> ? msg.param : [msg.param];</span><br><span class=\"line\">        // Action内部调用的方法引用this，此处保证作用域this执行传入Action</span><br><span class=\"line\">        Action[msg.command].apply(Action, msg.param)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>下面就可以测试这个命令对象了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var productData = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        src: <span class=\"string\">'command/02.jpg'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'绽放的桃花'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        src: <span class=\"string\">'command/03.jpg'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'阳光下的温馨'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">// 模块标题数据</span><br><span class=\"line\">titleData = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'夏日里的一片温馨'</span>,</span><br><span class=\"line\">    tips: <span class=\"string\">'暖暖的温情带给人们家的感觉'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用命令对象</span><br><span class=\"line\">viewCommand(&#123;</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'display'</span>,</span><br><span class=\"line\">    param: [<span class=\"string\">'title'</span>, titleData, <span class=\"string\">'title'</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">viewCommand(&#123;</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'create'</span>,</span><br><span class=\"line\">    param: [<span class=\"string\">'product'</span>, productData, <span class=\"string\">'product'</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有了命令模式，想创建任何页面视图都是一件很简单的事情。</p>\n<p>收获与总结</p>\n<p>命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。</p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>作者把这种模式比喻成驻华大使。</p>\n<p>定义</p>\n<p>针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。</p>\n<p>使用场景</p>\n<p>用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bindEvent = <span class=\"keyword\">function</span>(dom, <span class=\"built_in\">type</span>, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</span><br><span class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</span><br><span class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var demo = document.getElementById(<span class=\"string\">'demo'</span>);</span><br><span class=\"line\">bindEvent(demo, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.style.background = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。<br>访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> bindIEEvent(dom, <span class=\"built_in\">type</span>, fn, data) &#123;</span><br><span class=\"line\">    var data = data || &#123;&#125;;</span><br><span class=\"line\">    dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, <span class=\"keyword\">function</span>(e)&#123;</span><br><span class=\"line\">        fn.call(dom, e, data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。</p>\n<p>收获与总结</p>\n<p>访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。</p>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>作者把这种模式比喻成媒婆，好吧，我笑了这里。</p>\n<p>定义</p>\n<p>通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。</p>\n<p>使用场景</p>\n<p>项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。<br>观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。<br>如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 中介者对象</span><br><span class=\"line\">var Mediator = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 消息对象</span><br><span class=\"line\">    var _msg = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 订阅消息方法，<span class=\"built_in\">type</span>:消息名称 action:消息回调函数</span><br><span class=\"line\">        register: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, action) &#123;</span><br><span class=\"line\">            // 如果消息存在</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>])</span><br><span class=\"line\">                // 存入回调函数</span><br><span class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // 不存在则建立消息容器</span><br><span class=\"line\">                _msg[<span class=\"built_in\">type</span>] = [];</span><br><span class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 发布消息方法</span><br><span class=\"line\">        send: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>) &#123;</span><br><span class=\"line\">            // 如果该消息已经被订阅</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>]) &#123;</span><br><span class=\"line\">                // 遍历已存储的消息回调函数</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = _msg[<span class=\"built_in\">type</span>].length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    // 执行回调函数</span><br><span class=\"line\">                    _msg[<span class=\"built_in\">type</span>][i] &amp;&amp; _msg[<span class=\"built_in\">type</span>][i]();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。</p>\n<p>收获与总结</p>\n<p>同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。</p>\n<p>备忘录模式</p>\n<p>定义</p>\n<p>在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。</p>\n<p>使用场景</p>\n<p>在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Page备忘录类</span><br><span class=\"line\">var Page = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 信息缓存对象</span><br><span class=\"line\">    var cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(page, fn) &#123;</span><br><span class=\"line\">        // 判断该页数据是否在缓存中</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cache[page]) &#123;</span><br><span class=\"line\">            // 显示该页内容</span><br><span class=\"line\">            showPage(page, cache[page]);</span><br><span class=\"line\">            // 执行成功回调函数</span><br><span class=\"line\">            fn &amp;&amp; fn();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            // 否则异步请求</span><br><span class=\"line\">            $.post(<span class=\"string\">'./data/getNewsData.php'</span>, &#123;</span><br><span class=\"line\">                page: page</span><br><span class=\"line\">            &#125;, <span class=\"keyword\">function</span>(res) &#123;</span><br><span class=\"line\">                // 成功返回</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res.errNo == 0) &#123;</span><br><span class=\"line\">                    showPage(page, res.data);</span><br><span class=\"line\">                    cache[page] = res.data;</span><br><span class=\"line\">                    fn &amp;&amp; fn();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    // 处理异常</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。</p>\n<p>收获与总结</p>\n<p>备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>作者把这种模式比喻成一个点钞机。</p>\n<p>定义</p>\n<p>在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>\n<p>使用场景</p>\n<p>迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Iterator = <span class=\"keyword\">function</span>(items, container) &#123;</span><br><span class=\"line\">    // 获取父元素</span><br><span class=\"line\">    var container = container &amp;&amp; document.getElementById(container) || document,</span><br><span class=\"line\">    // 获取元素</span><br><span class=\"line\">        items = container.getElementsByTagName(items),</span><br><span class=\"line\">    // 获取元素长度</span><br><span class=\"line\">        length = items.length,</span><br><span class=\"line\">    // 当前索引值</span><br><span class=\"line\">        index = 0;</span><br><span class=\"line\">    // 缓存原生数组splice方法</span><br><span class=\"line\">    var splice = [].splice;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 获取第一个元素</span><br><span class=\"line\">        first: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取最后一个元素</span><br><span class=\"line\">        second: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取前一个元素</span><br><span class=\"line\">        pre: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取后一个元素</span><br><span class=\"line\">        next: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取某一个元素</span><br><span class=\"line\">        get: <span class=\"keyword\">function</span>(num) &#123;&#125;,</span><br><span class=\"line\">        // 对每一个元素执行某一个方法</span><br><span class=\"line\">        dealEach: <span class=\"keyword\">function</span>(fn) &#123;&#125;,</span><br><span class=\"line\">        // 对某一个元素执行某一个方法</span><br><span class=\"line\">        dealItem: <span class=\"keyword\">function</span>(num, fn) &#123;&#125;,</span><br><span class=\"line\">        // 排他方式处理某一个元素</span><br><span class=\"line\">        exclusive: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。</p>\n<p>收获与总结</p>\n<p>通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>定义</p>\n<p>对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p>\n<p>使用场景</p>\n<p>一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div calss=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">\"link-inner\"</span>&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"#\"</span>&gt;link&lt;/a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">\"button-inner\"</span>&gt;</span><br><span class=\"line\">        &lt;button&gt;text&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV&gt;DIV2&gt;SPAN。<br>上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。</p>\n<p>收获与总结</p>\n<p>一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。</p>\n<h1 id=\"技巧型设计模式\"><a href=\"#技巧型设计模式\" class=\"headerlink\" title=\"技巧型设计模式\"></a>技巧型设计模式</h1><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。</p>\n<h1 id=\"架构型设计模式\"><a href=\"#架构型设计模式\" class=\"headerlink\" title=\"架构型设计模式\"></a>架构型设计模式</h1><p>架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。</p>\n<p>学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。</p>\n","site":{"data":{}},"excerpt":"<p>之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）<br>","more":"<br>先给个书的链接: <a href=\"https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1482324196&amp;sr=1-2&amp;keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">JavaScript设计模式-张容铭</a></p>\n<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h1><p>设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。</p>\n<h1 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h1><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>作者把简单工厂模式比喻成一个神奇的魔术师。</p>\n<p>定义</p>\n<p>又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。</p>\n<p>使用场景</p>\n<p>看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 篮球基类</span><br><span class=\"line\">var Basketball = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.intro = <span class=\"string\">'篮球盛行于美国'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Basketball.prototype = &#123;</span><br><span class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'每个队伍需要5名队员'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 足球基类</span><br><span class=\"line\">var Football = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.intro = <span class=\"string\">'足球盛行于美国'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Football.prototype = &#123;</span><br><span class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'每个队伍需要11名队员'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 运动工厂</span><br><span class=\"line\">var SportsFactory = <span class=\"keyword\">function</span>(name) &#123;</span><br><span class=\"line\">    switch(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'NBA'</span>: </span><br><span class=\"line\">            <span class=\"built_in\">return</span> new Basketball();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'wordCup'</span>: </span><br><span class=\"line\">            <span class=\"built_in\">return</span> new Football();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。<br>简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。</p>\n<p>收获与总结</p>\n<p>团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。</p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>作者把工厂方法模式比喻成一张名片。</p>\n<p>定义</p>\n<p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p>\n<p>使用场景</p>\n<p>在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 工厂类</span><br><span class=\"line\">var Factory = <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, content) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(this instanceof Factory) &#123;</span><br><span class=\"line\">        var s = new this[<span class=\"built_in\">type</span>](content);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> s;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Factory(<span class=\"built_in\">type</span>, content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Factory.prototype = &#123;</span><br><span class=\"line\">    Java: <span class=\"keyword\">function</span>(content) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    JavaScript: <span class=\"keyword\">function</span>(content) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    php: <span class=\"keyword\">function</span>(content) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。</p>\n<p>收获与总结</p>\n<p>对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>抽象工厂模式让你感觉出现的都是幻觉。</p>\n<p>定义</p>\n<p>通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。</p>\n<p>抽象类</p>\n<p>抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。</p>\n<p>使用场景</p>\n<p>抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 抽象工厂方法</span><br><span class=\"line\">var VehicleFactory = <span class=\"keyword\">function</span>(subType, superType) &#123;</span><br><span class=\"line\">    // 判断抽象工厂中是否有该抽象类</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeof VehicleFactory[superType] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        // 缓存类</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">F</span></span>() &#123;&#125;;</span><br><span class=\"line\">        // 继承父类属性和方法</span><br><span class=\"line\">        F.prototype = new VehicleFactory[superType]();</span><br><span class=\"line\">        // 将子类构造函数指向子类</span><br><span class=\"line\">        subType.constructor = subType;</span><br><span class=\"line\">        // 子类原型继承父类</span><br><span class=\"line\">        subType.prototype = new F();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // 不存在该抽象类抛出错误</span><br><span class=\"line\">        throw new Error(<span class=\"string\">'未创建该抽象类'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 小汽车抽象类</span><br><span class=\"line\">VehicleFactory.Car = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.type = <span class=\"string\">'car'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">VehicleFactory.Car.prototype = &#123;</span><br><span class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 公交车抽象类</span><br><span class=\"line\">VehicleFactory.Bus = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.type = <span class=\"string\">'bus'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">VehicleFactory.Bus.prototype = &#123;</span><br><span class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。</p>\n<p>收获与总结</p>\n<p>抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。</p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p>建造者模式告诉我们分即是合。</p>\n<p>定义</p>\n<p>将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。</p>\n<p>应用场景</p>\n<p>现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。<br>建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一位人类</span><br><span class=\"line\">var Human = <span class=\"keyword\">function</span>(param) &#123;</span><br><span class=\"line\">    // 技能</span><br><span class=\"line\">    this.skill = param &amp;&amp; param.skill || <span class=\"string\">'保密'</span>;</span><br><span class=\"line\">    // 兴趣爱好</span><br><span class=\"line\">    this.hobby = param &amp;&amp; param.hobby || <span class=\"string\">'保密'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 类人原型方法</span><br><span class=\"line\">Human.prototype = &#123;</span><br><span class=\"line\">    getSkill: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.skill;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHobby: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.hobby;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 实例化姓名类</span><br><span class=\"line\">var Named = <span class=\"keyword\">function</span>(name) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 构造器，解析姓名的姓与名</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(name, that) &#123;</span><br><span class=\"line\">        that.wholeName = name;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.indexOf(<span class=\"string\">' '</span>) &gt; -1) &#123;</span><br><span class=\"line\">            that.FirstName = name.slice(0, name.indexOf(<span class=\"string\">' '</span>));</span><br><span class=\"line\">            that.FirstName = name.slice(name.indexOf(<span class=\"string\">' '</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(name, that);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 实例化职位类</span><br><span class=\"line\">var Work = <span class=\"keyword\">function</span>(work) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 构造器，通过传入的职位特征来设置相应职位及描述</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(work, that) &#123;</span><br><span class=\"line\">        switch(work) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'code'</span>:</span><br><span class=\"line\">                that.work = <span class=\"string\">'工程师'</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UI'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UE'</span>:</span><br><span class=\"line\">                that.work = <span class=\"string\">'设计师'</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'teach'</span>:</span><br><span class=\"line\">                that.work = <span class=\"string\">'教师'</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                that.work = work;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(work, that);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 更换期望的职位</span><br><span class=\"line\">Work.prototype.changeWork = <span class=\"keyword\">function</span>(work) &#123;</span><br><span class=\"line\">    this.work = work;</span><br></pre></td></tr></table></figure>\n<p>下面来创建一位应聘者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 应聘者创建类</span><br><span class=\"line\">var Person = <span class=\"keyword\">function</span>(name, work) &#123;</span><br><span class=\"line\">    // 创建应聘者缓存对象</span><br><span class=\"line\">    var _person = new Human();</span><br><span class=\"line\">    // 创建应聘者姓名解析对象</span><br><span class=\"line\">    _person.name = new Named(name);</span><br><span class=\"line\">    // 创建应聘者期望职位</span><br><span class=\"line\">    _person.work = new Work(work);</span><br><span class=\"line\">    // 返回创建的应聘者对象</span><br><span class=\"line\">    <span class=\"built_in\">return</span> _person;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>原型模式是JavaScript语言之魂。</p>\n<p>定义</p>\n<p>用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。</p>\n<p>使用场景</p>\n<p>还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。<br>原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原型对象复制方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">prototypeExtend</span></span>() &#123;</span><br><span class=\"line\">    var F = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        args = arguments,</span><br><span class=\"line\">        i = 0,</span><br><span class=\"line\">        len = args.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\">        // 遍历每个模板对象中的属性</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(var j <span class=\"keyword\">in</span> args[i]) &#123;</span><br><span class=\"line\">            F.prototype[j] = args[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 返回缓存类实例</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var penguin = prototypeExtend(&#123;</span><br><span class=\"line\">    speed: 20,</span><br><span class=\"line\">    swim: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'游泳速度'</span> + this.speed);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    run: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'奔跑速度'</span> + this.speed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。</p>\n<p>收获与总结</p>\n<p>原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>哈哈，让你感受下一个人的寂寞。</p>\n<p>定义</p>\n<p>又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。</p>\n<p>使用场景</p>\n<p>单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var A = &#123;</span><br><span class=\"line\">    Util: &#123;</span><br><span class=\"line\">        util_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        util_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Tool: &#123;</span><br><span class=\"line\">        tool_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        tool_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Ajax: &#123;</span><br><span class=\"line\">        ajax_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        ajax_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想使用这个代码库，像下面这样访问即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.Util.util_method1();</span><br><span class=\"line\">A.Tool.tool_method2();</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。</p>\n<h1 id=\"结构型设计模式\"><a href=\"#结构型设计模式\" class=\"headerlink\" title=\"结构型设计模式\"></a>结构型设计模式</h1><p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。</p>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><p>作者把这种模式比喻成一种套餐服务。</p>\n<p>定义</p>\n<p>为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。</p>\n<p>使用场景</p>\n<p>为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 外观模式实现</span><br><span class=\"line\"><span class=\"keyword\">function</span> addEvent(dom, <span class=\"built_in\">type</span>, fn) &#123;</span><br><span class=\"line\">    // 对于支持DOM2级事件处理程序的浏览器</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</span><br><span class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    // 对于不支持addEventListener但支持attachEvent的浏览器</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</span><br><span class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。</p>\n<p>收获与总结</p>\n<p>当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>听到这个模式的名字，有没有想到水管弯弯的场景呢？</p>\n<p>定义</p>\n<p>将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。</p>\n<p>使用场景</p>\n<p>公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。<br>适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。<br>JavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> doSomeThing(name, title, age, color, size, prize)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * obj.name: name</span><br><span class=\"line\"> * obj.title: title</span><br><span class=\"line\"> * obj.age: age</span><br><span class=\"line\"> * obj.color: color</span><br><span class=\"line\"> * obj.size: size</span><br><span class=\"line\"> * obj.prize: prize</span><br><span class=\"line\">***/</span><br><span class=\"line\"><span class=\"keyword\">function</span> doSomeThing(obj)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> doSomeThing(obj) &#123;</span><br><span class=\"line\">    var _adapter = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'雨夜清荷'</span>,</span><br><span class=\"line\">        title: <span class=\"string\">'设计模式'</span>,</span><br><span class=\"line\">        age: 24,</span><br><span class=\"line\">        color: <span class=\"string\">'pink'</span>,</span><br><span class=\"line\">        size: 100,</span><br><span class=\"line\">        prize: 50</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> _adapter) &#123;</span><br><span class=\"line\">        _adapter[i] = obj[i] || _adapter[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>JavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>有没有想到牛郎织女鹊桥相会的场景？</p>\n<p>定义</p>\n<p>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。</p>\n<p>使用场景</p>\n<p>跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。<br>代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 前端浏览器页面</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 回调函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> jsonpCallBack(res,req) &#123;</span><br><span class=\"line\">    console.log(res,req);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://localhost/test/jsonp.php?callback=jsonp CallBack&amp;data=getJsonPData\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 另一个域下的服务器请求接口</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">/* 后端获取请求字段数据，并生成返回内容 */</span><br><span class=\"line\"><span class=\"variable\">$data</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"data\"</span>];</span><br><span class=\"line\"><span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"callback\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">\"('success', '\"</span>.<span class=\"variable\">$data</span>.<span class=\"string\">\"')\"</span>;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。</p>\n<p>收获与总结</p>\n<p>代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。<br>由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。</p>\n<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h2><p>显然房子装修就是一种典型的装饰者模式。</p>\n<p>定义</p>\n<p>在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。</p>\n<p>使用场景</p>\n<p>静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 装饰者</span><br><span class=\"line\">var decorator = <span class=\"keyword\">function</span>(input, fn) &#123;</span><br><span class=\"line\">    // 获取事件源</span><br><span class=\"line\">    var input = document.getElementById(input);</span><br><span class=\"line\">    // 若事件源已经绑定事件</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeof input.onclick === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        // 缓存事件源原有回调函数</span><br><span class=\"line\">        var oldClickFn = input.onclick;</span><br><span class=\"line\">        // 为事件源定义新的事件</span><br><span class=\"line\">        input.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            // 事件源原有回调函数</span><br><span class=\"line\">            oldClickFn();</span><br><span class=\"line\">            // 执行事件源新增回调函数</span><br><span class=\"line\">            fn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        input.onclick = fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p>作者把这种模式比喻成城市间的公路。</p>\n<p>定义</p>\n<p>在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。</p>\n<p>使用场景</p>\n<p>有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。<br>对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> changeColor(dom, color, <span class=\"built_in\">bg</span>) &#123;</span><br><span class=\"line\">    // 设置元素的字体颜色</span><br><span class=\"line\">    dom.style.color = color;</span><br><span class=\"line\">    // 设置元素的背景颜色</span><br><span class=\"line\">    dom.style.background = <span class=\"built_in\">bg</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。<br>对于事件的桥接方法，可以用一个匿名函数来代替。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var spans = document.getElementsByTagName(<span class=\"string\">'span'</span>);</span><br><span class=\"line\">spans[0].onmouseover = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    changeColor(this, <span class=\"string\">'red'</span>, <span class=\"string\">'#ddd'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p>作者把组合模式比喻成超值午餐，感觉很形象。</p>\n<p>定义</p>\n<p>又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>使用场景</p>\n<p>为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。<br>我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。<br>在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。</p>\n<p>收获与总结</p>\n<p>组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。</p>\n<p>享元模式</p>\n<p>作者把享元模式比喻成城市公交车，可以仔细思考一番。</p>\n<p>定义</p>\n<p>运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p>\n<p>使用场景</p>\n<p>现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。<br>享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Flyweight = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 已创建的元素</span><br><span class=\"line\">    var created = [];</span><br><span class=\"line\">    // 创建一个新闻包装容器</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">create</span></span>() &#123;</span><br><span class=\"line\">        var dom = document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        // 将容器插入新闻列表容器中</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">'container'</span>).appendChild(dom);</span><br><span class=\"line\">        // 缓存新创建的元素</span><br><span class=\"line\">        created.push(dom);</span><br><span class=\"line\">        // 返回创建的新元素</span><br><span class=\"line\">        <span class=\"built_in\">return</span> dom;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 获取创建新闻元素方法</span><br><span class=\"line\">        getDiv: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            // 如果已创建的元素小于当前页元素总个数(5个)，则创建</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(created.length &lt; 5) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> created();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // 获取第一个元素，并插入去后面</span><br><span class=\"line\">                var div = created.shift();</span><br><span class=\"line\">                created.push(div);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> div;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var paper = 0,</span><br><span class=\"line\">    num = 5,</span><br><span class=\"line\">    len = article.length;</span><br><span class=\"line\">// 添加五条新闻</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(article[i])</span><br><span class=\"line\">        // 通过享元类获取创建的元素并写入新闻内容</span><br><span class=\"line\">        Flyweight.getDiv().innerHTML = article[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下一页按钮绑定事件</span><br><span class=\"line\">document.getElementById(<span class=\"string\">'next_page'</span>).onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 如果新闻内容不足5条则返回</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(article.length &lt; 5) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引</span><br><span class=\"line\">        j = 0;</span><br><span class=\"line\">    // 插入5条新闻</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; j &lt; 5; j++) &#123;</span><br><span class=\"line\">        // 如果存在n+j条则插入</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(article[n + j]) &#123;</span><br><span class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j];</span><br><span class=\"line\">        // 否则插入起始位置第n+j-len条</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(article[n + j - len]) &#123;</span><br><span class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j - len];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Flyweight.getDiv().innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。</p>\n<p>收获与总结</p>\n<p>享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。</p>\n<h1 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h1><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>作者把这种模式比喻成照猫画虎。</p>\n<p>定义</p>\n<p>父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>使用场景</p>\n<p>提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。<br>模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。<br>打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。<br>模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 格式化字符串方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> formateString(str, data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> str.replace(/\\&#123;<span class=\"comment\">#(\\w+)#\\&#125;/g, function(match, key) &#123;</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> typeof data[key] === undefined ? <span class=\"string\">''</span>: data[key]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 基础导航</span><br><span class=\"line\">var Nav = <span class=\"keyword\">function</span>(data) &#123;</span><br><span class=\"line\">    // 基础导航样式模板</span><br><span class=\"line\">    this.item = <span class=\"string\">'&lt;a href=\"&#123;#href#&#125;\" title=\"&#123;#title#&#125;\"&gt;&#123;#name#&#125;&lt;/a&gt;'</span>;</span><br><span class=\"line\">    // 创建字符串</span><br><span class=\"line\">    this.html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    // 格式化数据</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        this.html += formateString(this.item, data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 返回字符串数据</span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NumNav = <span class=\"keyword\">function</span>(data) &#123;</span><br><span class=\"line\">    // 消息提醒信息组件模板</span><br><span class=\"line\">    var tpl = <span class=\"string\">'&lt;b&gt;&#123;#num#&#125;&lt;/b&gt;'</span>;</span><br><span class=\"line\">    // 装饰数据</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = data.length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        data[i].name += data[i].name + formateString(tpl, data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 继承基础导航类</span><br><span class=\"line\">    <span class=\"built_in\">return</span> Nav.call(this, data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>作者把这种模式比喻成通信卫星。</p>\n<p>定义</p>\n<p>又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p>\n<p>使用场景</p>\n<p>在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。<br>观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。<br>这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Observer = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存</span><br><span class=\"line\">    var __messages = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 注册信息接口</span><br><span class=\"line\">        regist: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 发布信息接口</span><br><span class=\"line\">        fire: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 移除信息接口</span><br><span class=\"line\">        remove: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>下面就是可以自己具体实现这些接口了。</p>\n<p>收获与总结</p>\n<p>观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。</p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>作者把这种模式比喻成超级玛丽。</p>\n<p>定义</p>\n<p>当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。</p>\n<p>使用场景</p>\n<p>平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。<br>将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 投票结果状态对象</span><br><span class=\"line\">var ResultState = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 判断结果保存在内部状态中</span><br><span class=\"line\">    var States = &#123;</span><br><span class=\"line\">        // 每种状态作为一种独立方法保存</span><br><span class=\"line\">        state0: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第一种情况'</span>)：</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        state1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第二种情况'</span>)：</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        state2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第三种情况'</span>)：</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        state3: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'这是第四种情况'</span>)：</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 获取某种状态并执行对应方法</span><br><span class=\"line\">    <span class=\"keyword\">function</span> show(result) &#123;</span><br><span class=\"line\">        States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 返回调用状态方法接口</span><br><span class=\"line\">        show: show</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>想调用第三种结果就可以如下调用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResultState.show(3);</span><br></pre></td></tr></table></figure>\n<p>对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。</p>\n<p>收获与总结</p>\n<p>状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>作者把这种模式比喻成活诸葛。</p>\n<p>定义</p>\n<p>将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p>\n<p>使用场景</p>\n<p>年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。<br>结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 价格策略对象</span><br><span class=\"line\">var PriceStrategy = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 内部算法对象</span><br><span class=\"line\">    var strategy = &#123;</span><br><span class=\"line\">        // 100返30</span><br><span class=\"line\">        return30: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 100返50</span><br><span class=\"line\">        return50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 9折</span><br><span class=\"line\">        percent90: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 8折</span><br><span class=\"line\">        percent80: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">        // 5折</span><br><span class=\"line\">        percent50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 策略算法调用接口</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(algorithm, price) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。</p>\n<h2 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h2><p>作者把这种模式比喻成一个有序车站。</p>\n<p>定义</p>\n<p>解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。</p>\n<p>使用场景</p>\n<p>项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。<br>对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。</p>\n<p>收获与总结</p>\n<p>职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。</p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>定义</p>\n<p>将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。</p>\n<p>使用场景</p>\n<p>现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。<br>命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。<br>那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 模块实现模块</span><br><span class=\"line\">var viewCommand = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    var tpl = &#123;</span><br><span class=\"line\">        // 展示图片结构模块</span><br><span class=\"line\">        product: [</span><br><span class=\"line\">            <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">        ].join(<span class=\"string\">''</span>),</span><br><span class=\"line\">        // 展示标题结构模块</span><br><span class=\"line\">        title: [</span><br><span class=\"line\">        <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">        ].join(<span class=\"string\">''</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 格式化字符串缓存字符串</span><br><span class=\"line\">    html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    // 格式化字符串</span><br><span class=\"line\">    <span class=\"keyword\">function</span> formateString(str, obj) &#123;&#125;</span><br><span class=\"line\">    // 方法集合</span><br><span class=\"line\">    var Action = &#123;</span><br><span class=\"line\">        // 创建方法</span><br><span class=\"line\">        create: <span class=\"keyword\">function</span>(data, view) &#123;</span><br><span class=\"line\">            // 解析数据</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data.length) &#123;</span><br><span class=\"line\">                // 遍历</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    html += formateString(tpl[view], data[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                html += formateString(tpl[view], data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 展示方法</span><br><span class=\"line\">        display: <span class=\"keyword\">function</span>(container, data, vuew) &#123;</span><br><span class=\"line\">            // 如果传入数据</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data) &#123;</span><br><span class=\"line\">                // 根据给的数据创建视图</span><br><span class=\"line\">                this.create(data, view);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 展示模块</span><br><span class=\"line\">            document.getElementById(container).innerHTML = html;</span><br><span class=\"line\">            // 展示后清空缓存字符串</span><br><span class=\"line\">            html = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 命令接口</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span> excute(msg) &#123;</span><br><span class=\"line\">        // 解析命令，如果msg.param不是数组则将其转化为数组</span><br><span class=\"line\">        msg.param = Object.prototype.toString.call(msg.param) === <span class=\"string\">\"[object Array]\"</span> ? msg.param : [msg.param];</span><br><span class=\"line\">        // Action内部调用的方法引用this，此处保证作用域this执行传入Action</span><br><span class=\"line\">        Action[msg.command].apply(Action, msg.param)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>下面就可以测试这个命令对象了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var productData = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        src: <span class=\"string\">'command/02.jpg'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'绽放的桃花'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        src: <span class=\"string\">'command/03.jpg'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'阳光下的温馨'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">// 模块标题数据</span><br><span class=\"line\">titleData = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'夏日里的一片温馨'</span>,</span><br><span class=\"line\">    tips: <span class=\"string\">'暖暖的温情带给人们家的感觉'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用命令对象</span><br><span class=\"line\">viewCommand(&#123;</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'display'</span>,</span><br><span class=\"line\">    param: [<span class=\"string\">'title'</span>, titleData, <span class=\"string\">'title'</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">viewCommand(&#123;</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'create'</span>,</span><br><span class=\"line\">    param: [<span class=\"string\">'product'</span>, productData, <span class=\"string\">'product'</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有了命令模式，想创建任何页面视图都是一件很简单的事情。</p>\n<p>收获与总结</p>\n<p>命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。</p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>作者把这种模式比喻成驻华大使。</p>\n<p>定义</p>\n<p>针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。</p>\n<p>使用场景</p>\n<p>用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bindEvent = <span class=\"keyword\">function</span>(dom, <span class=\"built_in\">type</span>, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</span><br><span class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</span><br><span class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var demo = document.getElementById(<span class=\"string\">'demo'</span>);</span><br><span class=\"line\">bindEvent(demo, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    this.style.background = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。<br>访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> bindIEEvent(dom, <span class=\"built_in\">type</span>, fn, data) &#123;</span><br><span class=\"line\">    var data = data || &#123;&#125;;</span><br><span class=\"line\">    dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, <span class=\"keyword\">function</span>(e)&#123;</span><br><span class=\"line\">        fn.call(dom, e, data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。</p>\n<p>收获与总结</p>\n<p>访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。</p>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>作者把这种模式比喻成媒婆，好吧，我笑了这里。</p>\n<p>定义</p>\n<p>通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。</p>\n<p>使用场景</p>\n<p>项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。<br>观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。<br>如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 中介者对象</span><br><span class=\"line\">var Mediator = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 消息对象</span><br><span class=\"line\">    var _msg = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 订阅消息方法，<span class=\"built_in\">type</span>:消息名称 action:消息回调函数</span><br><span class=\"line\">        register: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, action) &#123;</span><br><span class=\"line\">            // 如果消息存在</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>])</span><br><span class=\"line\">                // 存入回调函数</span><br><span class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // 不存在则建立消息容器</span><br><span class=\"line\">                _msg[<span class=\"built_in\">type</span>] = [];</span><br><span class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 发布消息方法</span><br><span class=\"line\">        send: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>) &#123;</span><br><span class=\"line\">            // 如果该消息已经被订阅</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>]) &#123;</span><br><span class=\"line\">                // 遍历已存储的消息回调函数</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = _msg[<span class=\"built_in\">type</span>].length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    // 执行回调函数</span><br><span class=\"line\">                    _msg[<span class=\"built_in\">type</span>][i] &amp;&amp; _msg[<span class=\"built_in\">type</span>][i]();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。</p>\n<p>收获与总结</p>\n<p>同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。</p>\n<p>备忘录模式</p>\n<p>定义</p>\n<p>在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。</p>\n<p>使用场景</p>\n<p>在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Page备忘录类</span><br><span class=\"line\">var Page = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 信息缓存对象</span><br><span class=\"line\">    var cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(page, fn) &#123;</span><br><span class=\"line\">        // 判断该页数据是否在缓存中</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cache[page]) &#123;</span><br><span class=\"line\">            // 显示该页内容</span><br><span class=\"line\">            showPage(page, cache[page]);</span><br><span class=\"line\">            // 执行成功回调函数</span><br><span class=\"line\">            fn &amp;&amp; fn();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            // 否则异步请求</span><br><span class=\"line\">            $.post(<span class=\"string\">'./data/getNewsData.php'</span>, &#123;</span><br><span class=\"line\">                page: page</span><br><span class=\"line\">            &#125;, <span class=\"keyword\">function</span>(res) &#123;</span><br><span class=\"line\">                // 成功返回</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res.errNo == 0) &#123;</span><br><span class=\"line\">                    showPage(page, res.data);</span><br><span class=\"line\">                    cache[page] = res.data;</span><br><span class=\"line\">                    fn &amp;&amp; fn();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    // 处理异常</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。</p>\n<p>收获与总结</p>\n<p>备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>作者把这种模式比喻成一个点钞机。</p>\n<p>定义</p>\n<p>在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>\n<p>使用场景</p>\n<p>迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Iterator = <span class=\"keyword\">function</span>(items, container) &#123;</span><br><span class=\"line\">    // 获取父元素</span><br><span class=\"line\">    var container = container &amp;&amp; document.getElementById(container) || document,</span><br><span class=\"line\">    // 获取元素</span><br><span class=\"line\">        items = container.getElementsByTagName(items),</span><br><span class=\"line\">    // 获取元素长度</span><br><span class=\"line\">        length = items.length,</span><br><span class=\"line\">    // 当前索引值</span><br><span class=\"line\">        index = 0;</span><br><span class=\"line\">    // 缓存原生数组splice方法</span><br><span class=\"line\">    var splice = [].splice;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        // 获取第一个元素</span><br><span class=\"line\">        first: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取最后一个元素</span><br><span class=\"line\">        second: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取前一个元素</span><br><span class=\"line\">        pre: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取后一个元素</span><br><span class=\"line\">        next: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</span><br><span class=\"line\">        // 获取某一个元素</span><br><span class=\"line\">        get: <span class=\"keyword\">function</span>(num) &#123;&#125;,</span><br><span class=\"line\">        // 对每一个元素执行某一个方法</span><br><span class=\"line\">        dealEach: <span class=\"keyword\">function</span>(fn) &#123;&#125;,</span><br><span class=\"line\">        // 对某一个元素执行某一个方法</span><br><span class=\"line\">        dealItem: <span class=\"keyword\">function</span>(num, fn) &#123;&#125;,</span><br><span class=\"line\">        // 排他方式处理某一个元素</span><br><span class=\"line\">        exclusive: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。</p>\n<p>收获与总结</p>\n<p>通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>定义</p>\n<p>对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p>\n<p>使用场景</p>\n<p>一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div calss=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">\"link-inner\"</span>&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"#\"</span>&gt;link&lt;/a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">\"button-inner\"</span>&gt;</span><br><span class=\"line\">        &lt;button&gt;text&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV&gt;DIV2&gt;SPAN。<br>上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。</p>\n<p>收获与总结</p>\n<p>一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。</p>\n<h1 id=\"技巧型设计模式\"><a href=\"#技巧型设计模式\" class=\"headerlink\" title=\"技巧型设计模式\"></a>技巧型设计模式</h1><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。</p>\n<h1 id=\"架构型设计模式\"><a href=\"#架构型设计模式\" class=\"headerlink\" title=\"架构型设计模式\"></a>架构型设计模式</h1><p>架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。</p>\n<p>学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。</p>"},{"title":"JS的变量提升了解一下？","date":"2018-03-14T15:09:37.000Z","_content":"\n``` bash\nvar 100\n//等等，去喝杯咖啡再写\n```","source":"_posts/js-var.md","raw":"---\ntitle: JS的变量提升了解一下？\ndate: 2018-03-14 23:09:37\ncategories: 学习笔记\ntags: [JS填坑,填坑]\n---\n\n``` bash\nvar 100\n//等等，去喝杯咖啡再写\n```","slug":"js-var","published":1,"updated":"2019-04-20T08:42:10.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72u80009dgqixq3tp5s6","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var 100</span><br><span class=\"line\">//等等，去喝杯咖啡再写</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var 100</span><br><span class=\"line\">//等等，去喝杯咖啡再写</span><br></pre></td></tr></table></figure>"},{"title":"完成的项目，持续更新","date":"2018-08-14T15:09:37.000Z","_content":"\n目标：写过的代码加起来能绕地球一圈\n## 那是梦开始的地方\n<!-- more -->\n### 第一个小程序，IoT项目\n![](/images/project/iot_user.jpg)\nIoT安装端账号：az1 密码：123456\n![](/images/project/iot_install.jpg)\nIoT售后端账号：wx1 密码：123456\n![](/images/project/iot_wx.jpg)\n### 车仔网小程序\n![](/images/project/chezi.png)\n### 男士理容预约小程序\n![](/images/project/harroman.jpg)\n### vue搭建的手机商城\n![](/images/project/shilianmobile.png)\n### 飞冰Ice后台demo\n[demo链接,点我,点我](http://hospital.pppppxt.cc)\n管理员账户：admin;医生账号：doctor 密码都是：123456\n### 某题库测试系统前端demo\n[点我,点我](http://wuweiquan.pppppxt.cc)\nsn码随便输入即可\n","source":"_posts/project.md","raw":"---\ntitle: 完成的项目，持续更新\ndate: 2018-08-14 23:09:37\ncategories: 项目\ntags: 案例\n---\n\n目标：写过的代码加起来能绕地球一圈\n## 那是梦开始的地方\n<!-- more -->\n### 第一个小程序，IoT项目\n![](/images/project/iot_user.jpg)\nIoT安装端账号：az1 密码：123456\n![](/images/project/iot_install.jpg)\nIoT售后端账号：wx1 密码：123456\n![](/images/project/iot_wx.jpg)\n### 车仔网小程序\n![](/images/project/chezi.png)\n### 男士理容预约小程序\n![](/images/project/harroman.jpg)\n### vue搭建的手机商城\n![](/images/project/shilianmobile.png)\n### 飞冰Ice后台demo\n[demo链接,点我,点我](http://hospital.pppppxt.cc)\n管理员账户：admin;医生账号：doctor 密码都是：123456\n### 某题库测试系统前端demo\n[点我,点我](http://wuweiquan.pppppxt.cc)\nsn码随便输入即可\n","slug":"project","published":1,"updated":"2019-08-19T01:50:42.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72ua000ddgqii3fkkdx1","content":"<p>目标：写过的代码加起来能绕地球一圈</p>\n<h2 id=\"那是梦开始的地方\"><a href=\"#那是梦开始的地方\" class=\"headerlink\" title=\"那是梦开始的地方\"></a>那是梦开始的地方</h2><a id=\"more\"></a>\n<h3 id=\"第一个小程序，IoT项目\"><a href=\"#第一个小程序，IoT项目\" class=\"headerlink\" title=\"第一个小程序，IoT项目\"></a>第一个小程序，IoT项目</h3><p><img src=\"/images/project/iot_user.jpg\" alt><br>IoT安装端账号：az1 密码：123456<br><img src=\"/images/project/iot_install.jpg\" alt><br>IoT售后端账号：wx1 密码：123456<br><img src=\"/images/project/iot_wx.jpg\" alt></p>\n<h3 id=\"车仔网小程序\"><a href=\"#车仔网小程序\" class=\"headerlink\" title=\"车仔网小程序\"></a>车仔网小程序</h3><p><img src=\"/images/project/chezi.png\" alt></p>\n<h3 id=\"男士理容预约小程序\"><a href=\"#男士理容预约小程序\" class=\"headerlink\" title=\"男士理容预约小程序\"></a>男士理容预约小程序</h3><p><img src=\"/images/project/harroman.jpg\" alt></p>\n<h3 id=\"vue搭建的手机商城\"><a href=\"#vue搭建的手机商城\" class=\"headerlink\" title=\"vue搭建的手机商城\"></a>vue搭建的手机商城</h3><p><img src=\"/images/project/shilianmobile.png\" alt></p>\n<h3 id=\"飞冰Ice后台demo\"><a href=\"#飞冰Ice后台demo\" class=\"headerlink\" title=\"飞冰Ice后台demo\"></a>飞冰Ice后台demo</h3><p><a href=\"http://hospital.pppppxt.cc\" target=\"_blank\" rel=\"noopener\">demo链接,点我,点我</a><br>管理员账户：admin;医生账号：doctor 密码都是：123456</p>\n<h3 id=\"某题库测试系统前端demo\"><a href=\"#某题库测试系统前端demo\" class=\"headerlink\" title=\"某题库测试系统前端demo\"></a>某题库测试系统前端demo</h3><p><a href=\"http://wuweiquan.pppppxt.cc\" target=\"_blank\" rel=\"noopener\">点我,点我</a><br>sn码随便输入即可</p>\n","site":{"data":{}},"excerpt":"<p>目标：写过的代码加起来能绕地球一圈</p>\n<h2 id=\"那是梦开始的地方\"><a href=\"#那是梦开始的地方\" class=\"headerlink\" title=\"那是梦开始的地方\"></a>那是梦开始的地方</h2>","more":"<h3 id=\"第一个小程序，IoT项目\"><a href=\"#第一个小程序，IoT项目\" class=\"headerlink\" title=\"第一个小程序，IoT项目\"></a>第一个小程序，IoT项目</h3><p><img src=\"/images/project/iot_user.jpg\" alt><br>IoT安装端账号：az1 密码：123456<br><img src=\"/images/project/iot_install.jpg\" alt><br>IoT售后端账号：wx1 密码：123456<br><img src=\"/images/project/iot_wx.jpg\" alt></p>\n<h3 id=\"车仔网小程序\"><a href=\"#车仔网小程序\" class=\"headerlink\" title=\"车仔网小程序\"></a>车仔网小程序</h3><p><img src=\"/images/project/chezi.png\" alt></p>\n<h3 id=\"男士理容预约小程序\"><a href=\"#男士理容预约小程序\" class=\"headerlink\" title=\"男士理容预约小程序\"></a>男士理容预约小程序</h3><p><img src=\"/images/project/harroman.jpg\" alt></p>\n<h3 id=\"vue搭建的手机商城\"><a href=\"#vue搭建的手机商城\" class=\"headerlink\" title=\"vue搭建的手机商城\"></a>vue搭建的手机商城</h3><p><img src=\"/images/project/shilianmobile.png\" alt></p>\n<h3 id=\"飞冰Ice后台demo\"><a href=\"#飞冰Ice后台demo\" class=\"headerlink\" title=\"飞冰Ice后台demo\"></a>飞冰Ice后台demo</h3><p><a href=\"http://hospital.pppppxt.cc\" target=\"_blank\" rel=\"noopener\">demo链接,点我,点我</a><br>管理员账户：admin;医生账号：doctor 密码都是：123456</p>\n<h3 id=\"某题库测试系统前端demo\"><a href=\"#某题库测试系统前端demo\" class=\"headerlink\" title=\"某题库测试系统前端demo\"></a>某题库测试系统前端demo</h3><p><a href=\"http://wuweiquan.pppppxt.cc\" target=\"_blank\" rel=\"noopener\">点我,点我</a><br>sn码随便输入即可</p>"},{"title":"React-native,我们一起走过的坑。","date":"2018-04-19T15:09:37.000Z","_content":"\n前几个星期，点开了RN的技能树，废话不多说，那我就意简言赅地记录一下自己遇到的坑，避免后人再犯自己的错误。\n<!-- more -->\n先说明一下我的运行环境：\n1.我当时这个年代用的RN版本是0.55\n2.使用的脚手架是create-react-native-app\n# 调试\n## EJECT前（即生成那个android和ios文件前）\n如果你像我那样，按照官方的说明方法：初始化了一个项目\n但也是找不到android和ios文件的话，不要慌张，要淡定，因为这时你还没有EJECT，官方解析就是：\n\"eject\" eventually to create your own native builds\n但是，是男人的话怎么能那么快eject的，所以这时就该大名鼎鼎的'Expo'登场了，你只需要在你的手机或者模拟器上安装上这个最新版的'Expo'软件，然后在你的本地项目运行命令npm start，这时不出意料的话你就会弹出一个二维码出来（但是不知为何我每次都是出意外地弹了一个崩了的二维码），在你的Expo上扫一扫就能运行成功了，当然最后是少不摇一摇你的手机打开调试，Android模拟器：Command⌘ + M，iOS模拟器：Command⌘ + D，打开Enable Live Reload,然后你就能愉快地撸码了。\n但是身为一个前端工程师，一眼见不到那个盒子模型，心里总会不舒服的，这时，你只要执行上面一样的操作，选择Show inspector就行了。\n![](/images/Developer Menu.jpg)\n## EJECT后\n这时候，情况就比较尴尬了\n这时你已经进入了贤者模式，而你的项目结构也会发生一些微妙的变化，看你能不能找出来，找出来后，这时候你要面对就是那个android文件夹和ios文件夹，身为一个只懂JS的前端工程师的我来说，一开始我是拒绝的\n但是深入理解之后，我发现我其实根本不用管它们的。\n当运行npm run android/npm run ios后，你的手机/模拟器毫无意外就会被强制地安装上了一个应用了，这时候调试同上的。\n>总结\n>普通手机应用的话还是eject后真机模拟器调试方便的，不竟后面还有一些你预想不到的一些npm模块居然还要更改android文件什么才能用的，哼(￢︿̫̿￢☆)\n>如果你那么不幸，像我一样要开发什么鬼特制机的话，那些机全身上下只有一些USB接口，而接上电脑后又完全没有响应的话，这时候EXPO那骚一般的远程调试就适合不过了\n\n# 样式\n## 不能继承 不能继承 不能继承\n好吧，我先深呼吸一下，先放些代码给大家感受下\n``` bash\n<View style={styles.view}>\n    <Text style={styles.text}></Text>\n    <Text style={styles.text}></Text>\n</View>\nconst styles = StyleSheet.create({\n  view: {\n    width:300,\n  }，\n  text：{\n    fontSize:10,   \n  }\n }\n```\n如果你想把这个view里面的text字体都设为10的话怎么办？\n嗯，没错，你只能乖乖地每一个text都写上一个样式了。\n好吧，首先我们要知道它是模仿css的规则的而已，所以也就只能这样了。\n\n## 默认尺寸是DP\n百分比不能用\n可以用flex:1,flex:2,做等比例\n\n# 组件坑\n## Image\n### 要先设宽高\n为了性能方便所有网络图片都要先设固定宽高（来自官方傲娇的解析）\n像这样\n``` bash\n <Image \n    style={{width: 100, height: 100}}\n    source={{uri: url}}\n/>\n```\n那么问题来了，我特么的怎么知道图片的尺寸是什么。\n解决方法：\n1、使用Image自带的getSize方法先获取宽高\n2、使用别的大神的组件React Native Fit Image 等\n\n### 资源超过400kb左右不显示\n所以说原生组件，😔\n推荐使用别的组件库：react-native-fast-image（要先装个glide，略为麻烦）\n\n### 静态资源\nsource={require('./xxx.jpg')} 资源路径不能拼接，但可以这样写\n``` bash\nconst a=require('./xxx/')\n<Image source={a}/>\n```\n\n## 点击事件尽量使用Touchable开头的\n\n## react-navigation\n官方推荐的路由组件库\n我使用StackNavigator方法\n坑1： navigation.goBack()，返回上一个页面所有生命周期都没有进入，不像小程序有一个onShow周期\n坑2：navigation.goBack()，不能带参数\n我的解决办法：\n1、把方法传进下一个页面，goBack()前调用\n2、传入route_key，使用setParams方法传参\n\n# 打包\n建议按官网流程\n我踩过的坑：index.js 里的 registerComponent 不同app要不一样\n\n*未完待续*\n\n","source":"_posts/rn.md","raw":"---\ntitle: React-native,我们一起走过的坑。\ndate: 2018-04-19 23:09:37\ncategories: 学习笔记\ntags: [JS填坑,填坑]\n---\n\n前几个星期，点开了RN的技能树，废话不多说，那我就意简言赅地记录一下自己遇到的坑，避免后人再犯自己的错误。\n<!-- more -->\n先说明一下我的运行环境：\n1.我当时这个年代用的RN版本是0.55\n2.使用的脚手架是create-react-native-app\n# 调试\n## EJECT前（即生成那个android和ios文件前）\n如果你像我那样，按照官方的说明方法：初始化了一个项目\n但也是找不到android和ios文件的话，不要慌张，要淡定，因为这时你还没有EJECT，官方解析就是：\n\"eject\" eventually to create your own native builds\n但是，是男人的话怎么能那么快eject的，所以这时就该大名鼎鼎的'Expo'登场了，你只需要在你的手机或者模拟器上安装上这个最新版的'Expo'软件，然后在你的本地项目运行命令npm start，这时不出意料的话你就会弹出一个二维码出来（但是不知为何我每次都是出意外地弹了一个崩了的二维码），在你的Expo上扫一扫就能运行成功了，当然最后是少不摇一摇你的手机打开调试，Android模拟器：Command⌘ + M，iOS模拟器：Command⌘ + D，打开Enable Live Reload,然后你就能愉快地撸码了。\n但是身为一个前端工程师，一眼见不到那个盒子模型，心里总会不舒服的，这时，你只要执行上面一样的操作，选择Show inspector就行了。\n![](/images/Developer Menu.jpg)\n## EJECT后\n这时候，情况就比较尴尬了\n这时你已经进入了贤者模式，而你的项目结构也会发生一些微妙的变化，看你能不能找出来，找出来后，这时候你要面对就是那个android文件夹和ios文件夹，身为一个只懂JS的前端工程师的我来说，一开始我是拒绝的\n但是深入理解之后，我发现我其实根本不用管它们的。\n当运行npm run android/npm run ios后，你的手机/模拟器毫无意外就会被强制地安装上了一个应用了，这时候调试同上的。\n>总结\n>普通手机应用的话还是eject后真机模拟器调试方便的，不竟后面还有一些你预想不到的一些npm模块居然还要更改android文件什么才能用的，哼(￢︿̫̿￢☆)\n>如果你那么不幸，像我一样要开发什么鬼特制机的话，那些机全身上下只有一些USB接口，而接上电脑后又完全没有响应的话，这时候EXPO那骚一般的远程调试就适合不过了\n\n# 样式\n## 不能继承 不能继承 不能继承\n好吧，我先深呼吸一下，先放些代码给大家感受下\n``` bash\n<View style={styles.view}>\n    <Text style={styles.text}></Text>\n    <Text style={styles.text}></Text>\n</View>\nconst styles = StyleSheet.create({\n  view: {\n    width:300,\n  }，\n  text：{\n    fontSize:10,   \n  }\n }\n```\n如果你想把这个view里面的text字体都设为10的话怎么办？\n嗯，没错，你只能乖乖地每一个text都写上一个样式了。\n好吧，首先我们要知道它是模仿css的规则的而已，所以也就只能这样了。\n\n## 默认尺寸是DP\n百分比不能用\n可以用flex:1,flex:2,做等比例\n\n# 组件坑\n## Image\n### 要先设宽高\n为了性能方便所有网络图片都要先设固定宽高（来自官方傲娇的解析）\n像这样\n``` bash\n <Image \n    style={{width: 100, height: 100}}\n    source={{uri: url}}\n/>\n```\n那么问题来了，我特么的怎么知道图片的尺寸是什么。\n解决方法：\n1、使用Image自带的getSize方法先获取宽高\n2、使用别的大神的组件React Native Fit Image 等\n\n### 资源超过400kb左右不显示\n所以说原生组件，😔\n推荐使用别的组件库：react-native-fast-image（要先装个glide，略为麻烦）\n\n### 静态资源\nsource={require('./xxx.jpg')} 资源路径不能拼接，但可以这样写\n``` bash\nconst a=require('./xxx/')\n<Image source={a}/>\n```\n\n## 点击事件尽量使用Touchable开头的\n\n## react-navigation\n官方推荐的路由组件库\n我使用StackNavigator方法\n坑1： navigation.goBack()，返回上一个页面所有生命周期都没有进入，不像小程序有一个onShow周期\n坑2：navigation.goBack()，不能带参数\n我的解决办法：\n1、把方法传进下一个页面，goBack()前调用\n2、传入route_key，使用setParams方法传参\n\n# 打包\n建议按官网流程\n我踩过的坑：index.js 里的 registerComponent 不同app要不一样\n\n*未完待续*\n\n","slug":"rn","published":1,"updated":"2019-04-20T08:42:10.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72ub000edgqi5su3yeec","content":"<p>前几个星期，点开了RN的技能树，废话不多说，那我就意简言赅地记录一下自己遇到的坑，避免后人再犯自己的错误。<br><a id=\"more\"></a><br>先说明一下我的运行环境：<br>1.我当时这个年代用的RN版本是0.55<br>2.使用的脚手架是create-react-native-app</p>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><h2 id=\"EJECT前（即生成那个android和ios文件前）\"><a href=\"#EJECT前（即生成那个android和ios文件前）\" class=\"headerlink\" title=\"EJECT前（即生成那个android和ios文件前）\"></a>EJECT前（即生成那个android和ios文件前）</h2><p>如果你像我那样，按照官方的说明方法：初始化了一个项目<br>但也是找不到android和ios文件的话，不要慌张，要淡定，因为这时你还没有EJECT，官方解析就是：<br>“eject” eventually to create your own native builds<br>但是，是男人的话怎么能那么快eject的，所以这时就该大名鼎鼎的’Expo’登场了，你只需要在你的手机或者模拟器上安装上这个最新版的’Expo’软件，然后在你的本地项目运行命令npm start，这时不出意料的话你就会弹出一个二维码出来（但是不知为何我每次都是出意外地弹了一个崩了的二维码），在你的Expo上扫一扫就能运行成功了，当然最后是少不摇一摇你的手机打开调试，Android模拟器：Command⌘ + M，iOS模拟器：Command⌘ + D，打开Enable Live Reload,然后你就能愉快地撸码了。<br>但是身为一个前端工程师，一眼见不到那个盒子模型，心里总会不舒服的，这时，你只要执行上面一样的操作，选择Show inspector就行了。<br><img src=\"/images/Developer Menu.jpg\" alt></p>\n<h2 id=\"EJECT后\"><a href=\"#EJECT后\" class=\"headerlink\" title=\"EJECT后\"></a>EJECT后</h2><p>这时候，情况就比较尴尬了<br>这时你已经进入了贤者模式，而你的项目结构也会发生一些微妙的变化，看你能不能找出来，找出来后，这时候你要面对就是那个android文件夹和ios文件夹，身为一个只懂JS的前端工程师的我来说，一开始我是拒绝的<br>但是深入理解之后，我发现我其实根本不用管它们的。<br>当运行npm run android/npm run ios后，你的手机/模拟器毫无意外就会被强制地安装上了一个应用了，这时候调试同上的。</p>\n<blockquote>\n<p>总结<br>普通手机应用的话还是eject后真机模拟器调试方便的，不竟后面还有一些你预想不到的一些npm模块居然还要更改android文件什么才能用的，哼(￢︿̫̿￢☆)<br>如果你那么不幸，像我一样要开发什么鬼特制机的话，那些机全身上下只有一些USB接口，而接上电脑后又完全没有响应的话，这时候EXPO那骚一般的远程调试就适合不过了</p>\n</blockquote>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><h2 id=\"不能继承-不能继承-不能继承\"><a href=\"#不能继承-不能继承-不能继承\" class=\"headerlink\" title=\"不能继承 不能继承 不能继承\"></a>不能继承 不能继承 不能继承</h2><p>好吧，我先深呼吸一下，先放些代码给大家感受下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;View style=&#123;styles.view&#125;&gt;</span><br><span class=\"line\">    &lt;Text style=&#123;styles.text&#125;&gt;&lt;/Text&gt;</span><br><span class=\"line\">    &lt;Text style=&#123;styles.text&#125;&gt;&lt;/Text&gt;</span><br><span class=\"line\">&lt;/View&gt;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  view: &#123;</span><br><span class=\"line\">    width:300,</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  text：&#123;</span><br><span class=\"line\">    fontSize:10,   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你想把这个view里面的text字体都设为10的话怎么办？<br>嗯，没错，你只能乖乖地每一个text都写上一个样式了。<br>好吧，首先我们要知道它是模仿css的规则的而已，所以也就只能这样了。</p>\n<h2 id=\"默认尺寸是DP\"><a href=\"#默认尺寸是DP\" class=\"headerlink\" title=\"默认尺寸是DP\"></a>默认尺寸是DP</h2><p>百分比不能用<br>可以用flex:1,flex:2,做等比例</p>\n<h1 id=\"组件坑\"><a href=\"#组件坑\" class=\"headerlink\" title=\"组件坑\"></a>组件坑</h1><h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><h3 id=\"要先设宽高\"><a href=\"#要先设宽高\" class=\"headerlink\" title=\"要先设宽高\"></a>要先设宽高</h3><p>为了性能方便所有网络图片都要先设固定宽高（来自官方傲娇的解析）<br>像这样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Image </span><br><span class=\"line\">    style=&#123;&#123;width: 100, height: 100&#125;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">source</span>=&#123;&#123;uri: url&#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么问题来了，我特么的怎么知道图片的尺寸是什么。<br>解决方法：<br>1、使用Image自带的getSize方法先获取宽高<br>2、使用别的大神的组件React Native Fit Image 等</p>\n<h3 id=\"资源超过400kb左右不显示\"><a href=\"#资源超过400kb左右不显示\" class=\"headerlink\" title=\"资源超过400kb左右不显示\"></a>资源超过400kb左右不显示</h3><p>所以说原生组件，😔<br>推荐使用别的组件库：react-native-fast-image（要先装个glide，略为麻烦）</p>\n<h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><p>source={require(‘./xxx.jpg’)} 资源路径不能拼接，但可以这样写<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a=require(<span class=\"string\">'./xxx/'</span>)</span><br><span class=\"line\">&lt;Image <span class=\"built_in\">source</span>=&#123;a&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"点击事件尽量使用Touchable开头的\"><a href=\"#点击事件尽量使用Touchable开头的\" class=\"headerlink\" title=\"点击事件尽量使用Touchable开头的\"></a>点击事件尽量使用Touchable开头的</h2><h2 id=\"react-navigation\"><a href=\"#react-navigation\" class=\"headerlink\" title=\"react-navigation\"></a>react-navigation</h2><p>官方推荐的路由组件库<br>我使用StackNavigator方法<br>坑1： navigation.goBack()，返回上一个页面所有生命周期都没有进入，不像小程序有一个onShow周期<br>坑2：navigation.goBack()，不能带参数<br>我的解决办法：<br>1、把方法传进下一个页面，goBack()前调用<br>2、传入route_key，使用setParams方法传参</p>\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><p>建议按官网流程<br>我踩过的坑：index.js 里的 registerComponent 不同app要不一样</p>\n<p><em>未完待续</em></p>\n","site":{"data":{}},"excerpt":"<p>前几个星期，点开了RN的技能树，废话不多说，那我就意简言赅地记录一下自己遇到的坑，避免后人再犯自己的错误。<br>","more":"<br>先说明一下我的运行环境：<br>1.我当时这个年代用的RN版本是0.55<br>2.使用的脚手架是create-react-native-app</p>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><h2 id=\"EJECT前（即生成那个android和ios文件前）\"><a href=\"#EJECT前（即生成那个android和ios文件前）\" class=\"headerlink\" title=\"EJECT前（即生成那个android和ios文件前）\"></a>EJECT前（即生成那个android和ios文件前）</h2><p>如果你像我那样，按照官方的说明方法：初始化了一个项目<br>但也是找不到android和ios文件的话，不要慌张，要淡定，因为这时你还没有EJECT，官方解析就是：<br>“eject” eventually to create your own native builds<br>但是，是男人的话怎么能那么快eject的，所以这时就该大名鼎鼎的’Expo’登场了，你只需要在你的手机或者模拟器上安装上这个最新版的’Expo’软件，然后在你的本地项目运行命令npm start，这时不出意料的话你就会弹出一个二维码出来（但是不知为何我每次都是出意外地弹了一个崩了的二维码），在你的Expo上扫一扫就能运行成功了，当然最后是少不摇一摇你的手机打开调试，Android模拟器：Command⌘ + M，iOS模拟器：Command⌘ + D，打开Enable Live Reload,然后你就能愉快地撸码了。<br>但是身为一个前端工程师，一眼见不到那个盒子模型，心里总会不舒服的，这时，你只要执行上面一样的操作，选择Show inspector就行了。<br><img src=\"/images/Developer Menu.jpg\" alt></p>\n<h2 id=\"EJECT后\"><a href=\"#EJECT后\" class=\"headerlink\" title=\"EJECT后\"></a>EJECT后</h2><p>这时候，情况就比较尴尬了<br>这时你已经进入了贤者模式，而你的项目结构也会发生一些微妙的变化，看你能不能找出来，找出来后，这时候你要面对就是那个android文件夹和ios文件夹，身为一个只懂JS的前端工程师的我来说，一开始我是拒绝的<br>但是深入理解之后，我发现我其实根本不用管它们的。<br>当运行npm run android/npm run ios后，你的手机/模拟器毫无意外就会被强制地安装上了一个应用了，这时候调试同上的。</p>\n<blockquote>\n<p>总结<br>普通手机应用的话还是eject后真机模拟器调试方便的，不竟后面还有一些你预想不到的一些npm模块居然还要更改android文件什么才能用的，哼(￢︿̫̿￢☆)<br>如果你那么不幸，像我一样要开发什么鬼特制机的话，那些机全身上下只有一些USB接口，而接上电脑后又完全没有响应的话，这时候EXPO那骚一般的远程调试就适合不过了</p>\n</blockquote>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><h2 id=\"不能继承-不能继承-不能继承\"><a href=\"#不能继承-不能继承-不能继承\" class=\"headerlink\" title=\"不能继承 不能继承 不能继承\"></a>不能继承 不能继承 不能继承</h2><p>好吧，我先深呼吸一下，先放些代码给大家感受下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;View style=&#123;styles.view&#125;&gt;</span><br><span class=\"line\">    &lt;Text style=&#123;styles.text&#125;&gt;&lt;/Text&gt;</span><br><span class=\"line\">    &lt;Text style=&#123;styles.text&#125;&gt;&lt;/Text&gt;</span><br><span class=\"line\">&lt;/View&gt;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  view: &#123;</span><br><span class=\"line\">    width:300,</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  text：&#123;</span><br><span class=\"line\">    fontSize:10,   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你想把这个view里面的text字体都设为10的话怎么办？<br>嗯，没错，你只能乖乖地每一个text都写上一个样式了。<br>好吧，首先我们要知道它是模仿css的规则的而已，所以也就只能这样了。</p>\n<h2 id=\"默认尺寸是DP\"><a href=\"#默认尺寸是DP\" class=\"headerlink\" title=\"默认尺寸是DP\"></a>默认尺寸是DP</h2><p>百分比不能用<br>可以用flex:1,flex:2,做等比例</p>\n<h1 id=\"组件坑\"><a href=\"#组件坑\" class=\"headerlink\" title=\"组件坑\"></a>组件坑</h1><h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><h3 id=\"要先设宽高\"><a href=\"#要先设宽高\" class=\"headerlink\" title=\"要先设宽高\"></a>要先设宽高</h3><p>为了性能方便所有网络图片都要先设固定宽高（来自官方傲娇的解析）<br>像这样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Image </span><br><span class=\"line\">    style=&#123;&#123;width: 100, height: 100&#125;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">source</span>=&#123;&#123;uri: url&#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么问题来了，我特么的怎么知道图片的尺寸是什么。<br>解决方法：<br>1、使用Image自带的getSize方法先获取宽高<br>2、使用别的大神的组件React Native Fit Image 等</p>\n<h3 id=\"资源超过400kb左右不显示\"><a href=\"#资源超过400kb左右不显示\" class=\"headerlink\" title=\"资源超过400kb左右不显示\"></a>资源超过400kb左右不显示</h3><p>所以说原生组件，😔<br>推荐使用别的组件库：react-native-fast-image（要先装个glide，略为麻烦）</p>\n<h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><p>source={require(‘./xxx.jpg’)} 资源路径不能拼接，但可以这样写<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a=require(<span class=\"string\">'./xxx/'</span>)</span><br><span class=\"line\">&lt;Image <span class=\"built_in\">source</span>=&#123;a&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"点击事件尽量使用Touchable开头的\"><a href=\"#点击事件尽量使用Touchable开头的\" class=\"headerlink\" title=\"点击事件尽量使用Touchable开头的\"></a>点击事件尽量使用Touchable开头的</h2><h2 id=\"react-navigation\"><a href=\"#react-navigation\" class=\"headerlink\" title=\"react-navigation\"></a>react-navigation</h2><p>官方推荐的路由组件库<br>我使用StackNavigator方法<br>坑1： navigation.goBack()，返回上一个页面所有生命周期都没有进入，不像小程序有一个onShow周期<br>坑2：navigation.goBack()，不能带参数<br>我的解决办法：<br>1、把方法传进下一个页面，goBack()前调用<br>2、传入route_key，使用setParams方法传参</p>\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><p>建议按官网流程<br>我踩过的坑：index.js 里的 registerComponent 不同app要不一样</p>\n<p><em>未完待续</em></p>"},{"title":"微信小程序填坑日记","date":"2017-06-14T15:09:37.000Z","_content":"记录一下那些年，开发微信小程序踩过的坑\n<!-- more -->\n# 微信小程序认识\n\n## 总体认识\n隐约感受到的RN的身影\n[官方的Q&A文档](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html)\n>为什么脚本内不能使用window等对象\n>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件\n\n碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码\n反正我们知道它能直接调用微信本身的控件就行了\n## 小体认识\n*MVVM*,*前后端分离*,*数据绑定*,*数据驱动*\n![](/images/model.png)\n# 一些代码\n自定义弹框\n``` bash\n<view hidden=\"{{showTrue}}\"></view>\n<view wx:if=\"{{showTrue}}\"></view>\n```\n改变样式\n``` bash\n<view class=\"{{diyClassName}}\"></view>\n```\n# 学习资源\n[最重要的当然是官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n[微信小程序资源汇总](https://github.com/justjavac/awesome-wechat-weapp)\n[用chrome运行小程序](https://github.com/chemzqm/wept)\n[官方demo源码](https://github.com/Hao-Wu/WeApp-Demo)\n\n# 填过的坑\n1.透明底的png图片,border-raduis：50%会变形\n2.canvas在swiper和scroll-view不兼容会浮出来\n3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值\n4.iphone：image图片里padding不能设百分比,只能设固定值\n5.最多只能打开5个页面,注意一下页面跳转的关闭","source":"_posts/wehchat-small.md","raw":"---\ntitle: 微信小程序填坑日记\ndate: 2017-06-14 23:09:37\ncategories: 学习笔记\ntags: [微信小程序,填坑]\n---\n记录一下那些年，开发微信小程序踩过的坑\n<!-- more -->\n# 微信小程序认识\n\n## 总体认识\n隐约感受到的RN的身影\n[官方的Q&A文档](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html)\n>为什么脚本内不能使用window等对象\n>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件\n\n碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码\n反正我们知道它能直接调用微信本身的控件就行了\n## 小体认识\n*MVVM*,*前后端分离*,*数据绑定*,*数据驱动*\n![](/images/model.png)\n# 一些代码\n自定义弹框\n``` bash\n<view hidden=\"{{showTrue}}\"></view>\n<view wx:if=\"{{showTrue}}\"></view>\n```\n改变样式\n``` bash\n<view class=\"{{diyClassName}}\"></view>\n```\n# 学习资源\n[最重要的当然是官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n[微信小程序资源汇总](https://github.com/justjavac/awesome-wechat-weapp)\n[用chrome运行小程序](https://github.com/chemzqm/wept)\n[官方demo源码](https://github.com/Hao-Wu/WeApp-Demo)\n\n# 填过的坑\n1.透明底的png图片,border-raduis：50%会变形\n2.canvas在swiper和scroll-view不兼容会浮出来\n3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值\n4.iphone：image图片里padding不能设百分比,只能设固定值\n5.最多只能打开5个页面,注意一下页面跳转的关闭","slug":"wehchat-small","published":1,"updated":"2019-06-13T15:25:59.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72ue000idgqi580hzjik","content":"<p>记录一下那些年，开发微信小程序踩过的坑<br><a id=\"more\"></a></p>\n<h1 id=\"微信小程序认识\"><a href=\"#微信小程序认识\" class=\"headerlink\" title=\"微信小程序认识\"></a>微信小程序认识</h1><h2 id=\"总体认识\"><a href=\"#总体认识\" class=\"headerlink\" title=\"总体认识\"></a>总体认识</h2><p>隐约感受到的RN的身影<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html\" target=\"_blank\" rel=\"noopener\">官方的Q&amp;A文档</a></p>\n<blockquote>\n<p>为什么脚本内不能使用window等对象<br>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件</p>\n</blockquote>\n<p>碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码<br>反正我们知道它能直接调用微信本身的控件就行了</p>\n<h2 id=\"小体认识\"><a href=\"#小体认识\" class=\"headerlink\" title=\"小体认识\"></a>小体认识</h2><p><em>MVVM</em>,<em>前后端分离</em>,<em>数据绑定</em>,<em>数据驱动</em><br><img src=\"/images/model.png\" alt></p>\n<h1 id=\"一些代码\"><a href=\"#一些代码\" class=\"headerlink\" title=\"一些代码\"></a>一些代码</h1><p>自定义弹框<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view hidden=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</span><br><span class=\"line\">&lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>改变样式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class=<span class=\"string\">\"&#123;&#123;diyClassName&#125;&#125;\"</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"noopener\">最重要的当然是官方文档</a><br><a href=\"https://github.com/justjavac/awesome-wechat-weapp\" target=\"_blank\" rel=\"noopener\">微信小程序资源汇总</a><br><a href=\"https://github.com/chemzqm/wept\" target=\"_blank\" rel=\"noopener\">用chrome运行小程序</a><br><a href=\"https://github.com/Hao-Wu/WeApp-Demo\" target=\"_blank\" rel=\"noopener\">官方demo源码</a></p>\n<h1 id=\"填过的坑\"><a href=\"#填过的坑\" class=\"headerlink\" title=\"填过的坑\"></a>填过的坑</h1><p>1.透明底的png图片,border-raduis：50%会变形<br>2.canvas在swiper和scroll-view不兼容会浮出来<br>3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值<br>4.iphone：image图片里padding不能设百分比,只能设固定值<br>5.最多只能打开5个页面,注意一下页面跳转的关闭</p>\n","site":{"data":{}},"excerpt":"<p>记录一下那些年，开发微信小程序踩过的坑<br>","more":"</p>\n<h1 id=\"微信小程序认识\"><a href=\"#微信小程序认识\" class=\"headerlink\" title=\"微信小程序认识\"></a>微信小程序认识</h1><h2 id=\"总体认识\"><a href=\"#总体认识\" class=\"headerlink\" title=\"总体认识\"></a>总体认识</h2><p>隐约感受到的RN的身影<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html\" target=\"_blank\" rel=\"noopener\">官方的Q&amp;A文档</a></p>\n<blockquote>\n<p>为什么脚本内不能使用window等对象<br>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件</p>\n</blockquote>\n<p>碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码<br>反正我们知道它能直接调用微信本身的控件就行了</p>\n<h2 id=\"小体认识\"><a href=\"#小体认识\" class=\"headerlink\" title=\"小体认识\"></a>小体认识</h2><p><em>MVVM</em>,<em>前后端分离</em>,<em>数据绑定</em>,<em>数据驱动</em><br><img src=\"/images/model.png\" alt></p>\n<h1 id=\"一些代码\"><a href=\"#一些代码\" class=\"headerlink\" title=\"一些代码\"></a>一些代码</h1><p>自定义弹框<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view hidden=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</span><br><span class=\"line\">&lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>改变样式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class=<span class=\"string\">\"&#123;&#123;diyClassName&#125;&#125;\"</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"noopener\">最重要的当然是官方文档</a><br><a href=\"https://github.com/justjavac/awesome-wechat-weapp\" target=\"_blank\" rel=\"noopener\">微信小程序资源汇总</a><br><a href=\"https://github.com/chemzqm/wept\" target=\"_blank\" rel=\"noopener\">用chrome运行小程序</a><br><a href=\"https://github.com/Hao-Wu/WeApp-Demo\" target=\"_blank\" rel=\"noopener\">官方demo源码</a></p>\n<h1 id=\"填过的坑\"><a href=\"#填过的坑\" class=\"headerlink\" title=\"填过的坑\"></a>填过的坑</h1><p>1.透明底的png图片,border-raduis：50%会变形<br>2.canvas在swiper和scroll-view不兼容会浮出来<br>3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值<br>4.iphone：image图片里padding不能设百分比,只能设固定值<br>5.最多只能打开5个页面,注意一下页面跳转的关闭</p>"},{"title":"一些前端题目","date":"2018-03-22T15:09:37.000Z","_content":"# 整理一下一些前端题目\n<!-- more -->\n## 以下分别输出什么,为什么\n\n``` bash\nvar User = {\n  count: 1,\n  getCount: function() {\n    return this.count;\n  }\n};\n \nconsole.log(User.getCount());  // what?\nvar func = User.getCount;\nconsole.log(func());  // what?\n\n```\n答案是:1和undefined。\n\n## 以下代码执行结果是什么\n\n``` bash\n\n  var foo = 1,bar = 2,j,test;\n  test = function(j) {\n      j = 5;\n      var bar = 5;\n      foo = 5;\n  }\n  test(10);\n  console.log(foo); //\n  console.log(bar); //\n  console.log(j); //\n\n};\n \nconsole.log(User.getCount());  // what?\nvar func = User.getCount;\nconsole.log(func());  // what?\n\n```\n答案是:5 2 undefined。\n\n## 说出输出的结果顺序\n\n``` bash\nsetTimeout(function() {\n  console.log(1)\n}, 0);\nnew Promise(function executor(resolve) {\n  console.log(2);\n  for( var i=0 ; i<10000 ; i++ ) {\n    i == 9999 && resolve();\n  }\n  console.log(3);\n}).then(function() {\n  console.log(4);\n});\nconsole.log(5);\n\n```\n答案：“2 3 5 4 1”\n\n## 以下代码执行结果是什么\n\n``` bash\nfunction foo() {this.value = 42;}\nfoo.prototype = {method: function () {return true;}};\nfunction bar() {\n    var value = 1;\n    return{method:function(){return value;}};\n}\nfoo.prototype = new bar();\nconsole.log(foo.prototype.constructor); //\nconsole.log(foo.prototype instanceof  bar); //\nvar test = new foo();\nconsole.log(test instanceof foo);//\nconsole.log(test instanceof bar);//\nconsole.log(test.method());//\n\n```\n答案：ƒ Object() { [native code] } \n      False\n      true\n\t  false\n      1\n\n## 用纯css,html写一个导航栏的tab切换(不使用js)\n\n``` bash\n方法1：\n<ul class='nav'>\n    <li><a href=\"#content1\">列表1</a></li>\n    <li><a href=\"#content2\">列表2</a></li>\n</ul>\n<div id=\"content1\">列表1内容:123456</div>\n<div id=\"content2\">列表2内容:abcdefgkijkl</div>\n<style type=\"text/css\">\n\t#content1,\n\t#content2{\n\t    display:none;\n\t}\n \n\t#content1:target,\n\t#content2:target{\n\t    display:block;\n\t}\n\t#content1:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:first-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n\t#content2:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:last-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n</style>\n方法2：\n<div class=\"container\">\n    <input class=\"nav1\" id=\"li1\" type=\"radio\" name=\"nav\">\n    <input class=\"nav2\" id=\"li2\" type=\"radio\" name=\"nav\">\n    <ul class='nav'>\n        <li class='active'><label for=\"li1\">列表1</label></li>\n        <li><label for=\"li2\">列表2</label></li>\n    </ul>\n    <div class=\"content\">\n        <div class=\"content1\">列表1内容:123456</div>\n        <div class=\"content1\">列表2内容:abcdefgkijkl</div>\n    </div>\n</div>\n<style type=\"text/css\">\n\t.container{\n    position:relative;\n    width:400px;\n    margin: 50px auto;\n}\ninput{\n    display:none;\n}\n.nav{\n    position:relative;\n    overflow:hidden;\n}\nli{\n    width:200px;\n    float:left;\n    text-align:center;\n    background:#ddd;\n}\nli label{\n    display:block;\n    width:200px;\n    line-height:36px;\n    font-size:18px;\n    cursor:pointer;\n}\n.content{\n    position:relative;\n    overflow:hidden;\n    width:400px;\n    height:100px;\n    border:1px solid #999;\n    box-sizing:border-box;\n    padding:10px;\n}\n.content1,\n.content2{\n    display:none;\n    width:100%;\n    height:100%;\n}\n.nav1:checked ~ .nav li {\n    background:#ddd;\n    color:#000;\n    \n    &:first-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n.nav2:checked ~ .nav li{\n    background:#ddd;\n    color:#000;\n    \n    &:last-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n.nav1:checked ~ .content > div{\n    display:none;\n    \n    &:first-child{\n    display:block;\n    }\n}\n.nav2:checked ~ .content > div{\n    display:none;\n    \n    &:last-child{\n    display:block;\n    }\n}\n.active {\n        background:#ff7300;\n        color:#fff;\n}\n.default{\n    display:block;\n}\n</style>\n\n```\n\n## 编写程序，统计字符串var str=\"helloworld\";中每种字符出现的次数,出现次数最多的是? 出现?次\n\n``` bash\nvar str=\"helloworld\";\n  方法一：用hash\n  for(var i=0,hash={};i<str.length;i++){\n    if(hash[str[i]]){\n      hash[str[i]]++\n    }else{\n      hash[str[i]]=1;\n    }\n  }\n  console.dir(hash);\n方法二：用正则\nvar arr=str.split(\"\")\n  .sort()\n  .join(\"\")\n  .match(/([a-z])\\1*/g)\n  .sort(function(a,b){\nreturn b.length-a.length; })\nconsole.log(\"出现最多的是: \"+arr[0][0]\n  +\"共\"+arr[0].length+\"次\");\nvar hash={};\n  arr.forEach(function(val){\n    hash[val[0]]=val.length;\n  });\n  console.dir(hash);\n```\n\n## 民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\n请编写程序，输出1~60之间的所有“安全数”\n比如：\n1、2、3、4、5、6、8、9、10、11、12、13、15、16、18、19、20、22、23、24、25、26、29、30……\n\n``` bash\nfor(var i = 1; i <= 60 ; i++){\nif(i%7 == 0 || i%10 == 7){\nconsole.log(i);\n}\n}\n```\n\n## 浏览器输入url到完整显示出页面经历的过程\n第一种简单的说呢就是这样的：\n第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。\n第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。\n第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。\n第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。\n第五步：重复第四步,直到找到正确的纪录。\n\n\n## 机试题\n ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式\n ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉\n ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置\n ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程\n ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）\n ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点\n ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致\n\n[神奇的链接](http://ife.baidu.com/2016/task/all)","source":"_posts/test-list.md","raw":"---\ntitle: 一些前端题目\ndate: 2018-03-22 23:09:37\ncategories: 学习笔记\ntags: [面试,题目]\n---\n# 整理一下一些前端题目\n<!-- more -->\n## 以下分别输出什么,为什么\n\n``` bash\nvar User = {\n  count: 1,\n  getCount: function() {\n    return this.count;\n  }\n};\n \nconsole.log(User.getCount());  // what?\nvar func = User.getCount;\nconsole.log(func());  // what?\n\n```\n答案是:1和undefined。\n\n## 以下代码执行结果是什么\n\n``` bash\n\n  var foo = 1,bar = 2,j,test;\n  test = function(j) {\n      j = 5;\n      var bar = 5;\n      foo = 5;\n  }\n  test(10);\n  console.log(foo); //\n  console.log(bar); //\n  console.log(j); //\n\n};\n \nconsole.log(User.getCount());  // what?\nvar func = User.getCount;\nconsole.log(func());  // what?\n\n```\n答案是:5 2 undefined。\n\n## 说出输出的结果顺序\n\n``` bash\nsetTimeout(function() {\n  console.log(1)\n}, 0);\nnew Promise(function executor(resolve) {\n  console.log(2);\n  for( var i=0 ; i<10000 ; i++ ) {\n    i == 9999 && resolve();\n  }\n  console.log(3);\n}).then(function() {\n  console.log(4);\n});\nconsole.log(5);\n\n```\n答案：“2 3 5 4 1”\n\n## 以下代码执行结果是什么\n\n``` bash\nfunction foo() {this.value = 42;}\nfoo.prototype = {method: function () {return true;}};\nfunction bar() {\n    var value = 1;\n    return{method:function(){return value;}};\n}\nfoo.prototype = new bar();\nconsole.log(foo.prototype.constructor); //\nconsole.log(foo.prototype instanceof  bar); //\nvar test = new foo();\nconsole.log(test instanceof foo);//\nconsole.log(test instanceof bar);//\nconsole.log(test.method());//\n\n```\n答案：ƒ Object() { [native code] } \n      False\n      true\n\t  false\n      1\n\n## 用纯css,html写一个导航栏的tab切换(不使用js)\n\n``` bash\n方法1：\n<ul class='nav'>\n    <li><a href=\"#content1\">列表1</a></li>\n    <li><a href=\"#content2\">列表2</a></li>\n</ul>\n<div id=\"content1\">列表1内容:123456</div>\n<div id=\"content2\">列表2内容:abcdefgkijkl</div>\n<style type=\"text/css\">\n\t#content1,\n\t#content2{\n\t    display:none;\n\t}\n \n\t#content1:target,\n\t#content2:target{\n\t    display:block;\n\t}\n\t#content1:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:first-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n\t#content2:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:last-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n</style>\n方法2：\n<div class=\"container\">\n    <input class=\"nav1\" id=\"li1\" type=\"radio\" name=\"nav\">\n    <input class=\"nav2\" id=\"li2\" type=\"radio\" name=\"nav\">\n    <ul class='nav'>\n        <li class='active'><label for=\"li1\">列表1</label></li>\n        <li><label for=\"li2\">列表2</label></li>\n    </ul>\n    <div class=\"content\">\n        <div class=\"content1\">列表1内容:123456</div>\n        <div class=\"content1\">列表2内容:abcdefgkijkl</div>\n    </div>\n</div>\n<style type=\"text/css\">\n\t.container{\n    position:relative;\n    width:400px;\n    margin: 50px auto;\n}\ninput{\n    display:none;\n}\n.nav{\n    position:relative;\n    overflow:hidden;\n}\nli{\n    width:200px;\n    float:left;\n    text-align:center;\n    background:#ddd;\n}\nli label{\n    display:block;\n    width:200px;\n    line-height:36px;\n    font-size:18px;\n    cursor:pointer;\n}\n.content{\n    position:relative;\n    overflow:hidden;\n    width:400px;\n    height:100px;\n    border:1px solid #999;\n    box-sizing:border-box;\n    padding:10px;\n}\n.content1,\n.content2{\n    display:none;\n    width:100%;\n    height:100%;\n}\n.nav1:checked ~ .nav li {\n    background:#ddd;\n    color:#000;\n    \n    &:first-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n.nav2:checked ~ .nav li{\n    background:#ddd;\n    color:#000;\n    \n    &:last-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n.nav1:checked ~ .content > div{\n    display:none;\n    \n    &:first-child{\n    display:block;\n    }\n}\n.nav2:checked ~ .content > div{\n    display:none;\n    \n    &:last-child{\n    display:block;\n    }\n}\n.active {\n        background:#ff7300;\n        color:#fff;\n}\n.default{\n    display:block;\n}\n</style>\n\n```\n\n## 编写程序，统计字符串var str=\"helloworld\";中每种字符出现的次数,出现次数最多的是? 出现?次\n\n``` bash\nvar str=\"helloworld\";\n  方法一：用hash\n  for(var i=0,hash={};i<str.length;i++){\n    if(hash[str[i]]){\n      hash[str[i]]++\n    }else{\n      hash[str[i]]=1;\n    }\n  }\n  console.dir(hash);\n方法二：用正则\nvar arr=str.split(\"\")\n  .sort()\n  .join(\"\")\n  .match(/([a-z])\\1*/g)\n  .sort(function(a,b){\nreturn b.length-a.length; })\nconsole.log(\"出现最多的是: \"+arr[0][0]\n  +\"共\"+arr[0].length+\"次\");\nvar hash={};\n  arr.forEach(function(val){\n    hash[val[0]]=val.length;\n  });\n  console.dir(hash);\n```\n\n## 民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\n请编写程序，输出1~60之间的所有“安全数”\n比如：\n1、2、3、4、5、6、8、9、10、11、12、13、15、16、18、19、20、22、23、24、25、26、29、30……\n\n``` bash\nfor(var i = 1; i <= 60 ; i++){\nif(i%7 == 0 || i%10 == 7){\nconsole.log(i);\n}\n}\n```\n\n## 浏览器输入url到完整显示出页面经历的过程\n第一种简单的说呢就是这样的：\n第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。\n第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。\n第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。\n第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。\n第五步：重复第四步,直到找到正确的纪录。\n\n\n## 机试题\n ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式\n ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉\n ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置\n ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程\n ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）\n ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点\n ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致\n\n[神奇的链接](http://ife.baidu.com/2016/task/all)","slug":"test-list","published":1,"updated":"2019-06-13T15:24:38.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72uf000ldgqi8sf3ue4q","content":"<h1 id=\"整理一下一些前端题目\"><a href=\"#整理一下一些前端题目\" class=\"headerlink\" title=\"整理一下一些前端题目\"></a>整理一下一些前端题目</h1><a id=\"more\"></a>\n<h2 id=\"以下分别输出什么-为什么\"><a href=\"#以下分别输出什么-为什么\" class=\"headerlink\" title=\"以下分别输出什么,为什么\"></a>以下分别输出什么,为什么</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var User = &#123;</span><br><span class=\"line\">  count: 1,</span><br><span class=\"line\">  getCount: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(User.getCount());  // what?</span><br><span class=\"line\">var func = User.getCount;</span><br><span class=\"line\">console.log(func());  // what?</span><br></pre></td></tr></table></figure>\n<p>答案是:1和undefined。</p>\n<h2 id=\"以下代码执行结果是什么\"><a href=\"#以下代码执行结果是什么\" class=\"headerlink\" title=\"以下代码执行结果是什么\"></a>以下代码执行结果是什么</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  var foo = 1,bar = 2,j,<span class=\"built_in\">test</span>;</span><br><span class=\"line\">  <span class=\"built_in\">test</span> = <span class=\"keyword\">function</span>(j) &#123;</span><br><span class=\"line\">      j = 5;</span><br><span class=\"line\">      var bar = 5;</span><br><span class=\"line\">      foo = 5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">test</span>(10);</span><br><span class=\"line\">  console.log(foo); //</span><br><span class=\"line\">  console.log(bar); //</span><br><span class=\"line\">  console.log(j); //</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(User.getCount());  // what?</span><br><span class=\"line\">var func = User.getCount;</span><br><span class=\"line\">console.log(func());  // what?</span><br></pre></td></tr></table></figure>\n<p>答案是:5 2 undefined。</p>\n<h2 id=\"说出输出的结果顺序\"><a href=\"#说出输出的结果顺序\" class=\"headerlink\" title=\"说出输出的结果顺序\"></a>说出输出的结果顺序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  console.log(1)</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">new Promise(<span class=\"keyword\">function</span> executor(resolve) &#123;</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>( var i=0 ; i&lt;10000 ; i++ ) &#123;</span><br><span class=\"line\">    i == 9999 &amp;&amp; resolve();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(3);</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  console.log(4);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(5);</span><br></pre></td></tr></table></figure>\n<p>答案：“2 3 5 4 1”</p>\n<h2 id=\"以下代码执行结果是什么-1\"><a href=\"#以下代码执行结果是什么-1\" class=\"headerlink\" title=\"以下代码执行结果是什么\"></a>以下代码执行结果是什么</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">foo</span></span>() &#123;this.value = 42;&#125;</span><br><span class=\"line\">foo.prototype = &#123;method: <span class=\"function\"><span class=\"title\">function</span></span> () &#123;<span class=\"built_in\">return</span> <span class=\"literal\">true</span>;&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bar</span></span>() &#123;</span><br><span class=\"line\">    var value = 1;</span><br><span class=\"line\">    <span class=\"built_in\">return</span>&#123;method:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> value;&#125;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype = new bar();</span><br><span class=\"line\">console.log(foo.prototype.constructor); //</span><br><span class=\"line\">console.log(foo.prototype instanceof  bar); //</span><br><span class=\"line\">var <span class=\"built_in\">test</span> = new foo();</span><br><span class=\"line\">console.log(<span class=\"built_in\">test</span> instanceof foo);//</span><br><span class=\"line\">console.log(<span class=\"built_in\">test</span> instanceof bar);//</span><br><span class=\"line\">console.log(test.method());//</span><br></pre></td></tr></table></figure>\n<p>答案：ƒ Object() { [native code] }<br>      False<br>      true<br>      false<br>      1</p>\n<h2 id=\"用纯css-html写一个导航栏的tab切换-不使用js\"><a href=\"#用纯css-html写一个导航栏的tab切换-不使用js\" class=\"headerlink\" title=\"用纯css,html写一个导航栏的tab切换(不使用js)\"></a>用纯css,html写一个导航栏的tab切换(不使用js)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">&lt;ul class=<span class=\"string\">'nav'</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content1\"</span>&gt;列表1&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content2\"</span>&gt;列表2&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"content2\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</span><br><span class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">\t<span class=\"comment\">#content1,</span></span><br><span class=\"line\">\t<span class=\"comment\">#content2&#123;</span></span><br><span class=\"line\">\t    display:none;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">#content1:target,</span></span><br><span class=\"line\">\t<span class=\"comment\">#content2:target&#123;</span></span><br><span class=\"line\">\t    display:block;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">#content1:target ~ .nav li&#123;</span></span><br><span class=\"line\">\t    // 改变li元素的背景色和字体颜色</span><br><span class=\"line\">\t    &amp;:first-child&#123;</span><br><span class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">\t        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">#content2:target ~ .nav li&#123;</span></span><br><span class=\"line\">\t    // 改变li元素的背景色和字体颜色</span><br><span class=\"line\">\t    &amp;:last-child&#123;</span><br><span class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">\t        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">    &lt;input class=<span class=\"string\">\"nav1\"</span> id=<span class=\"string\">\"li1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</span><br><span class=\"line\">    &lt;input class=<span class=\"string\">\"nav2\"</span> id=<span class=\"string\">\"li2\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</span><br><span class=\"line\">    &lt;ul class=<span class=\"string\">'nav'</span>&gt;</span><br><span class=\"line\">        &lt;li class=<span class=\"string\">'active'</span>&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li1\"</span>&gt;列表1&lt;/label&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li2\"</span>&gt;列表2&lt;/label&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">\t.container&#123;</span><br><span class=\"line\">    position:relative;</span><br><span class=\"line\">    width:400px;</span><br><span class=\"line\">    margin: 50px auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav&#123;</span><br><span class=\"line\">    position:relative;</span><br><span class=\"line\">    overflow:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">li&#123;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    <span class=\"built_in\">float</span>:left;</span><br><span class=\"line\">    text-align:center;</span><br><span class=\"line\">    background:<span class=\"comment\">#ddd;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">li label&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    line-height:36px;</span><br><span class=\"line\">    font-size:18px;</span><br><span class=\"line\">    cursor:pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content&#123;</span><br><span class=\"line\">    position:relative;</span><br><span class=\"line\">    overflow:hidden;</span><br><span class=\"line\">    width:400px;</span><br><span class=\"line\">    height:100px;</span><br><span class=\"line\">    border:1px solid <span class=\"comment\">#999;</span></span><br><span class=\"line\">    box-sizing:border-box;</span><br><span class=\"line\">    padding:10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content1,</span><br><span class=\"line\">.content2&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">    width:100%;</span><br><span class=\"line\">    height:100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav1:checked ~ .nav li &#123;</span><br><span class=\"line\">    background:<span class=\"comment\">#ddd;</span></span><br><span class=\"line\">    color:<span class=\"comment\">#000;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:first-child&#123;</span><br><span class=\"line\">        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav2:checked ~ .nav li&#123;</span><br><span class=\"line\">    background:<span class=\"comment\">#ddd;</span></span><br><span class=\"line\">    color:<span class=\"comment\">#000;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:last-child&#123;</span><br><span class=\"line\">        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav1:checked ~ .content &gt; div&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:first-child&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav2:checked ~ .content &gt; div&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:last-child&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.active &#123;</span><br><span class=\"line\">        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.default&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写程序，统计字符串var-str-”helloworld”-中每种字符出现的次数-出现次数最多的是-出现-次\"><a href=\"#编写程序，统计字符串var-str-”helloworld”-中每种字符出现的次数-出现次数最多的是-出现-次\" class=\"headerlink\" title=\"编写程序，统计字符串var str=”helloworld”;中每种字符出现的次数,出现次数最多的是? 出现?次\"></a>编写程序，统计字符串var str=”helloworld”;中每种字符出现的次数,出现次数最多的是? 出现?次</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=<span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">  方法一：用<span class=\"built_in\">hash</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(var i=0,<span class=\"built_in\">hash</span>=&#123;&#125;;i&lt;str.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">hash</span>[str[i]])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]++</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</span><br><span class=\"line\">方法二：用正则</span><br><span class=\"line\">var arr=str.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  .sort()</span><br><span class=\"line\">  .join(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  .match(/([a-z])\\1*/g)</span><br><span class=\"line\">  .sort(<span class=\"keyword\">function</span>(a,b)&#123;</span><br><span class=\"line\"><span class=\"built_in\">return</span> b.length-a.length; &#125;)</span><br><span class=\"line\">console.log(<span class=\"string\">\"出现最多的是: \"</span>+arr[0][0]</span><br><span class=\"line\">  +<span class=\"string\">\"共\"</span>+arr[0].length+<span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">var <span class=\"built_in\">hash</span>=&#123;&#125;;</span><br><span class=\"line\">  arr.forEach(<span class=\"keyword\">function</span>(val)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">hash</span>[val[0]]=val.length;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\"><a href=\"#民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\" class=\"headerlink\" title=\"民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\"></a>民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。</h2><p>请编写程序，输出1~60之间的所有“安全数”<br>比如：<br>1、2、3、4、5、6、8、9、10、11、12、13、15、16、18、19、20、22、23、24、25、26、29、30……</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(var i = 1; i &lt;= 60 ; i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(i%7 == 0 || i%10 == 7)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器输入url到完整显示出页面经历的过程\"><a href=\"#浏览器输入url到完整显示出页面经历的过程\" class=\"headerlink\" title=\"浏览器输入url到完整显示出页面经历的过程\"></a>浏览器输入url到完整显示出页面经历的过程</h2><p>第一种简单的说呢就是这样的：<br>第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。<br>第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。<br>第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。<br>第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。<br>第五步：重复第四步,直到找到正确的纪录。</p>\n<h2 id=\"机试题\"><a href=\"#机试题\" class=\"headerlink\" title=\"机试题\"></a>机试题</h2><p> ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式<br> ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉<br> ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置<br> ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程<br> ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）<br> ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点<br> ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</p>\n<p><a href=\"http://ife.baidu.com/2016/task/all\" target=\"_blank\" rel=\"noopener\">神奇的链接</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"整理一下一些前端题目\"><a href=\"#整理一下一些前端题目\" class=\"headerlink\" title=\"整理一下一些前端题目\"></a>整理一下一些前端题目</h1>","more":"<h2 id=\"以下分别输出什么-为什么\"><a href=\"#以下分别输出什么-为什么\" class=\"headerlink\" title=\"以下分别输出什么,为什么\"></a>以下分别输出什么,为什么</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var User = &#123;</span><br><span class=\"line\">  count: 1,</span><br><span class=\"line\">  getCount: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(User.getCount());  // what?</span><br><span class=\"line\">var func = User.getCount;</span><br><span class=\"line\">console.log(func());  // what?</span><br></pre></td></tr></table></figure>\n<p>答案是:1和undefined。</p>\n<h2 id=\"以下代码执行结果是什么\"><a href=\"#以下代码执行结果是什么\" class=\"headerlink\" title=\"以下代码执行结果是什么\"></a>以下代码执行结果是什么</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  var foo = 1,bar = 2,j,<span class=\"built_in\">test</span>;</span><br><span class=\"line\">  <span class=\"built_in\">test</span> = <span class=\"keyword\">function</span>(j) &#123;</span><br><span class=\"line\">      j = 5;</span><br><span class=\"line\">      var bar = 5;</span><br><span class=\"line\">      foo = 5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">test</span>(10);</span><br><span class=\"line\">  console.log(foo); //</span><br><span class=\"line\">  console.log(bar); //</span><br><span class=\"line\">  console.log(j); //</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(User.getCount());  // what?</span><br><span class=\"line\">var func = User.getCount;</span><br><span class=\"line\">console.log(func());  // what?</span><br></pre></td></tr></table></figure>\n<p>答案是:5 2 undefined。</p>\n<h2 id=\"说出输出的结果顺序\"><a href=\"#说出输出的结果顺序\" class=\"headerlink\" title=\"说出输出的结果顺序\"></a>说出输出的结果顺序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  console.log(1)</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">new Promise(<span class=\"keyword\">function</span> executor(resolve) &#123;</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>( var i=0 ; i&lt;10000 ; i++ ) &#123;</span><br><span class=\"line\">    i == 9999 &amp;&amp; resolve();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(3);</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  console.log(4);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(5);</span><br></pre></td></tr></table></figure>\n<p>答案：“2 3 5 4 1”</p>\n<h2 id=\"以下代码执行结果是什么-1\"><a href=\"#以下代码执行结果是什么-1\" class=\"headerlink\" title=\"以下代码执行结果是什么\"></a>以下代码执行结果是什么</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">foo</span></span>() &#123;this.value = 42;&#125;</span><br><span class=\"line\">foo.prototype = &#123;method: <span class=\"function\"><span class=\"title\">function</span></span> () &#123;<span class=\"built_in\">return</span> <span class=\"literal\">true</span>;&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bar</span></span>() &#123;</span><br><span class=\"line\">    var value = 1;</span><br><span class=\"line\">    <span class=\"built_in\">return</span>&#123;method:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> value;&#125;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype = new bar();</span><br><span class=\"line\">console.log(foo.prototype.constructor); //</span><br><span class=\"line\">console.log(foo.prototype instanceof  bar); //</span><br><span class=\"line\">var <span class=\"built_in\">test</span> = new foo();</span><br><span class=\"line\">console.log(<span class=\"built_in\">test</span> instanceof foo);//</span><br><span class=\"line\">console.log(<span class=\"built_in\">test</span> instanceof bar);//</span><br><span class=\"line\">console.log(test.method());//</span><br></pre></td></tr></table></figure>\n<p>答案：ƒ Object() { [native code] }<br>      False<br>      true<br>      false<br>      1</p>\n<h2 id=\"用纯css-html写一个导航栏的tab切换-不使用js\"><a href=\"#用纯css-html写一个导航栏的tab切换-不使用js\" class=\"headerlink\" title=\"用纯css,html写一个导航栏的tab切换(不使用js)\"></a>用纯css,html写一个导航栏的tab切换(不使用js)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">&lt;ul class=<span class=\"string\">'nav'</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content1\"</span>&gt;列表1&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content2\"</span>&gt;列表2&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"content2\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</span><br><span class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">\t<span class=\"comment\">#content1,</span></span><br><span class=\"line\">\t<span class=\"comment\">#content2&#123;</span></span><br><span class=\"line\">\t    display:none;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">#content1:target,</span></span><br><span class=\"line\">\t<span class=\"comment\">#content2:target&#123;</span></span><br><span class=\"line\">\t    display:block;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">#content1:target ~ .nav li&#123;</span></span><br><span class=\"line\">\t    // 改变li元素的背景色和字体颜色</span><br><span class=\"line\">\t    &amp;:first-child&#123;</span><br><span class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">\t        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">#content2:target ~ .nav li&#123;</span></span><br><span class=\"line\">\t    // 改变li元素的背景色和字体颜色</span><br><span class=\"line\">\t    &amp;:last-child&#123;</span><br><span class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">\t        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">    &lt;input class=<span class=\"string\">\"nav1\"</span> id=<span class=\"string\">\"li1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</span><br><span class=\"line\">    &lt;input class=<span class=\"string\">\"nav2\"</span> id=<span class=\"string\">\"li2\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</span><br><span class=\"line\">    &lt;ul class=<span class=\"string\">'nav'</span>&gt;</span><br><span class=\"line\">        &lt;li class=<span class=\"string\">'active'</span>&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li1\"</span>&gt;列表1&lt;/label&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li2\"</span>&gt;列表2&lt;/label&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">\t.container&#123;</span><br><span class=\"line\">    position:relative;</span><br><span class=\"line\">    width:400px;</span><br><span class=\"line\">    margin: 50px auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav&#123;</span><br><span class=\"line\">    position:relative;</span><br><span class=\"line\">    overflow:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">li&#123;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    <span class=\"built_in\">float</span>:left;</span><br><span class=\"line\">    text-align:center;</span><br><span class=\"line\">    background:<span class=\"comment\">#ddd;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">li label&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    line-height:36px;</span><br><span class=\"line\">    font-size:18px;</span><br><span class=\"line\">    cursor:pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content&#123;</span><br><span class=\"line\">    position:relative;</span><br><span class=\"line\">    overflow:hidden;</span><br><span class=\"line\">    width:400px;</span><br><span class=\"line\">    height:100px;</span><br><span class=\"line\">    border:1px solid <span class=\"comment\">#999;</span></span><br><span class=\"line\">    box-sizing:border-box;</span><br><span class=\"line\">    padding:10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content1,</span><br><span class=\"line\">.content2&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">    width:100%;</span><br><span class=\"line\">    height:100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav1:checked ~ .nav li &#123;</span><br><span class=\"line\">    background:<span class=\"comment\">#ddd;</span></span><br><span class=\"line\">    color:<span class=\"comment\">#000;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:first-child&#123;</span><br><span class=\"line\">        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav2:checked ~ .nav li&#123;</span><br><span class=\"line\">    background:<span class=\"comment\">#ddd;</span></span><br><span class=\"line\">    color:<span class=\"comment\">#000;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:last-child&#123;</span><br><span class=\"line\">        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav1:checked ~ .content &gt; div&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:first-child&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.nav2:checked ~ .content &gt; div&#123;</span><br><span class=\"line\">    display:none;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &amp;:last-child&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.active &#123;</span><br><span class=\"line\">        background:<span class=\"comment\">#ff7300;</span></span><br><span class=\"line\">        color:<span class=\"comment\">#fff;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.default&#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写程序，统计字符串var-str-”helloworld”-中每种字符出现的次数-出现次数最多的是-出现-次\"><a href=\"#编写程序，统计字符串var-str-”helloworld”-中每种字符出现的次数-出现次数最多的是-出现-次\" class=\"headerlink\" title=\"编写程序，统计字符串var str=”helloworld”;中每种字符出现的次数,出现次数最多的是? 出现?次\"></a>编写程序，统计字符串var str=”helloworld”;中每种字符出现的次数,出现次数最多的是? 出现?次</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=<span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">  方法一：用<span class=\"built_in\">hash</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(var i=0,<span class=\"built_in\">hash</span>=&#123;&#125;;i&lt;str.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">hash</span>[str[i]])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]++</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</span><br><span class=\"line\">方法二：用正则</span><br><span class=\"line\">var arr=str.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  .sort()</span><br><span class=\"line\">  .join(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  .match(/([a-z])\\1*/g)</span><br><span class=\"line\">  .sort(<span class=\"keyword\">function</span>(a,b)&#123;</span><br><span class=\"line\"><span class=\"built_in\">return</span> b.length-a.length; &#125;)</span><br><span class=\"line\">console.log(<span class=\"string\">\"出现最多的是: \"</span>+arr[0][0]</span><br><span class=\"line\">  +<span class=\"string\">\"共\"</span>+arr[0].length+<span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">var <span class=\"built_in\">hash</span>=&#123;&#125;;</span><br><span class=\"line\">  arr.forEach(<span class=\"keyword\">function</span>(val)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">hash</span>[val[0]]=val.length;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\"><a href=\"#民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\" class=\"headerlink\" title=\"民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。\"></a>民间有一直有一游戏，玩法就是，大家轮流报数，如果报到能被7整除的数字，或者尾数是7的数字，都算踩地雷了。就应该罚唱歌。</h2><p>请编写程序，输出1~60之间的所有“安全数”<br>比如：<br>1、2、3、4、5、6、8、9、10、11、12、13、15、16、18、19、20、22、23、24、25、26、29、30……</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(var i = 1; i &lt;= 60 ; i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(i%7 == 0 || i%10 == 7)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器输入url到完整显示出页面经历的过程\"><a href=\"#浏览器输入url到完整显示出页面经历的过程\" class=\"headerlink\" title=\"浏览器输入url到完整显示出页面经历的过程\"></a>浏览器输入url到完整显示出页面经历的过程</h2><p>第一种简单的说呢就是这样的：<br>第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。<br>第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。<br>第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。<br>第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。<br>第五步：重复第四步,直到找到正确的纪录。</p>\n<h2 id=\"机试题\"><a href=\"#机试题\" class=\"headerlink\" title=\"机试题\"></a>机试题</h2><p> ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式<br> ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉<br> ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置<br> ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程<br> ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）<br> ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点<br> ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</p>\n<p><a href=\"http://ife.baidu.com/2016/task/all\" target=\"_blank\" rel=\"noopener\">神奇的链接</a></p>"},{"title":"TypeScript学习笔记","date":"2019-05-19T15:00:46.000Z","_content":"# 个人理解\n## 定义\n'TypeScript'-顾名思义，就是有Type的Script\n<!-- more -->\n****\n那么它和没有Type的Script有什么不一样呢，例如某Java前缀的Script\n举个例子：实际开发需求中我们要定义一个商品名称的变量为goodsName(<font color=red>ps:众所周知商品名称都必须是要字符串的</font>)\n```js\n// js中定义一个变量,先赋值一个字符串\nlet goodsName = 'apple' // 很好，看起来都一起正常\n// 然鹅，一位刚失恋的程序员哥哥，不小心把它改成一个数字（说笑，程序员哪会有女朋友）\ngoodsName = 520 // 这时候程序也没有阻止小哥哥这种赤裸裸的示爱行为\n// 甚至可以改成布尔值\ngoodsName = true\n// -----------------\n// 可以想想刚失恋的小哥哥，把这个变量提交给后端的接口\n// 最后给产品发现了\n// 后端调查发现是前端提交的数据类型错误\n// 顺利摔锅给前端\n// 从此小哥哥就步入了人生的低谷，情场事业双失😔\n```\n然而如果这时候这位程序员小哥哥用上了TypeScript\n```js\n// 同上也先定义一个变量\nlet goodsName: string = 'apple' // 看看有什么不同？没错，就是多了个string\ngoodsName = 520 //这时候就会有一条红线在变量下方\n// Error, number不是string类型\n// -----------------\n// 看到这条提示的红线，小哥哥也终于意识到了\n// 他的爱情也像这条红线那样\n// 已经到了高亮的结束边缘\n// 最后小哥哥看着那条红线\n// 突然对爱情重拾希望，然后不顾红线的错误提示，提交给后端\n// 结局同上\n```\n## 一些踩过的坑\n### 可选属性\n``` bash\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n```\n### 任意数量的其它属性\n``` bash\ninterface SquareConfig {\n [propName: string]: any;\n}\n```\n### 只读属性\n``` bash\ninterface Point {\n    readonly x: number;\n    readonly y: number;\n}\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n```\n### 函数类型\n``` bash\n//方法1\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n//方法2\nlet myAdd = function(x: number, y: number): number { return x + y; };\n```\n### 把类当做接口使用\n``` bash\nclass Point {\n    x: number;\n    y: number;\n}\n\ninterface Point3d extends Point {\n    z: number;\n}\n\nlet point3d: Point3d = {x: 1, y: 2, z: 3};\n```\n# 总结\n1. 提示真的很爽\n2. 会增加写类型的时间\n3. 大型项目来说上面花的时间是值得的，后期维护时间会变少\n\n","source":"_posts/typescript-note.md","raw":"---\ntitle: TypeScript学习笔记\ndate: 2019-05-19 23:00:46\ncategories: 学习笔记\ntags: [JS填坑,填坑]\n---\n# 个人理解\n## 定义\n'TypeScript'-顾名思义，就是有Type的Script\n<!-- more -->\n****\n那么它和没有Type的Script有什么不一样呢，例如某Java前缀的Script\n举个例子：实际开发需求中我们要定义一个商品名称的变量为goodsName(<font color=red>ps:众所周知商品名称都必须是要字符串的</font>)\n```js\n// js中定义一个变量,先赋值一个字符串\nlet goodsName = 'apple' // 很好，看起来都一起正常\n// 然鹅，一位刚失恋的程序员哥哥，不小心把它改成一个数字（说笑，程序员哪会有女朋友）\ngoodsName = 520 // 这时候程序也没有阻止小哥哥这种赤裸裸的示爱行为\n// 甚至可以改成布尔值\ngoodsName = true\n// -----------------\n// 可以想想刚失恋的小哥哥，把这个变量提交给后端的接口\n// 最后给产品发现了\n// 后端调查发现是前端提交的数据类型错误\n// 顺利摔锅给前端\n// 从此小哥哥就步入了人生的低谷，情场事业双失😔\n```\n然而如果这时候这位程序员小哥哥用上了TypeScript\n```js\n// 同上也先定义一个变量\nlet goodsName: string = 'apple' // 看看有什么不同？没错，就是多了个string\ngoodsName = 520 //这时候就会有一条红线在变量下方\n// Error, number不是string类型\n// -----------------\n// 看到这条提示的红线，小哥哥也终于意识到了\n// 他的爱情也像这条红线那样\n// 已经到了高亮的结束边缘\n// 最后小哥哥看着那条红线\n// 突然对爱情重拾希望，然后不顾红线的错误提示，提交给后端\n// 结局同上\n```\n## 一些踩过的坑\n### 可选属性\n``` bash\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n```\n### 任意数量的其它属性\n``` bash\ninterface SquareConfig {\n [propName: string]: any;\n}\n```\n### 只读属性\n``` bash\ninterface Point {\n    readonly x: number;\n    readonly y: number;\n}\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n```\n### 函数类型\n``` bash\n//方法1\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n//方法2\nlet myAdd = function(x: number, y: number): number { return x + y; };\n```\n### 把类当做接口使用\n``` bash\nclass Point {\n    x: number;\n    y: number;\n}\n\ninterface Point3d extends Point {\n    z: number;\n}\n\nlet point3d: Point3d = {x: 1, y: 2, z: 3};\n```\n# 总结\n1. 提示真的很爽\n2. 会增加写类型的时间\n3. 大型项目来说上面花的时间是值得的，后期维护时间会变少\n\n","slug":"typescript-note","published":1,"updated":"2019-06-13T15:17:42.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1nb72uh000pdgqizbnzp6gd","content":"<h1 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>‘TypeScript’-顾名思义，就是有Type的Script<br><a id=\"more\"></a></p>\n<hr>\n<p>那么它和没有Type的Script有什么不一样呢，例如某Java前缀的Script<br>举个例子：实际开发需求中我们要定义一个商品名称的变量为goodsName(<font color=\"red\">ps:众所周知商品名称都必须是要字符串的</font>)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js中定义一个变量,先赋值一个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> goodsName = <span class=\"string\">'apple'</span> <span class=\"comment\">// 很好，看起来都一起正常</span></span><br><span class=\"line\"><span class=\"comment\">// 然鹅，一位刚失恋的程序员哥哥，不小心把它改成一个数字（说笑，程序员哪会有女朋友）</span></span><br><span class=\"line\">goodsName = <span class=\"number\">520</span> <span class=\"comment\">// 这时候程序也没有阻止小哥哥这种赤裸裸的示爱行为</span></span><br><span class=\"line\"><span class=\"comment\">// 甚至可以改成布尔值</span></span><br><span class=\"line\">goodsName = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// -----------------</span></span><br><span class=\"line\"><span class=\"comment\">// 可以想想刚失恋的小哥哥，把这个变量提交给后端的接口</span></span><br><span class=\"line\"><span class=\"comment\">// 最后给产品发现了</span></span><br><span class=\"line\"><span class=\"comment\">// 后端调查发现是前端提交的数据类型错误</span></span><br><span class=\"line\"><span class=\"comment\">// 顺利摔锅给前端</span></span><br><span class=\"line\"><span class=\"comment\">// 从此小哥哥就步入了人生的低谷，情场事业双失😔</span></span><br></pre></td></tr></table></figure></p>\n<p>然而如果这时候这位程序员小哥哥用上了TypeScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同上也先定义一个变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> goodsName: string = <span class=\"string\">'apple'</span> <span class=\"comment\">// 看看有什么不同？没错，就是多了个string</span></span><br><span class=\"line\">goodsName = <span class=\"number\">520</span> <span class=\"comment\">//这时候就会有一条红线在变量下方</span></span><br><span class=\"line\"><span class=\"comment\">// Error, number不是string类型</span></span><br><span class=\"line\"><span class=\"comment\">// -----------------</span></span><br><span class=\"line\"><span class=\"comment\">// 看到这条提示的红线，小哥哥也终于意识到了</span></span><br><span class=\"line\"><span class=\"comment\">// 他的爱情也像这条红线那样</span></span><br><span class=\"line\"><span class=\"comment\">// 已经到了高亮的结束边缘</span></span><br><span class=\"line\"><span class=\"comment\">// 最后小哥哥看着那条红线</span></span><br><span class=\"line\"><span class=\"comment\">// 突然对爱情重拾希望，然后不顾红线的错误提示，提交给后端</span></span><br><span class=\"line\"><span class=\"comment\">// 结局同上</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些踩过的坑\"><a href=\"#一些踩过的坑\" class=\"headerlink\" title=\"一些踩过的坑\"></a>一些踩过的坑</h2><h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  width?: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任意数量的其它属性\"><a href=\"#任意数量的其它属性\" class=\"headerlink\" title=\"任意数量的其它属性\"></a>任意数量的其它属性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\"> [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">    <span class=\"built_in\">readonly</span> x: number;</span><br><span class=\"line\">    <span class=\"built_in\">readonly</span> y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> p1: Point = &#123; x: 10, y: 20 &#125;;</span><br><span class=\"line\">p1.x = 5; // error!</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方法1</span><br><span class=\"line\"><span class=\"keyword\">function</span> add(x: number, y: number): number &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//方法2</span><br><span class=\"line\"><span class=\"built_in\">let</span> myAdd = <span class=\"keyword\">function</span>(x: number, y: number): number &#123; <span class=\"built_in\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"把类当做接口使用\"><a href=\"#把类当做接口使用\" class=\"headerlink\" title=\"把类当做接口使用\"></a>把类当做接口使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    x: number;</span><br><span class=\"line\">    y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Point3d extends Point &#123;</span><br><span class=\"line\">    z: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> point3d: Point3d = &#123;x: 1, y: 2, z: 3&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>提示真的很爽</li>\n<li>会增加写类型的时间</li>\n<li>大型项目来说上面花的时间是值得的，后期维护时间会变少</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>‘TypeScript’-顾名思义，就是有Type的Script<br>","more":"</p>\n<hr>\n<p>那么它和没有Type的Script有什么不一样呢，例如某Java前缀的Script<br>举个例子：实际开发需求中我们要定义一个商品名称的变量为goodsName(<font color=\"red\">ps:众所周知商品名称都必须是要字符串的</font>)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js中定义一个变量,先赋值一个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> goodsName = <span class=\"string\">'apple'</span> <span class=\"comment\">// 很好，看起来都一起正常</span></span><br><span class=\"line\"><span class=\"comment\">// 然鹅，一位刚失恋的程序员哥哥，不小心把它改成一个数字（说笑，程序员哪会有女朋友）</span></span><br><span class=\"line\">goodsName = <span class=\"number\">520</span> <span class=\"comment\">// 这时候程序也没有阻止小哥哥这种赤裸裸的示爱行为</span></span><br><span class=\"line\"><span class=\"comment\">// 甚至可以改成布尔值</span></span><br><span class=\"line\">goodsName = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// -----------------</span></span><br><span class=\"line\"><span class=\"comment\">// 可以想想刚失恋的小哥哥，把这个变量提交给后端的接口</span></span><br><span class=\"line\"><span class=\"comment\">// 最后给产品发现了</span></span><br><span class=\"line\"><span class=\"comment\">// 后端调查发现是前端提交的数据类型错误</span></span><br><span class=\"line\"><span class=\"comment\">// 顺利摔锅给前端</span></span><br><span class=\"line\"><span class=\"comment\">// 从此小哥哥就步入了人生的低谷，情场事业双失😔</span></span><br></pre></td></tr></table></figure></p>\n<p>然而如果这时候这位程序员小哥哥用上了TypeScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同上也先定义一个变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> goodsName: string = <span class=\"string\">'apple'</span> <span class=\"comment\">// 看看有什么不同？没错，就是多了个string</span></span><br><span class=\"line\">goodsName = <span class=\"number\">520</span> <span class=\"comment\">//这时候就会有一条红线在变量下方</span></span><br><span class=\"line\"><span class=\"comment\">// Error, number不是string类型</span></span><br><span class=\"line\"><span class=\"comment\">// -----------------</span></span><br><span class=\"line\"><span class=\"comment\">// 看到这条提示的红线，小哥哥也终于意识到了</span></span><br><span class=\"line\"><span class=\"comment\">// 他的爱情也像这条红线那样</span></span><br><span class=\"line\"><span class=\"comment\">// 已经到了高亮的结束边缘</span></span><br><span class=\"line\"><span class=\"comment\">// 最后小哥哥看着那条红线</span></span><br><span class=\"line\"><span class=\"comment\">// 突然对爱情重拾希望，然后不顾红线的错误提示，提交给后端</span></span><br><span class=\"line\"><span class=\"comment\">// 结局同上</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些踩过的坑\"><a href=\"#一些踩过的坑\" class=\"headerlink\" title=\"一些踩过的坑\"></a>一些踩过的坑</h2><h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  width?: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任意数量的其它属性\"><a href=\"#任意数量的其它属性\" class=\"headerlink\" title=\"任意数量的其它属性\"></a>任意数量的其它属性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\"> [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">    <span class=\"built_in\">readonly</span> x: number;</span><br><span class=\"line\">    <span class=\"built_in\">readonly</span> y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> p1: Point = &#123; x: 10, y: 20 &#125;;</span><br><span class=\"line\">p1.x = 5; // error!</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方法1</span><br><span class=\"line\"><span class=\"keyword\">function</span> add(x: number, y: number): number &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//方法2</span><br><span class=\"line\"><span class=\"built_in\">let</span> myAdd = <span class=\"keyword\">function</span>(x: number, y: number): number &#123; <span class=\"built_in\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"把类当做接口使用\"><a href=\"#把类当做接口使用\" class=\"headerlink\" title=\"把类当做接口使用\"></a>把类当做接口使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    x: number;</span><br><span class=\"line\">    y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Point3d extends Point &#123;</span><br><span class=\"line\">    z: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> point3d: Point3d = &#123;x: 1, y: 2, z: 3&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>提示真的很爽</li>\n<li>会增加写类型的时间</li>\n<li>大型项目来说上面花的时间是值得的，后期维护时间会变少</li>\n</ol>"},{"title":"export还是module.exports，import还是require，ES6还是CommonJS，是爱❤️还是责任？","date":"2019-10-12T00:09:37.000Z","_content":"故事要从一次错误的编码开始。。。\n<!-- more -->\n# Noded的模块\n众所周知，在上古年度，","source":"_posts/module.md","raw":"---\ntitle: export还是module.exports，import还是require，ES6还是CommonJS，是爱❤️还是责任？\ndate: 2019-10-12 08:09:37\ncategories: 学习笔记\ntags: [JS填坑,填坑]\n---\n故事要从一次错误的编码开始。。。\n<!-- more -->\n# Noded的模块\n众所周知，在上古年度，","slug":"module","published":1,"updated":"2019-10-12T09:17:28.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck43ji52p0000da1jmjgf9q9c","content":"<p>故事要从一次错误的编码开始。。。<br><a id=\"more\"></a></p>\n<h1 id=\"Noded的模块\"><a href=\"#Noded的模块\" class=\"headerlink\" title=\"Noded的模块\"></a>Noded的模块</h1><p>众所周知，在上古年度，</p>\n","site":{"data":{}},"excerpt":"<p>故事要从一次错误的编码开始。。。<br>","more":"</p>\n<h1 id=\"Noded的模块\"><a href=\"#Noded的模块\" class=\"headerlink\" title=\"Noded的模块\"></a>Noded的模块</h1><p>众所周知，在上古年度，</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1nb72u70008dgqi4v3wz7dt","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72uc000fdgqij0ib5u64"},{"post_id":"ck1nb72tx0001dgqi9lkq03ix","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72uf000jdgqi3ef6ovn8"},{"post_id":"ck1nb72u80009dgqixq3tp5s6","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72ug000mdgqit38utttw"},{"post_id":"ck1nb72u00003dgqino7cp19t","category_id":"ck1nb72u9000adgqiydkiv3jg","_id":"ck1nb72uh000qdgqi78eo4nfn"},{"post_id":"ck1nb72ub000edgqi5su3yeec","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72ui000rdgqi4l23qxny"},{"post_id":"ck1nb72ue000idgqi580hzjik","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72ui000udgqi0win71el"},{"post_id":"ck1nb72u50007dgqikx8nj4iw","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72ui000wdgqiejsxbv6k"},{"post_id":"ck1nb72uf000ldgqi8sf3ue4q","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72ui000zdgqitdcep9mm"},{"post_id":"ck1nb72uh000pdgqizbnzp6gd","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck1nb72uj0011dgqiq3k7exkv"},{"post_id":"ck1nb72ua000ddgqii3fkkdx1","category_id":"ck1nb72ug000ndgqiat8day4g","_id":"ck1nb72uj0014dgqicuwxc2x5"},{"post_id":"ck43ji52p0000da1jmjgf9q9c","category_id":"ck1nb72u30005dgqixa3kpwpb","_id":"ck43ji52z0003da1j3pfndlk1"}],"PostTag":[{"post_id":"ck1nb72tx0001dgqi9lkq03ix","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck1nb72ua000cdgqiywcd1rt2"},{"post_id":"ck1nb72u00003dgqino7cp19t","tag_id":"ck1nb72u9000bdgqiejliryx7","_id":"ck1nb72uf000kdgqirito9yzy"},{"post_id":"ck1nb72uh000pdgqizbnzp6gd","tag_id":"ck1nb72uc000hdgqiuz8zu6h5","_id":"ck1nb72ui000tdgqiplzqc46r"},{"post_id":"ck1nb72uh000pdgqizbnzp6gd","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck1nb72ui000vdgqibgwtl3pt"},{"post_id":"ck1nb72u50007dgqikx8nj4iw","tag_id":"ck1nb72uc000hdgqiuz8zu6h5","_id":"ck1nb72ui000xdgqiygy49kqv"},{"post_id":"ck1nb72u50007dgqikx8nj4iw","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck1nb72uj0010dgqiifqdgnqe"},{"post_id":"ck1nb72u70008dgqi4v3wz7dt","tag_id":"ck1nb72ui000sdgqicuwnhdxh","_id":"ck1nb72uj0012dgqi7mv38vyp"},{"post_id":"ck1nb72u80009dgqixq3tp5s6","tag_id":"ck1nb72uc000hdgqiuz8zu6h5","_id":"ck1nb72uj0015dgqi1oe8tdv4"},{"post_id":"ck1nb72u80009dgqixq3tp5s6","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck1nb72uk0016dgqiephlglxi"},{"post_id":"ck1nb72ua000ddgqii3fkkdx1","tag_id":"ck1nb72uj0013dgqip7nyr6bf","_id":"ck1nb72uk0018dgqii10kg9yj"},{"post_id":"ck1nb72ub000edgqi5su3yeec","tag_id":"ck1nb72uc000hdgqiuz8zu6h5","_id":"ck1nb72uk001adgqicmxp8bqn"},{"post_id":"ck1nb72ub000edgqi5su3yeec","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck1nb72uk001bdgqifd314hnf"},{"post_id":"ck1nb72ue000idgqi580hzjik","tag_id":"ck1nb72uk0019dgqieg4h8xhv","_id":"ck1nb72ul001ddgqi83m4me7y"},{"post_id":"ck1nb72ue000idgqi580hzjik","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck1nb72ul001edgqippwz2qy8"},{"post_id":"ck1nb72uf000ldgqi8sf3ue4q","tag_id":"ck1nb72uk001cdgqi073efn72","_id":"ck1nb72ul001gdgqiswt4536i"},{"post_id":"ck1nb72uf000ldgqi8sf3ue4q","tag_id":"ck1nb72ul001fdgqim5so10re","_id":"ck1nb72ul001hdgqiaar471nk"},{"post_id":"ck43ji52p0000da1jmjgf9q9c","tag_id":"ck1nb72uc000hdgqiuz8zu6h5","_id":"ck43ji52y0001da1jyudzgby2"},{"post_id":"ck43ji52p0000da1jmjgf9q9c","tag_id":"ck1nb72u50006dgqihgo07ovs","_id":"ck43ji52z0002da1jykyik5uz"}],"Tag":[{"name":"填坑","_id":"ck1nb72u50006dgqihgo07ovs"},{"name":"第一次","_id":"ck1nb72u9000bdgqiejliryx7"},{"name":"JS填坑","_id":"ck1nb72uc000hdgqiuz8zu6h5"},{"name":"神书推荐","_id":"ck1nb72ui000sdgqicuwnhdxh"},{"name":"案例","_id":"ck1nb72uj0013dgqip7nyr6bf"},{"name":"微信小程序","_id":"ck1nb72uk0019dgqieg4h8xhv"},{"name":"面试","_id":"ck1nb72uk001cdgqi073efn72"},{"name":"题目","_id":"ck1nb72ul001fdgqim5so10re"}]}}