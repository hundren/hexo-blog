{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/avatar.JPG","path":"avatar.JPG","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/wei.jpg","path":"wei.jpg","modified":1,"renderable":0},{"_id":"source/zhi.jpg","path":"zhi.jpg","modified":1,"renderable":0},{"_id":"source/shake.mp3","path":"shake.mp3","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/avatar.JPG","hash":"511b1dfbb04b2ff656dab5d57883e6e0a79f2b48","modified":1491488352891},{"_id":"source/favicon.ico","hash":"ee05c2cb5fdea8483485183cef0bf9183e7af9d1","modified":1491488352895},{"_id":"source/harlem-shake-style.css","hash":"68ac63697f3188193eeb28028a71a9380d5b02a9","modified":1491498669530},{"_id":"source/wei.jpg","hash":"4e985de37062ea5fe882c4b145e393fed2ab7440","modified":1491488352906},{"_id":"source/zhi.jpg","hash":"bdca6dd9e6d575a66ddbaca031d1fc311a679793","modified":1491488352907},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1491488352920},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1491488352921},{"_id":"themes/next/.gitignore","hash":"aa566c5c05eed226438b975aafc4f5f5713e30ec","modified":1491488352925},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1491488352925},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1491488352926},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1491488352926},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1491488352927},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1491488352928},{"_id":"themes/next/_config.yml","hash":"599c08ca8f7137c061a09e84455f5b15f325da2d","modified":1502897814315},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1491488352930},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1491488352930},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1491488353192},{"_id":"source/_posts/hello-world.md","hash":"389a46a75219fa48f9283970709f5c6fb283d66e","modified":1491488352889},{"_id":"source/_posts/javascript-model.md","hash":"c797ba2c719b6e3b1ee0fc10719dc09787948f50","modified":1502899096911},{"_id":"source/_posts/js-note.md","hash":"5cf91adf2e40c8e14988fdff9916f0385b9a041e","modified":1495032698889},{"_id":"source/_posts/test-list.md","hash":"3d0c1723d5bc410df6e78e0916bb101ff679b079","modified":1502896334745},{"_id":"source/_posts/wehchat-small.md","hash":"246a136c9d5f0913c7ce8315a94a0f5bb98a0722","modified":1502804878627},{"_id":"source/about/index.html","hash":"40f75bd612817c334b872a6d0e73057709e2bd17","modified":1502896115910},{"_id":"source/categories/index.md","hash":"3bf4fbb2ab94c548e75921e3a0e91209f8150bb8","modified":1491488352892},{"_id":"source/demo/3366.html","hash":"c9b6ea97763d609cf693c16a0ee3b626959730f6","modified":1491488352893},{"_id":"source/tags/index.md","hash":"3651513a28ea75dbd600b2abb37fc61ae813432f","modified":1491488352904},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1491488352922},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1491488352923},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1491488352932},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1491488352933},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1491488352934},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1491488352935},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1491488352935},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1491488352937},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1491488352938},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1491488352938},{"_id":"themes/next/languages/zh-Hans.yml","hash":"e81eaac45f7990658676c322c92283a6299433d3","modified":1491491177956},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1491488352940},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1491488352940},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1491488352941},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1491488353188},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1491488353189},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1491488353189},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1491488353190},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1491488353191},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1491488353191},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1491488353193},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1491488353466},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1491488353465},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1491488353467},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353324},{"_id":"source/shake.mp3","hash":"a94719322a56bb60e6262484a84895f7190f7c98","modified":1491488352903},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1491488352942},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1491488352943},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1491488352944},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1491488352946},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1491488352947},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4281c05438377c8003082d7637f1b37419010702","modified":1502899423863},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1491488352949},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f80d5a3c9c0ad7b1b4f872e24c779c00fbdc61a7","modified":1491498796249},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1491488352951},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1491488352953},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1491488352953},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1491488352954},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1491488353170},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1491488353170},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1491488353171},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1491488353187},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1491488353194},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1491488353195},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1491488353196},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1491488353323},{"_id":"themes/next/source/images/avatar.jpg","hash":"511b1dfbb04b2ff656dab5d57883e6e0a79f2b48","modified":1491488353326},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1491488353327},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1491488353328},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1491488353329},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1491488353331},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1491488353332},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1491488353333},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1491488353334},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491488353335},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491488353335},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1491488353336},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1491488353337},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491488353338},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353173},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353173},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353289},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353289},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353293},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353320},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491488353322},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1491488352952},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1491488352955},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1491488352956},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1491488352957},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1491488353165},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1491488353166},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1491488353167},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1491488353169},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1491488353172},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1491488353174},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1491488353175},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"21ecf775b55255679e7e45cf8616e3b7283c3dd7","modified":1502897972145},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1491488353184},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1491488353185},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1491488353185},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1491488353186},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1491488353288},{"_id":"themes/next/source/css/_my/harlem-shake-style.css","hash":"68ac63697f3188193eeb28028a71a9380d5b02a9","modified":1491488353294},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1491488353290},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1491488353293},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1491488353319},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1491488353321},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dbb2bec92c49cade1925f03151858bcc607a0cef","modified":1502897274542},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1491488353339},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1491488353340},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1491488353341},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1491488353341},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1491488353343},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1491488353345},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1491488353346},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1491488353395},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1491488353396},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1491488353397},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1491488353399},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1491488353404},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1491488353406},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1491488353404},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1491488353407},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1491488353407},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1491488353437},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1491488353442},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1491488353443},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1491488353443},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1491488353445},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1491488353446},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1491488353447},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1491488353452},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1491488353453},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1491488353461},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1491488353463},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1491488353464},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1491488353440},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1491488353176},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1491488353177},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1491488353178},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1491488353179},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1491488353180},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1491488353180},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1491488353183},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1491488353183},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"0bcd4136c70f4ba8a7d49ab32aabd94fbae61907","modified":1502897939686},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1491488353198},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1491488353199},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1491488353200},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1491488353201},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1491488353244},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1491488353263},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1491488353281},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1491488353282},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1491488353283},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1491488353286},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1491488353286},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1491488353287},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1491488353296},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1491488353297},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1491488353297},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1491488353300},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1491488353301},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491488353302},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1491488353304},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1491488353308},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1491488353309},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1491488353310},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491488353311},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1491488353312},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1491488353313},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1491488353314},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1491488353315},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1491488353316},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1491488353317},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1491488353317},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1491488353318},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1491488353344},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491488353379},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491488353379},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491488353382},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491488353384},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491488353384},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491488353385},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1491488353392},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1491488353393},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1491488353394},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1491488353401},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491488353402},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1491488353410},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1491488353411},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1491488353413},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491488353435},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1491488353450},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1491488353451},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491488353417},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491488353419},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491488353434},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1491488353459},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1491488353202},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1491488353204},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1491488353203},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1491488353204},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1491488353206},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1491488353207},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1491488353208},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1491488353209},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1491488353210},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1491488353210},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1491488353212},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1491488353213},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1491488353245},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1491488353245},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1491488353248},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1491488353249},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1491488353250},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1491488353250},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1491488353251},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1491488353252},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1491488353253},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1491488353253},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1491488353254},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1491488353255},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1491488353256},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1491488353257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1491488353258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1491488353259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1491488353260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1491488353260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1491488353261},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1491488353262},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1491488353262},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1491488353264},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1491488353265},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1491488353267},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1491488353268},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1491488353269},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1491488353274},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1491488353276},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1491488353277},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1491488353279},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1491488353280},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1491488353305},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1491488353306},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1491488353312},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491488353386},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1491488353387},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1491488353388},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1491488353389},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1491488353389},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1491488353391},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491488353431},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1491488353424},{"_id":"themes/next/layout/_partials/shake.mp3","hash":"a7df9ccdf78bf1877071922e999b83076527ce35","modified":1491488353162},{"_id":"public/harlem-shake-style.css","hash":"afe2162cc83d52611dcb6edd18d3572c30d38aef","modified":1502899577681},{"_id":"public/search.xml","hash":"1efbb40e84d32ab6b622642bad3a2feb4c17e386","modified":1502899577727},{"_id":"public/categories/index.html","hash":"a8735f217d7a147142f8ae9816817c2b4f6c417c","modified":1502899577737},{"_id":"public/about/index.html","hash":"77b0b2f234c4618fe34f7ff9e22f5e552c230b3b","modified":1502899577737},{"_id":"public/demo/3366.html","hash":"706fbfaaf19ca2ac3e71c3a8c8bb7cf2c772ee91","modified":1502899577737},{"_id":"public/tags/index.html","hash":"62db9c6d4d0beec810337446a0d0472fb8f715aa","modified":1502899577737},{"_id":"public/2017/04/06/hello-world/index.html","hash":"8b9fe190cc79a03f269b91baaf77f8404de9bd23","modified":1502899577737},{"_id":"public/2017/05/10/js-note/index.html","hash":"cb6cd6ff2eb3b8a16c6b681fc0a467f834ae5142","modified":1502899577737},{"_id":"public/2017/06/21/wehchat-small/index.html","hash":"f29e2a6ee74770931d496ae7a4ac516b28a320fe","modified":1502899577737},{"_id":"public/2017/06/30/test-list/index.html","hash":"8c4de42e2f1053c57ca5395ad125fab3394206f7","modified":1502899577737},{"_id":"public/2017/08/16/javascript-model/index.html","hash":"0448500ef00bad29ea4790594953d4893693ae97","modified":1502899577737},{"_id":"public/archives/index.html","hash":"9c696177ef4804cd28739f523142e7e5c8e0c783","modified":1502899577738},{"_id":"public/archives/2017/index.html","hash":"4d2ff47b9bb3ee476e4d685cabfb852a8f14d151","modified":1502899577738},{"_id":"public/archives/2017/04/index.html","hash":"6b453b0d5720d0f76916b148e077f801ef11a47a","modified":1502899577738},{"_id":"public/archives/2017/05/index.html","hash":"3d5f5304773d5be88f5953a087d3b1092815c943","modified":1502899577738},{"_id":"public/archives/2017/06/index.html","hash":"41432e9168f7b71a80ed86a1e539bd369e7c1bd4","modified":1502899577739},{"_id":"public/archives/2017/08/index.html","hash":"787dcdd14c5f71b5970bb6b5d9000f55ab2080fc","modified":1502899577739},{"_id":"public/categories/文章/index.html","hash":"ba3a71c6a9af1d63551cb1bf3a1c9d026631efa9","modified":1502899577739},{"_id":"public/categories/学习笔记/index.html","hash":"46bf0a2087220a89eef541b02e14fc1acf614142","modified":1502899577739},{"_id":"public/index.html","hash":"de9d73a9bfe90c00e859e67e160c877d9111a3d8","modified":1502899577739},{"_id":"public/tags/第一次/index.html","hash":"5ebe4e7dfc95e5d74331bb487dbb2d6c2f9c2513","modified":1502899577739},{"_id":"public/tags/JS填坑/index.html","hash":"4d33524c4a7474abc6305032775eabe85f0c6225","modified":1502899577739},{"_id":"public/tags/填坑/index.html","hash":"4fadd64cf556f8196e8bf74cbb9be9b0623df50f","modified":1502899577739},{"_id":"public/tags/面试/index.html","hash":"ce63aaa3936d17760d856ecfb431ab79ff1ac7d5","modified":1502899577739},{"_id":"public/tags/题目/index.html","hash":"a57f9b10596a8a3220b87b7a94279f1e1837ea54","modified":1502899577740},{"_id":"public/tags/神书推荐/index.html","hash":"1be9e3c7c14cfaf9ee5af6fbd6ae5be448d52966","modified":1502899577740},{"_id":"public/tags/微信小程序/index.html","hash":"a57de569605bb9d6995d7731720d9c570125ce29","modified":1502899577741},{"_id":"public/avatar.JPG","hash":"511b1dfbb04b2ff656dab5d57883e6e0a79f2b48","modified":1502899577830},{"_id":"public/favicon.ico","hash":"ee05c2cb5fdea8483485183cef0bf9183e7af9d1","modified":1502899577830},{"_id":"public/wei.jpg","hash":"4e985de37062ea5fe882c4b145e393fed2ab7440","modified":1502899577830},{"_id":"public/zhi.jpg","hash":"bdca6dd9e6d575a66ddbaca031d1fc311a679793","modified":1502899577830},{"_id":"public/images/avatar.jpg","hash":"511b1dfbb04b2ff656dab5d57883e6e0a79f2b48","modified":1502899577830},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1502899577830},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1502899577831},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1502899577831},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1502899577831},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1502899577831},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1502899577831},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1502899577831},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502899577831},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502899577831},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1502899577831},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1502899577832},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502899577832},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1502899577832},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1502899577832},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502899577832},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502899577832},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502899577832},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502899577832},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502899577832},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502899577832},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1502899577832},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1502899577833},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502899577833},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1502899580263},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1502899580273},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1502899580275},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1502899580298},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502899580298},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502899580298},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1502899580299},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1502899580299},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502899580299},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1502899580299},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1502899580299},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1502899580299},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1502899580299},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1502899580300},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1502899580300},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1502899580300},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502899580300},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502899580300},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1502899580300},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502899580300},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1502899580300},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502899580300},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502899580300},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502899580300},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502899580301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502899580301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502899580301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502899580301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502899580301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502899580301},{"_id":"public/css/main.css","hash":"7c4017539a32fcb795742887de1e86aff5c3105f","modified":1502899580301},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502899580301},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502899580301},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502899580301},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502899580302},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502899580302},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502899580302},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1502899580302},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1502899580302},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502899580302},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1502899580302},{"_id":"public/shake.mp3","hash":"a94719322a56bb60e6262484a84895f7190f7c98","modified":1502899580319},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1502899580514}],"Category":[{"name":"文章","_id":"cj6f7loxo0005qwx3cewvghwl"},{"name":"学习笔记","_id":"cj6f7loy7000cqwx3eg1l48op"}],"Data":[],"Page":[{"_content":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}","source":"harlem-shake-style.css","raw":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}","date":"2017-04-06T17:11:09.530Z","updated":"2017-04-06T17:11:09.530Z","path":"harlem-shake-style.css","layout":"false","title":"","comments":1,"_id":"cj6f7lou30000qwx362lpisc6","content":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}","site":{"data":{}},"excerpt":"","more":"/* .im_drunk, .im_baked, .im_trippin, .im_blown */\n\n.mw-strobe_light {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 100000;\n  background-color: rgba(250,250,250,0.8);\n  display: block;\n}\n\n.mw-harlem_shake_me {\n  transition: all 0.8s ease-in-out;\n  -moz-transition: all 0.8s ease-in-out;\n  -webkit-transition: all 0.8s ease-in-out;\n  -o-transition: all 0.8s ease-in-out;\n  -ms-transition: all 0.8s ease-in-out;\n\n  animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -webkit-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  -ms-animation: spin 1s infinite linear;\n}\n\n.mw-harlem_shake_slow {\n   transition: all 3.2s ease-in-out;\n  -moz-transition: all 3.2s ease-in-out;\n  -webkit-transition: all 3.2s ease-in-out;\n  -o-transition: all 3.2s ease-in-out;\n  -ms-transition: all 3.2s ease-in-out;\n\n  animation: spin 4s infinite linear;\n  -moz-animation: spin 4s infinite linear;\n  -webkit-animation: spin 4s infinite linear;\n  -o-animation: spin 4s infinite linear;\n  -ms-animation: spin 4s infinite linear;\n}\n\n/*\nAnimate.css - http://daneden.me/animate\nLicensed under the ☺ license (http://licence.visualidiot.com/)\nBut we have it modified for our use.\n*/\nbody {\n  -webkit-backface-visibility: hidden;\n}\n\n.mw-harlem_shake_me {\n  -webkit-animation-duration: .4s;\n     -moz-animation-duration: .4s;\n       -o-animation-duration: .4s;\n          animation-duration: .4s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n.mw-harlem_shake_slow {\n  -webkit-animation-duration: 1.6s;\n     -moz-animation-duration: 1.6s;\n       -o-animation-duration: 1.6s;\n          animation-duration: 1.6s;\n  -webkit-animation-fill-mode: both;\n     -moz-animation-fill-mode: both;\n       -o-animation-fill-mode: both;\n          animation-fill-mode: both;\n}\n\n\n.flash, .mw-strobe_light {\n  -webkit-animation-name: flash;\n  -moz-animation-name: flash;\n  -o-animation-name: flash;\n  animation-name: flash;\n}\n\n\n\n@-webkit-keyframes shake {\n  0%, 100% {-webkit-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-webkit-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-webkit-transform: translateX(10px);}\n}\n\n@-moz-keyframes shake {\n  0%, 100% {-moz-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-moz-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-moz-transform: translateX(10px);}\n}\n\n@-o-keyframes shake {\n  0%, 100% {-o-transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {-o-transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {-o-transform: translateX(10px);}\n}\n\n@keyframes shake {\n  0%, 100% {transform: translateX(0);}\n  10%, 30%, 50%, 70%, 90% {transform: translateX(-10px);}\n  20%, 40%, 60%, 80% {transform: translateX(10px);}\n}\n\n.shake, .im_baked {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  animation-name: shake;\n}\n\n\n\n\n.swing, .im_drunk {\n  -webkit-transform-origin: top center;\n  -moz-transform-origin: top center;\n  -o-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  -moz-animation-name: swing;\n  -o-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes wobble {\n  0% { -webkit-transform: translateX(0%); }\n  15% { -webkit-transform: translateX(-15%) rotate(-4deg); }\n  30% { -webkit-transform: translateX(12%) rotate(3deg); }\n  45% { -webkit-transform: translateX(-9%) rotate(-2deg); }\n  60% { -webkit-transform: translateX(6%) rotate(2deg); }\n  75% { -webkit-transform: translateX(-3%) rotate(-1deg); }\n  100% { -webkit-transform: translateX(0%); }\n}\n\n@-moz-keyframes wobble {\n  0% { -moz-transform: translateX(0%); }\n  15% { -moz-transform: translateX(-15%) rotate(-5deg); }\n  30% { -moz-transform: translateX(12%) rotate(3deg); }\n  45% { -moz-transform: translateX(-9%) rotate(-3deg); }\n  60% { -moz-transform: translateX(6%) rotate(2deg); }\n  75% { -moz-transform: translateX(-3%) rotate(-1deg); }\n  100% { -moz-transform: translateX(0%); }\n}\n\n@-o-keyframes wobble {\n  0% { -o-transform: translateX(0%); }\n  15% { -o-transform: translateX(-15%) rotate(-5deg); }\n  30% { -o-transform: translateX(12%) rotate(3deg); }\n  45% { -o-transform: translateX(-9%) rotate(-3deg); }\n  60% { -o-transform: translateX(6%) rotate(2deg); }\n  75% { -o-transform: translateX(-3%) rotate(-1deg); }\n  100% { -o-transform: translateX(0%); }\n}\n\n@keyframes wobble {\n  0% { transform: translateX(0%); }`\n  15% { transform: translateX(-15%) rotate(-5deg); }\n  30% { transform: translateX(12%) rotate(3deg); }\n  45% { transform: translateX(-9%) rotate(-3deg); }\n  60% { transform: translateX(6%) rotate(2deg); }\n  75% { transform: translateX(-3%) rotate(-1deg); }\n  100% { transform: translateX(0%); }\n}\n\n\n\n\n.wobble, .im_first {\n  -webkit-animation-name: wobble;\n  -moz-animation-name: wobble;\n  -o-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes pulse {\n    0% { -webkit-transform: scale(1); } \n  50% { -webkit-transform: scale(1.1); }\n    100% { -webkit-transform: scale(1); }\n}\n@-moz-keyframes pulse {\n    0% { -moz-transform: scale(1); }  \n  50% { -moz-transform: scale(1.1); }\n    100% { -moz-transform: scale(1); }\n}\n@-o-keyframes pulse {\n    0% { -o-transform: scale(1); }  \n  50% { -o-transform: scale(1.1); }\n    100% { -o-transform: scale(1); }\n}\n@keyframes pulse {\n    0% { transform: scale(1); } \n  50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.pulse, .im_blown {\n  -webkit-animation-name: pulse;\n  -moz-animation-name: pulse;\n  -o-animation-name: pulse;\n  animation-name: pulse;\n}\n\n\n\n\n@-webkit-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -webkit-transform: scale(1.05);\n  }\n  \n  70% {\n    -webkit-transform: scale(.9);\n  }\n  \n  100% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@-moz-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -moz-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -moz-transform: scale(1.05);\n  }\n  \n  70% {\n    -moz-transform: scale(.9);\n  }\n  \n  100% {\n    -moz-transform: scale(1);\n  }\n}\n\n@-o-keyframes bounceIn {\n  0% {\n    opacity: 0;\n    -o-transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    -o-transform: scale(1.05);\n  }\n  \n  70% {\n    -o-transform: scale(.9);\n  }\n  \n  100% {\n    -o-transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(.3);\n  }\n  \n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  \n  70% {\n    transform: scale(.9);\n  }\n  \n  100% {\n    transform: scale(1);\n  }\n}\n\n.bounceIn, .im_trippin {\n  -webkit-animation-name: bounceIn;\n  -moz-animation-name: bounceIn;\n  -o-animation-name: bounceIn;\n  animation-name: bounceIn;\n}"},{"_content":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup(你好)\",\"A Cup(我叫Hugo)\",\"B Cup(我是一名)\",\"C Cup(前端工程师)\",\"D Cup(兼业余H5游戏爱好开发者)\",\"E Cup(后台语言技能树:nodejs)\",\"F Cup(有微信小程序开发经验)\",\"G Cup(后面有彩蛋欢迎继续挑战)\",\"H Cup(再后面有我的邮箱地址,加油)\",\"I Cup(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n<div class=\"label\">现在的我: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    \n\t<div id=\"timer\">剩余时间:<div>\n    </body>\n    </html>","source":"about/index.html","raw":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup(你好)\",\"A Cup(我叫Hugo)\",\"B Cup(我是一名)\",\"C Cup(前端工程师)\",\"D Cup(兼业余H5游戏爱好开发者)\",\"E Cup(后台语言技能树:nodejs)\",\"F Cup(有微信小程序开发经验)\",\"G Cup(后面有彩蛋欢迎继续挑战)\",\"H Cup(再后面有我的邮箱地址,加油)\",\"I Cup(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n<div class=\"label\">现在的我: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    \n\t<div id=\"timer\">剩余时间:<div>\n    </body>\n    </html>","date":"2017-08-16T15:08:35.910Z","updated":"2017-08-16T15:08:35.910Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cj6f7loxc0002qwx3y7egg4k8","content":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup(你好)\",\"A Cup(我叫Hugo)\",\"B Cup(我是一名)\",\"C Cup(前端工程师)\",\"D Cup(兼业余H5游戏爱好开发者)\",\"E Cup(后台语言技能树:nodejs)\",\"F Cup(有微信小程序开发经验)\",\"G Cup(后面有彩蛋欢迎继续挑战)\",\"H Cup(再后面有我的邮箱地址,加油)\",\"I Cup(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onload=\"init();\">\n<div class=\"label\">现在的我: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br>\n    \n\t<div id=\"timer\">剩余时间:<div>\n    </div></div></body>\n    </html>","site":{"data":{}},"excerpt":"","more":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 612px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n.back-to-top,.sidebar-toggle{display: none}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup(你好)\",\"A Cup(我叫Hugo)\",\"B Cup(我是一名)\",\"C Cup(前端工程师)\",\"D Cup(兼业余H5游戏爱好开发者)\",\"E Cup(后台语言技能树:nodejs)\",\"F Cup(有微信小程序开发经验)\",\"G Cup(后面有彩蛋欢迎继续挑战)\",\"H Cup(再后面有我的邮箱地址,加油)\",\"I Cup(个人爱好)\",\"J Cup(编程,游戏,编程游戏,量子物理)\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱hundren@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\n// function $(id) {\n// \treturn document.getElementById(id);\n// }\n\nfunction updateStat() {\n\n\t document.getElementById('tries').innerHTML = tries;\n\t document.getElementById('score').innerHTML = score[scorecount];\n\t document.getElementById('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n<div class=\"label\">现在的我: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>把球弄大,了解我更多</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    \n\t<div id=\"timer\">剩余时间:<div>\n    </body>\n    </html>"},{"title":"categories","date":"2017-03-14T16:28:38.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-15 00:28:38\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-04-06T14:19:12.892Z","path":"categories/index.html","layout":"page","_id":"cj6f7loxm0004qwx35n8rubpy","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 650px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup\",\"A Cup\",\"B Cup\",\"C Cup\",\"D Cup\",\"E Cup\",\"F Cup\",\"G Cup\",\"H Cup\",\"I Cup\",\"J Cup\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱1368306348@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\nfunction $(id) {\n\treturn document.getElementById(id);\n}\n\nfunction updateStat() {\n\n\t$('tries').innerHTML = tries;\n\t$('score').innerHTML = score[scorecount];\n\t$('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>看你能把那个球搞多大</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    <div class=\"label\">现在的级数: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div id=\"timer\">剩余时间:<div>\n    </body>\n    </html>","source":"demo/3366.html","raw":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 650px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup\",\"A Cup\",\"B Cup\",\"C Cup\",\"D Cup\",\"E Cup\",\"F Cup\",\"G Cup\",\"H Cup\",\"I Cup\",\"J Cup\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱1368306348@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\nfunction $(id) {\n\treturn document.getElementById(id);\n}\n\nfunction updateStat() {\n\n\t$('tries').innerHTML = tries;\n\t$('score').innerHTML = score[scorecount];\n\t$('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>看你能把那个球搞多大</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    <div class=\"label\">现在的级数: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div id=\"timer\">剩余时间:<div>\n    </body>\n    </html>","date":"2017-04-06T14:19:12.893Z","updated":"2017-04-06T14:19:12.893Z","path":"demo/3366.html","title":"","comments":1,"layout":"page","_id":"cj6f7loxv0008qwx36s5pqijv","content":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 650px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup\",\"A Cup\",\"B Cup\",\"C Cup\",\"D Cup\",\"E Cup\",\"F Cup\",\"G Cup\",\"H Cup\",\"I Cup\",\"J Cup\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱1368306348@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\nfunction $(id) {\n\treturn document.getElementById(id);\n}\n\nfunction updateStat() {\n\n\t$('tries').innerHTML = tries;\n\t$('score').innerHTML = score[scorecount];\n\t$('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onload=\"init();\">\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>看你能把那个球搞多大</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br>\n    <div class=\"label\">现在的级数: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div id=\"timer\">剩余时间:<div>\n    </div></div></body>\n    </html>","site":{"data":{}},"excerpt":"","more":"<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<title>Make it big</title>\n<style>\n\n*{\nfont-family:Arial;\n}\n\tbody {\n\t\t\t\tbackground: white;\n\t\t\t}\n\n#canvas,div{\n                cursor: crosshair;\n\t\t\t\tleft: 0;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 0;\n}\n.label{\n\tmargin-left: 50px;\n}\n#timer{\n\tposition: absolute;\n\ttop: 70px;\n\tleft: 650px;\n}\nh2{\n\tmargin-left: 50px;\n\tcolor: red;\n}\n</style>\n<script type=\"text/javascript\">\nvar ctx;\n\n// our ball object holder\nvar balls = new Array();\n\n// mouse position cache\nvar mouse = {x:-100, y:-100};\n\nvar lifehigh=350;    //y.100 + rect.250 =350\nvar r=10;            //the r of the main circle\nvar r2=r;            //record the cup of the ball \nvar inmotion;  //judge the mouse if in the  centre ball\nvar inmotion2; //judge the mouse if in the enemy ball\nvar count=0;         //use to count the onclick\nvar die=0;           //write down which ball will die\nvar tries = 0;\nvar score = new Array(\"AA Cup\",\"A Cup\",\"B Cup\",\"C Cup\",\"D Cup\",\"E Cup\",\"F Cup\",\"G Cup\",\"H Cup\",\"I Cup\",\"J Cup\",\"我也不知道还有没有这种杯的了\",\"看来某君的毅力不错\",\"该不会还能再大吧\",\"哇，你太大了，我受不了\",\"不要啊，放个这个球吧\",\"你不是人\",\"你已经超神了\",\"说实话，我想不到会有人这么无聊玩这么久\",\"但是我我觉得再大点的话可能会爆的哦\",\"其实我不知道你玩的时候有没有看这些字，但当你看到 这里的时候，我会告诉你我是在故意分你神的吗哈哈\",\"呕血数组都不够长了 \",\"再来一发吧，有惊喜\",\"游戏的版本号是ver.1.26034,作者：Biscuits_39\",\"记住你这份毅力吧，我相信没什么事能难道你的了，如果能按F5再成功挑战一次的话\",\"开玩笑的你继续挑战，把结果给我的邮箱吧\",\"邮箱1368306348@qq.com\",\"哈哈如果你刚才忘记记下我的邮箱的话，可能又要重新打过了\",\"除非是某君看源代码的，谢绝骚扰\",\"来吧，挤爆框吧\",\"之后是测试代码\",\"d\",\"dd\",\"dd\",\"再然后就没然后了，你自己undifind去吧\");\nvar scorecount=0;\nvar max_scorecount=0;\nvar tt=21;\n\nfunction $(id) {\n\treturn document.getElementById(id);\n}\n\nfunction updateStat() {\n\n\t$('tries').innerHTML = tries;\n\t$('score').innerHTML = score[scorecount];\n\t$('max_score').innerHTML = score[max_scorecount];\n}\n    \nfunction distsq(x1,y1,x2,y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n\nfunction Ball(x, y, xsee, ysee) {\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xsee = xsee;\n\tthis.ysee = ysee;\n\n\tthis.move = function() {\n\n\t\tif(this.x > 665) {\n\t\t\tthis.x = 665;\n\t\t\tthis.xsee = -this.xsee;\n\t\t} else if(this.x < 61) {\n\t\t\tthis.x = 61;\n\t\t\tthis.xsee = -this.xsee;\n\t\t}\n\n\t\tif(this.y > 482) {\n\t\t\tthis.y = 482;\n\t\t\tthis.ysee = -this.ysee;\n\t\t} else if(this.y < 62) {\n\t\t\tthis.y = 62;\n\t\t\tthis.ysee = -this.ysee;\n\t\t}\n\n\t\n\t\tthis.x+= this.xsee;\n\t\tthis.y+= this.ysee;\n\n\t\tctx.beginPath();\n\t\tctx.arc(this.x, this.y, 12, 0, 2*Math.PI, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t}\n}\nfunction createBall() {\n\tvar k; //the enemy and the centre ball make the line's k\n\tvar vetrilx;\n\tif(count==4){\n\t    if(Math.random()*2>1){\n\t\tx =  62;\n\t    }\n\t    else{\n\t\tx=670;\n\t    }\n\t\ty =  Math.random()*445-62;\n\t\tk=Math.atan2(y-270,x-400);\n\t\tvetrilx=Math.random() * 3.45 - 2.65;\n\t\tballs.push(new Ball(x, y, vetrilx, vetrilx*Math.tan(k)));\n\t\tcount=0;\n\n\t} \t\n}\n\n//draw the draw frame work\nfunction clockball(){\n\t//clear the canvas\n\tctx.clearRect(50,50,670,450);\n\t//draw the framework\n    ctx.lineWidth=5;\n    ctx.strokeStyle= \"black\";\n    ctx.beginPath();\n    ctx.arc(400,270,r,0,2*Math.PI,true);\n    ctx.moveTo(47,50);\n    ctx.lineTo(750,50);\n    ctx.lineTo(750,100);\n    ctx.moveTo(50,50);\n    ctx.lineTo(50,500);\n    ctx.lineTo(750,500);\n    ctx.lineTo(750,350);\n    ctx.stroke();\n    \n    //draw the ohter ball\n    ctx.fillStyle = \"#333\";\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tballs[i].move();\n\t\tif(\n\t\t  (400-balls[i].x)*(400-balls[i].x) + (270-balls[i].y)*(270-balls[i].y)<= ((r+12)*(r+12))\n          ){\n\t \t\treset();\n    \t}\n\t}\n}\n//回复初始\nfunction reset(){\n\t balls = new Array();\n\ttries+=1;\n\tif(max_scorecount < scorecount) {\n\t\t\t\tmax_scorecount = scorecount;\n\t\t\t}\n\t\t\tscorecount=0;\n\tupdateStat();\n\tlifehigh=350;\n\tr=10;\n\ttt=21;\n\t   }\nfunction clocklife(){\n\t//clear the life canvas\n\tctx.clearRect(720,100,54,250);\n\t//draw the life\n\tctx.lineWidth=4;\n\tctx.strokeStyle=\"black\";\n\tctx.strokeRect(725,100,50,250);\n\t//the inside\n    if(lifehigh<350){\n    \tlifehigh+=3;\n    }\n    if(lifehigh>=350){\n    \tlifehigh=350;\n    }\n    if(r>r2){\n    \t\tr-=0.252;\n    \t}\n    //judge the success\n    if(lifehigh<100.5){\n    \t\n        scorecount+=1;\n    \tupdateStat();\n    \t\n    \t//reset the lifehigh\n    \tlifehigh=350;\n    \tr2=r+3;\n    \t\n    \ttt=21\n    }\n    \n    ctx.fillStyle=\"black\";\n\tctx.fillRect(725,lifehigh,50,350-lifehigh);\n\n}\n\nfunction blowit() {\n\t   if(inmotion){\n\t\t   lifehigh-=7;\n\t\t   r+=0.3;\n\t\t   createBall();\n\t       count+=1;\n       document.getElementById(\"canvas\").style.cursor=\"wait\";\n    \t}\n    else{\n    \tdocument.getElementById(\"canvas\").style.cursor=\"crosshair\";\n    }\n    \n}\n\n\nfunction moveit(ev) {\n\t var mx;\n     var my;\n        if(ev.layerX||ev.layerX==0){\n            mx=ev.layerX;\n            my=ev.layerY;\n        }\n        else if(ev.offsetX||ev.offsetX==0){\n            mx=ev.offsetX;\n            my=ev.offsetY;\n        }\n\n\t/////////////\n    //judge the mouse is in the centre ball\n\tif(((mx-405)*(mx-405)+(my-275)*(my-275))<(r*r)){\n      inmotion=true;\n\t}\n\telse\n\t{\n\t\tinmotion=false;\n\t}\n\t//judege the mouse is in the enemy ball\n\tfor(var i = 0; i < balls.length; i++) {\n\t\tif(\n\t\t  (mx-balls[i].x)*(mx-balls[i].x) + (my-balls[i].y)*(my-balls[i].y)<= 200\n          ){\n          balls.splice(i,1);\n\t   }\n    }\n\n}\n\nfunction timer(){\n\tvar t=document.getElementById(\"timer\");\nif(tt==0){\n\t\ttt=21;\n\t\treset();\n\t}\n\ttt--;\n\tt.innerHTML=\"剩余时间:\"+tt; \n}\n\nfunction init(){\n    ctx=document.getElementById(\"canvas\").getContext(\"2d\");\n\n    window.setInterval(clockball,20);\n    window.setInterval(clocklife,200);\n    window.setInterval(blowit,60);\n  \twindow.setInterval(timer,1000);\n\tcanvas1=document.getElementById('canvas');\n    canvas1.addEventListener('mousemove',moveit,false);\n\n}\n\n</script>\n</head>\n<body onLoad=\"init();\">\n    <canvas id=\"canvas\" width=\"850\" height=\"510\">\n    </canvas>\n    <h2>看你能把那个球搞多大</h2>\n    <div class=\"label\">规则：鼠标碰一下中间的球它就会变大一下，鼠标滑过黑球消灭，给它碰中就会打回原形的了</div>\n   <br/>\n    <div class=\"label\">现在的级数: <span id=\"score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">历史最大的级数: <span id=\"max_score\">AA&nbspCup</span></div>\n\n\t<div class=\"label\">出手次数: <span id=\"tries\">0</span>次</div>\n\t<div id=\"timer\">剩余时间:<div>\n    </body>\n    </html>"},{"title":"tags","date":"2017-03-14T15:43:45.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-14 23:43:45\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-04-06T14:19:12.904Z","path":"tags/index.html","layout":"page","_id":"cj6f7loy4000aqwx3ici7k4el","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello Hexo","_content":"博客换上Hexo主题，\n## 很久以前\n<!-- more -->\n### 就被它的这个\n\n``` bash\n试试代码\n```\n1001001111100101010110\n\n### 文章目录吸引了\n\n``` bash\nconsole.log('hello world');\n```\n列表？\n1. Red\n2. Green\n3. Blue\n\n### 今天终于能够换来试试\n\n``` bash\n$('#life').html('希望每个月能更一篇，以此为鉴');\n```\n### 表示好兴奋\n\n大家提提意见博客能有什么改造的地方\n\n``` bash\nfunction bye(){return \"恭喜你获得阅读我的第一篇博客成就！\"}\n```","source":"_posts/hello-world.md","raw":"---\ntitle: Hello Hexo\ncategories: 文章\ntags: 第一次\n---\n博客换上Hexo主题，\n## 很久以前\n<!-- more -->\n### 就被它的这个\n\n``` bash\n试试代码\n```\n1001001111100101010110\n\n### 文章目录吸引了\n\n``` bash\nconsole.log('hello world');\n```\n列表？\n1. Red\n2. Green\n3. Blue\n\n### 今天终于能够换来试试\n\n``` bash\n$('#life').html('希望每个月能更一篇，以此为鉴');\n```\n### 表示好兴奋\n\n大家提提意见博客能有什么改造的地方\n\n``` bash\nfunction bye(){return \"恭喜你获得阅读我的第一篇博客成就！\"}\n```","slug":"hello-world","published":1,"date":"2017-04-06T14:19:12.889Z","updated":"2017-04-06T14:19:12.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f7lowo0001qwx3mspg1jol","content":"<p>博客换上Hexo主题，</p>\n<h2 id=\"很久以前\"><a href=\"#很久以前\" class=\"headerlink\" title=\"很久以前\"></a>很久以前</h2><a id=\"more\"></a>\n<h3 id=\"就被它的这个\"><a href=\"#就被它的这个\" class=\"headerlink\" title=\"就被它的这个\"></a>就被它的这个</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">试试代码</div></pre></td></tr></table></figure>\n<p>1001001111100101010110</p>\n<h3 id=\"文章目录吸引了\"><a href=\"#文章目录吸引了\" class=\"headerlink\" title=\"文章目录吸引了\"></a>文章目录吸引了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(<span class=\"string\">'hello world'</span>);</div></pre></td></tr></table></figure>\n<p>列表？</p>\n<ol>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ol>\n<h3 id=\"今天终于能够换来试试\"><a href=\"#今天终于能够换来试试\" class=\"headerlink\" title=\"今天终于能够换来试试\"></a>今天终于能够换来试试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#life'</span>).html(<span class=\"string\">'希望每个月能更一篇，以此为鉴'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"表示好兴奋\"><a href=\"#表示好兴奋\" class=\"headerlink\" title=\"表示好兴奋\"></a>表示好兴奋</h3><p>大家提提意见博客能有什么改造的地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bye</span></span>()&#123;<span class=\"built_in\">return</span> <span class=\"string\">\"恭喜你获得阅读我的第一篇博客成就！\"</span>&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>博客换上Hexo主题，</p>\n<h2 id=\"很久以前\"><a href=\"#很久以前\" class=\"headerlink\" title=\"很久以前\"></a>很久以前</h2>","more":"<h3 id=\"就被它的这个\"><a href=\"#就被它的这个\" class=\"headerlink\" title=\"就被它的这个\"></a>就被它的这个</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">试试代码</div></pre></td></tr></table></figure>\n<p>1001001111100101010110</p>\n<h3 id=\"文章目录吸引了\"><a href=\"#文章目录吸引了\" class=\"headerlink\" title=\"文章目录吸引了\"></a>文章目录吸引了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(<span class=\"string\">'hello world'</span>);</div></pre></td></tr></table></figure>\n<p>列表？</p>\n<ol>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ol>\n<h3 id=\"今天终于能够换来试试\"><a href=\"#今天终于能够换来试试\" class=\"headerlink\" title=\"今天终于能够换来试试\"></a>今天终于能够换来试试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#life'</span>).html(<span class=\"string\">'希望每个月能更一篇，以此为鉴'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"表示好兴奋\"><a href=\"#表示好兴奋\" class=\"headerlink\" title=\"表示好兴奋\"></a>表示好兴奋</h3><p>大家提提意见博客能有什么改造的地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bye</span></span>()&#123;<span class=\"built_in\">return</span> <span class=\"string\">\"恭喜你获得阅读我的第一篇博客成就！\"</span>&#125;</div></pre></td></tr></table></figure>"},{"title":"1.10乘100为什么不等于110","_content":"## 事情的起因\n要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。\n<!-- more -->\n&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。\n&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。\n&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。\n&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。\n## 问题剖释\n&emsp;&emsp;空中传来旁白君的声音，它解析道：\n&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。\n&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。 \n``` bash\n>1.10*100\n110.00000000000001\n```\nWHAT THE *!\n## IEEE754 双精度浮点数\nJavascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。\n而浮点数表示方式具有以下特点：\n1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；\n\n2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；\n\n3.浮点数只能精确表示m*2e的数值；\n\n4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；\n\n5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。\n\n由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。\n\n### So Why 1.10 * 100 === 110.00000000000001?\n1.1.10实际存储时的位模式是：\n0011111111110001100110011001100110011001100110011001100110011001;\n2.100实际存储时的位模式是\n0110010000000000000000000000000000000000000000000000000000000000;\n3.实际存储的位模式作为操作数进行浮点数乘法:\n110000110011100010111011110111100110100001100000000000000。\n转换为十进制即为110.00000000000001。\n\n### 0.1+0.2\n其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元\n``` bash\n>1.00*100\n100\n```\n就不会有问题了。\n\n## 总结\nJS坑常有，我们慢慢填之。","source":"_posts/js-note.md","raw":"---\ntitle: 1.10乘100为什么不等于110\ncategories: 学习笔记\ntags: [JS填坑,填坑]\n---\n## 事情的起因\n要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。\n<!-- more -->\n&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。\n&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。\n&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。\n&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。\n## 问题剖释\n&emsp;&emsp;空中传来旁白君的声音，它解析道：\n&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。\n&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。 \n``` bash\n>1.10*100\n110.00000000000001\n```\nWHAT THE *!\n## IEEE754 双精度浮点数\nJavascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。\n而浮点数表示方式具有以下特点：\n1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；\n\n2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；\n\n3.浮点数只能精确表示m*2e的数值；\n\n4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；\n\n5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。\n\n由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。\n\n### So Why 1.10 * 100 === 110.00000000000001?\n1.1.10实际存储时的位模式是：\n0011111111110001100110011001100110011001100110011001100110011001;\n2.100实际存储时的位模式是\n0110010000000000000000000000000000000000000000000000000000000000;\n3.实际存储的位模式作为操作数进行浮点数乘法:\n110000110011100010111011110111100110100001100000000000000。\n转换为十进制即为110.00000000000001。\n\n### 0.1+0.2\n其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元\n``` bash\n>1.00*100\n100\n```\n就不会有问题了。\n\n## 总结\nJS坑常有，我们慢慢填之。","slug":"js-note","published":1,"date":"2017-05-10T15:28:36.584Z","updated":"2017-05-17T14:51:38.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f7loxh0003qwx3dx1hllnz","content":"<h2 id=\"事情的起因\"><a href=\"#事情的起因\" class=\"headerlink\" title=\"事情的起因\"></a>事情的起因</h2><p>要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。<br><a id=\"more\"></a><br>&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。<br>&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。<br>&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。<br>&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。</p>\n<h2 id=\"问题剖释\"><a href=\"#问题剖释\" class=\"headerlink\" title=\"问题剖释\"></a>问题剖释</h2><p>&emsp;&emsp;空中传来旁白君的声音，它解析道：<br>&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。<br>&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;1.10*100</div><div class=\"line\">110.00000000000001</div></pre></td></tr></table></figure></p>\n<p>WHAT THE *!</p>\n<h2 id=\"IEEE754-双精度浮点数\"><a href=\"#IEEE754-双精度浮点数\" class=\"headerlink\" title=\"IEEE754 双精度浮点数\"></a>IEEE754 双精度浮点数</h2><p>Javascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。<br>而浮点数表示方式具有以下特点：<br>1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；</p>\n<p>2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；</p>\n<p>3.浮点数只能精确表示m*2e的数值；</p>\n<p>4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；</p>\n<p>5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。</p>\n<p>由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。</p>\n<h3 id=\"So-Why-1-10-100-110-00000000000001\"><a href=\"#So-Why-1-10-100-110-00000000000001\" class=\"headerlink\" title=\"So Why 1.10 * 100 === 110.00000000000001?\"></a>So Why 1.10 * 100 === 110.00000000000001?</h3><p>1.1.10实际存储时的位模式是：<br>0011111111110001100110011001100110011001100110011001100110011001;<br>2.100实际存储时的位模式是<br>0110010000000000000000000000000000000000000000000000000000000000;<br>3.实际存储的位模式作为操作数进行浮点数乘法:<br>110000110011100010111011110111100110100001100000000000000。<br>转换为十进制即为110.00000000000001。</p>\n<h3 id=\"0-1-0-2\"><a href=\"#0-1-0-2\" class=\"headerlink\" title=\"0.1+0.2\"></a>0.1+0.2</h3><p>其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;1.00*100</div><div class=\"line\">100</div></pre></td></tr></table></figure></p>\n<p>就不会有问题了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>JS坑常有，我们慢慢填之。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"事情的起因\"><a href=\"#事情的起因\" class=\"headerlink\" title=\"事情的起因\"></a>事情的起因</h2><p>要从今天的微信支付调试说起，众所周知微信支付的接口，要求传入的金额数值是按分为单位的，所以都必须是大于0的整数。<br>","more":"<br>&emsp;&emsp;所以我们一般业务的实际金额都要做乘以100的处理，例如某大妈刚在市场买了1.10元的菜，她摸了摸口袋，看了一眼诚实憨厚的大叔，已经麻利地帮她打包好菜，实在不忍心说出自己今天忘记带钱包。<br>&emsp;&emsp;大叔正打算把菜递给大妈之际，看到大妈尾头紧皱，已经失去平时要把1.10元的菜讲价到1.00元的风韵神采，便意识到事情并不简单，便默默从下方抽屉中抽出一个微信二维码递给她。<br>&emsp;&emsp;大妈心中暗喜，迅速拔出他儿子刚为她买的最新款红米手机，熟练地扫过二维码，也没有要讲价到1.00元的意思了，麻利地在微信上输入1.10元的金额，点击立即支付，输入过密码。。。<br>&emsp;&emsp;“参数错误：你输入的金额格式不正确”，看着手机弹出的提示弹窗，大妈狠狠咬了牙，又重复了一遍上述的支付动作，“参数错误：你输入的金额格式不正确”。这时大妈崩溃的用着恳求可怜的眼神看着大叔，大叔也一面无奈地轻轻将打包好的菜微微收了过来一下，空气突然安静地凝固起来。</p>\n<h2 id=\"问题剖释\"><a href=\"#问题剖释\" class=\"headerlink\" title=\"问题剖释\"></a>问题剖释</h2><p>&emsp;&emsp;空中传来旁白君的声音，它解析道：<br>&emsp;&emsp;没错，这为大妈所使用的程序，其实就是某知名博文《1.10乘100为什么不等于110》的博主还未调试完之前写的代码。<br>&emsp;&emsp;他就是这样把金额1.10乘100然后传过去微信的支付接口，他是那样的信心满满，因为他之前含着泪用自己的微信零钱支付的测试都是那样一条条地测试成功。他一次次发起1.10元支付测试，看着一次次弹出的反馈信息“参数错误：你输入的金额格式不正确”，他越觉得莫名奇妙，1.10乘100不就等于110吗，还有什么格式错误的？然而当这个too young too naive的少年，找出这个输入结果后，空气又突然安静地凝固起来。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;1.10*100</div><div class=\"line\">110.00000000000001</div></pre></td></tr></table></figure></p>\n<p>WHAT THE *!</p>\n<h2 id=\"IEEE754-双精度浮点数\"><a href=\"#IEEE754-双精度浮点数\" class=\"headerlink\" title=\"IEEE754 双精度浮点数\"></a>IEEE754 双精度浮点数</h2><p>Javascript 作为一门动态语言，其数字类型只有 number 一种。 nubmer 类型使用的就是美国电气电子工程师学会 IEEE754 标准中以64-bit存储的的双精度浮点。<br>而浮点数表示方式具有以下特点：<br>1.浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；</p>\n<p>2.浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；</p>\n<p>3.浮点数只能精确表示m*2e的数值；</p>\n<p>4.当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；</p>\n<p>5.当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。</p>\n<p>由于部分数值无法精确表示（存储），于是在运算统计后偏差会愈见明显。</p>\n<h3 id=\"So-Why-1-10-100-110-00000000000001\"><a href=\"#So-Why-1-10-100-110-00000000000001\" class=\"headerlink\" title=\"So Why 1.10 * 100 === 110.00000000000001?\"></a>So Why 1.10 * 100 === 110.00000000000001?</h3><p>1.1.10实际存储时的位模式是：<br>0011111111110001100110011001100110011001100110011001100110011001;<br>2.100实际存储时的位模式是<br>0110010000000000000000000000000000000000000000000000000000000000;<br>3.实际存储的位模式作为操作数进行浮点数乘法:<br>110000110011100010111011110111100110100001100000000000000。<br>转换为十进制即为110.00000000000001。</p>\n<h3 id=\"0-1-0-2\"><a href=\"#0-1-0-2\" class=\"headerlink\" title=\"0.1+0.2\"></a>0.1+0.2</h3><p>其实这和那著名的 0.1 + 0.2 === 0.30000000000000004问题是一个道理的，可笑的是，只要我们的大妈把价讲到1.00元<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;1.00*100</div><div class=\"line\">100</div></pre></td></tr></table></figure></p>\n<p>就不会有问题了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>JS坑常有，我们慢慢填之。</p>"},{"title":"一些前端题目","_content":"整理一下一些前端题目\n<!-- more -->\n1.用纯css,html写一个导航栏的tab切换\n``` bash\n方法1：\n<ul class='nav'>\n    <li><a href=\"#content1\">列表1</a></li>\n    <li><a href=\"#content2\">列表2</a></li>\n</ul>\n<div id=\"content1\">列表1内容:123456</div>\n<div id=\"content2\">列表2内容:abcdefgkijkl</div>\n<style type=\"text/css\">\n\t#content1,\n\t#content2{\n\t    display:none;\n\t}\n \n\t#content1:target,\n\t#content2:target{\n\t    display:block;\n\t}\n\t#content1:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:first-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n\t#content2:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:last-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n</style>\n\n方法2：\n<div class=\"container\">\n    <input class=\"nav1\" id=\"li1\" type=\"radio\" name=\"nav\">\n    <input class=\"nav2\" id=\"li2\" type=\"radio\" name=\"nav\">\n    <ul class='nav'>\n        <li class='active'><label for=\"li1\">列表1</label></li>\n        <li><label for=\"li2\">列表2</label></li>\n    </ul>\n    <div class=\"content\">\n        <div class=\"content1\">列表1内容:123456</div>\n        <div class=\"content1\">列表2内容:abcdefgkijkl</div>\n    </div>\n</div>\n<style type=\"text/css\">\n\t.container{\n    position:relative;\n    width:400px;\n    margin: 50px auto;\n}\n\ninput{\n    display:none;\n}\n\n.nav{\n    position:relative;\n    overflow:hidden;\n}\n\nli{\n    width:200px;\n    float:left;\n    text-align:center;\n    background:#ddd;\n}\n\nli label{\n    display:block;\n    width:200px;\n    line-height:36px;\n    font-size:18px;\n    cursor:pointer;\n}\n\n.content{\n    position:relative;\n    overflow:hidden;\n    width:400px;\n    height:100px;\n    border:1px solid #999;\n    box-sizing:border-box;\n    padding:10px;\n}\n\n.content1,\n.content2{\n    display:none;\n    width:100%;\n    height:100%;\n}\n\n.nav1:checked ~ .nav li {\n    background:#ddd;\n    color:#000;\n    \n    &:first-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n.nav2:checked ~ .nav li{\n    background:#ddd;\n    color:#000;\n    \n    &:last-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n\n.nav1:checked ~ .content > div{\n    display:none;\n    \n    &:first-child{\n    display:block;\n    }\n}\n.nav2:checked ~ .content > div{\n    display:none;\n    \n    &:last-child{\n    display:block;\n    }\n}\n\n.active {\n        background:#ff7300;\n        color:#fff;\n}\n\n.default{\n    display:block;\n}\n</style>\n\n```\n2.说出输出顺序结果\n\n``` bash\nsetTimeout(function() {\n  console.log(1)\n}, 0);\nnew Promise(function executor(resolve) {\n  console.log(2);\n  for( var i=0 ; i<10000 ; i++ ) {\n    i == 9999 && resolve();\n  }\n  console.log(3);\n}).then(function() {\n  console.log(4);\n});\nconsole.log(5);\n```\n首先先碰到一个 setTimeout，于是会先设置一个定时，在定时结束后将传递这个函数放到任务队列里面，因此开始肯定不会输出 1 。\n\n然后是一个 Promise，里面的函数是直接执行的，因此应该直接输出 2 3 。\n\n然后，Promise 的 then 应当会放到当前 tick 的最后，但是还是在当前 tick 中。\n\n因此，应当先输出 5，然后再输出 4 。\n\n最后在到下一个 tick，就是 1 。\n\n“2 3 5 4 1”\n\n3.统计字符串中每种字符出现的次数,出现次数最多的是? 出现?次\n``` bash\n  var str=\"helloworld\";\n  方法一：用hash\n  for(var i=0,hash={};i<str.length;i++){\n    if(hash[str[i]]){\n      hash[str[i]]++\n    }else{\n      hash[str[i]]=1;\n    }\n  }\n  console.dir(hash);\n方法二：用正则\nvar arr=str.split(\"\")\n  .sort()\n  .join(\"\")\n  .match(/([a-z])\\1*/g)\n  .sort(function(a,b){\nreturn b.length-a.length; })\nconsole.log(\"出现最多的是: \"+arr[0][0]\n  +\"共\"+arr[0].length+\"次\");\nvar hash={};\n  arr.forEach(function(val){\n    hash[val[0]]=val.length;\n  });\n  console.dir(hash);\n```\n4.以下分别输出什么,为什么\n``` bash\nvar User = {\n  count: 1,\n \n  getCount: function() {\n    return this.count;\n  }\n};\n \nconsole.log(User.getCount());  // what?\n \nvar func = User.getCount;\nconsole.log(func());  // what?\n```\n答案是1和undefined。\n\nfunc是在winodw的上下文中被执行的，所以会访问不到count属性。\n\n4.在页面中展现一颗多叉树的结构，如图，并添加节点的选择、增加与删除的功能\n ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式\n ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉\n ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置\n ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程\n ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）\n ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点\n ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致\n\n http://ife.baidu.com/2016/task/all","source":"_posts/test-list.md","raw":"---\ntitle: 一些前端题目\ncategories: 学习笔记\ntags: [面试,题目]\n---\n整理一下一些前端题目\n<!-- more -->\n1.用纯css,html写一个导航栏的tab切换\n``` bash\n方法1：\n<ul class='nav'>\n    <li><a href=\"#content1\">列表1</a></li>\n    <li><a href=\"#content2\">列表2</a></li>\n</ul>\n<div id=\"content1\">列表1内容:123456</div>\n<div id=\"content2\">列表2内容:abcdefgkijkl</div>\n<style type=\"text/css\">\n\t#content1,\n\t#content2{\n\t    display:none;\n\t}\n \n\t#content1:target,\n\t#content2:target{\n\t    display:block;\n\t}\n\t#content1:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:first-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n\t#content2:target ~ .nav li{\n\t    // 改变li元素的背景色和字体颜色\n\t    &:last-child{\n\t        background:#ff7300;\n\t        color:#fff;\n\t    }\n\t}\n</style>\n\n方法2：\n<div class=\"container\">\n    <input class=\"nav1\" id=\"li1\" type=\"radio\" name=\"nav\">\n    <input class=\"nav2\" id=\"li2\" type=\"radio\" name=\"nav\">\n    <ul class='nav'>\n        <li class='active'><label for=\"li1\">列表1</label></li>\n        <li><label for=\"li2\">列表2</label></li>\n    </ul>\n    <div class=\"content\">\n        <div class=\"content1\">列表1内容:123456</div>\n        <div class=\"content1\">列表2内容:abcdefgkijkl</div>\n    </div>\n</div>\n<style type=\"text/css\">\n\t.container{\n    position:relative;\n    width:400px;\n    margin: 50px auto;\n}\n\ninput{\n    display:none;\n}\n\n.nav{\n    position:relative;\n    overflow:hidden;\n}\n\nli{\n    width:200px;\n    float:left;\n    text-align:center;\n    background:#ddd;\n}\n\nli label{\n    display:block;\n    width:200px;\n    line-height:36px;\n    font-size:18px;\n    cursor:pointer;\n}\n\n.content{\n    position:relative;\n    overflow:hidden;\n    width:400px;\n    height:100px;\n    border:1px solid #999;\n    box-sizing:border-box;\n    padding:10px;\n}\n\n.content1,\n.content2{\n    display:none;\n    width:100%;\n    height:100%;\n}\n\n.nav1:checked ~ .nav li {\n    background:#ddd;\n    color:#000;\n    \n    &:first-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n.nav2:checked ~ .nav li{\n    background:#ddd;\n    color:#000;\n    \n    &:last-child{\n        background:#ff7300;\n        color:#fff;\n    }\n}\n\n.nav1:checked ~ .content > div{\n    display:none;\n    \n    &:first-child{\n    display:block;\n    }\n}\n.nav2:checked ~ .content > div{\n    display:none;\n    \n    &:last-child{\n    display:block;\n    }\n}\n\n.active {\n        background:#ff7300;\n        color:#fff;\n}\n\n.default{\n    display:block;\n}\n</style>\n\n```\n2.说出输出顺序结果\n\n``` bash\nsetTimeout(function() {\n  console.log(1)\n}, 0);\nnew Promise(function executor(resolve) {\n  console.log(2);\n  for( var i=0 ; i<10000 ; i++ ) {\n    i == 9999 && resolve();\n  }\n  console.log(3);\n}).then(function() {\n  console.log(4);\n});\nconsole.log(5);\n```\n首先先碰到一个 setTimeout，于是会先设置一个定时，在定时结束后将传递这个函数放到任务队列里面，因此开始肯定不会输出 1 。\n\n然后是一个 Promise，里面的函数是直接执行的，因此应该直接输出 2 3 。\n\n然后，Promise 的 then 应当会放到当前 tick 的最后，但是还是在当前 tick 中。\n\n因此，应当先输出 5，然后再输出 4 。\n\n最后在到下一个 tick，就是 1 。\n\n“2 3 5 4 1”\n\n3.统计字符串中每种字符出现的次数,出现次数最多的是? 出现?次\n``` bash\n  var str=\"helloworld\";\n  方法一：用hash\n  for(var i=0,hash={};i<str.length;i++){\n    if(hash[str[i]]){\n      hash[str[i]]++\n    }else{\n      hash[str[i]]=1;\n    }\n  }\n  console.dir(hash);\n方法二：用正则\nvar arr=str.split(\"\")\n  .sort()\n  .join(\"\")\n  .match(/([a-z])\\1*/g)\n  .sort(function(a,b){\nreturn b.length-a.length; })\nconsole.log(\"出现最多的是: \"+arr[0][0]\n  +\"共\"+arr[0].length+\"次\");\nvar hash={};\n  arr.forEach(function(val){\n    hash[val[0]]=val.length;\n  });\n  console.dir(hash);\n```\n4.以下分别输出什么,为什么\n``` bash\nvar User = {\n  count: 1,\n \n  getCount: function() {\n    return this.count;\n  }\n};\n \nconsole.log(User.getCount());  // what?\n \nvar func = User.getCount;\nconsole.log(func());  // what?\n```\n答案是1和undefined。\n\nfunc是在winodw的上下文中被执行的，所以会访问不到count属性。\n\n4.在页面中展现一颗多叉树的结构，如图，并添加节点的选择、增加与删除的功能\n ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式\n ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉\n ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置\n ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程\n ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）\n ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点\n ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致\n\n http://ife.baidu.com/2016/task/all","slug":"test-list","published":1,"date":"2017-06-30T14:08:57.727Z","updated":"2017-08-16T15:12:14.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f7loxt0007qwx3wqtz0hgx","content":"<p>整理一下一些前端题目<br><a id=\"more\"></a><br>1.用纯css,html写一个导航栏的tab切换<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法1：</div><div class=\"line\">&lt;ul class=<span class=\"string\">'nav'</span>&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content1\"</span>&gt;列表1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content2\"</span>&gt;列表2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">&lt;div id=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</div><div class=\"line\">&lt;div id=<span class=\"string\">\"content2\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</div><div class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</div><div class=\"line\">\t<span class=\"comment\">#content1,</span></div><div class=\"line\">\t<span class=\"comment\">#content2&#123;</span></div><div class=\"line\">\t    display:none;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">#content1:target,</span></div><div class=\"line\">\t<span class=\"comment\">#content2:target&#123;</span></div><div class=\"line\">\t    display:block;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">#content1:target ~ .nav li&#123;</span></div><div class=\"line\">\t    // 改变li元素的背景色和字体颜色</div><div class=\"line\">\t    &amp;:first-child&#123;</div><div class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">\t        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">#content2:target ~ .nav li&#123;</span></div><div class=\"line\">\t    // 改变li元素的背景色和字体颜色</div><div class=\"line\">\t    &amp;:last-child&#123;</div><div class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">\t        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">方法2：</div><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">    &lt;input class=<span class=\"string\">\"nav1\"</span> id=<span class=\"string\">\"li1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</div><div class=\"line\">    &lt;input class=<span class=\"string\">\"nav2\"</span> id=<span class=\"string\">\"li2\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</div><div class=\"line\">    &lt;ul class=<span class=\"string\">'nav'</span>&gt;</div><div class=\"line\">        &lt;li class=<span class=\"string\">'active'</span>&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li1\"</span>&gt;列表1&lt;/label&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li2\"</span>&gt;列表2&lt;/label&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"content\"</span>&gt;</div><div class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</div><div class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</div><div class=\"line\">\t.container&#123;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    width:400px;</div><div class=\"line\">    margin: 50px auto;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">input&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.nav&#123;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    overflow:hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">li&#123;</div><div class=\"line\">    width:200px;</div><div class=\"line\">    <span class=\"built_in\">float</span>:left;</div><div class=\"line\">    text-align:center;</div><div class=\"line\">    background:<span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">li label&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">    width:200px;</div><div class=\"line\">    line-height:36px;</div><div class=\"line\">    font-size:18px;</div><div class=\"line\">    cursor:pointer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.content&#123;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    overflow:hidden;</div><div class=\"line\">    width:400px;</div><div class=\"line\">    height:100px;</div><div class=\"line\">    border:1px solid <span class=\"comment\">#999;</span></div><div class=\"line\">    box-sizing:border-box;</div><div class=\"line\">    padding:10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.content1,</div><div class=\"line\">.content2&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">    width:100%;</div><div class=\"line\">    height:100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.nav1:checked ~ .nav li &#123;</div><div class=\"line\">    background:<span class=\"comment\">#ddd;</span></div><div class=\"line\">    color:<span class=\"comment\">#000;</span></div><div class=\"line\">    </div><div class=\"line\">    &amp;:first-child&#123;</div><div class=\"line\">        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.nav2:checked ~ .nav li&#123;</div><div class=\"line\">    background:<span class=\"comment\">#ddd;</span></div><div class=\"line\">    color:<span class=\"comment\">#000;</span></div><div class=\"line\">    </div><div class=\"line\">    &amp;:last-child&#123;</div><div class=\"line\">        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.nav1:checked ~ .content &gt; div&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">    </div><div class=\"line\">    &amp;:first-child&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.nav2:checked ~ .content &gt; div&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">    </div><div class=\"line\">    &amp;:last-child&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.active &#123;</div><div class=\"line\">        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.default&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>2.说出输出顺序结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">  console.log(1)</div><div class=\"line\">&#125;, 0);</div><div class=\"line\">new Promise(<span class=\"keyword\">function</span> executor(resolve) &#123;</div><div class=\"line\">  console.log(2);</div><div class=\"line\">  <span class=\"keyword\">for</span>( var i=0 ; i&lt;10000 ; i++ ) &#123;</div><div class=\"line\">    i == 9999 &amp;&amp; resolve();</div><div class=\"line\">  &#125;</div><div class=\"line\">  console.log(3);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">  console.log(4);</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(5);</div></pre></td></tr></table></figure>\n<p>首先先碰到一个 setTimeout，于是会先设置一个定时，在定时结束后将传递这个函数放到任务队列里面，因此开始肯定不会输出 1 。</p>\n<p>然后是一个 Promise，里面的函数是直接执行的，因此应该直接输出 2 3 。</p>\n<p>然后，Promise 的 then 应当会放到当前 tick 的最后，但是还是在当前 tick 中。</p>\n<p>因此，应当先输出 5，然后再输出 4 。</p>\n<p>最后在到下一个 tick，就是 1 。</p>\n<p>“2 3 5 4 1”</p>\n<p>3.统计字符串中每种字符出现的次数,出现次数最多的是? 出现?次<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">  var str=<span class=\"string\">\"helloworld\"</span>;</div><div class=\"line\">  方法一：用<span class=\"built_in\">hash</span></div><div class=\"line\">  <span class=\"keyword\">for</span>(var i=0,<span class=\"built_in\">hash</span>=&#123;&#125;;i&lt;str.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">hash</span>[str[i]])&#123;</div><div class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]++</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]=1;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</div><div class=\"line\">方法二：用正则</div><div class=\"line\">var arr=str.split(<span class=\"string\">\"\"</span>)</div><div class=\"line\">  .sort()</div><div class=\"line\">  .join(<span class=\"string\">\"\"</span>)</div><div class=\"line\">  .match(/([a-z])\\1*/g)</div><div class=\"line\">  .sort(<span class=\"keyword\">function</span>(a,b)&#123;</div><div class=\"line\"><span class=\"built_in\">return</span> b.length-a.length; &#125;)</div><div class=\"line\">console.log(<span class=\"string\">\"出现最多的是: \"</span>+arr[0][0]</div><div class=\"line\">  +<span class=\"string\">\"共\"</span>+arr[0].length+<span class=\"string\">\"次\"</span>);</div><div class=\"line\">var <span class=\"built_in\">hash</span>=&#123;&#125;;</div><div class=\"line\">  arr.forEach(<span class=\"keyword\">function</span>(val)&#123;</div><div class=\"line\">    <span class=\"built_in\">hash</span>[val[0]]=val.length;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</div></pre></td></tr></table></figure></p>\n<p>4.以下分别输出什么,为什么<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var User = &#123;</div><div class=\"line\">  count: 1,</div><div class=\"line\"> </div><div class=\"line\">  getCount: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> this.count;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">console.log(User.getCount());  // what?</div><div class=\"line\"> </div><div class=\"line\">var func = User.getCount;</div><div class=\"line\">console.log(func());  // what?</div></pre></td></tr></table></figure></p>\n<p>答案是1和undefined。</p>\n<p>func是在winodw的上下文中被执行的，所以会访问不到count属性。</p>\n<p>4.在页面中展现一颗多叉树的结构，如图，并添加节点的选择、增加与删除的功能<br> ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式<br> ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉<br> ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置<br> ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程<br> ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）<br> ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点<br> ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</p>\n<p> <a href=\"http://ife.baidu.com/2016/task/all\" target=\"_blank\" rel=\"external\">http://ife.baidu.com/2016/task/all</a></p>\n","site":{"data":{}},"excerpt":"<p>整理一下一些前端题目<br>","more":"<br>1.用纯css,html写一个导航栏的tab切换<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法1：</div><div class=\"line\">&lt;ul class=<span class=\"string\">'nav'</span>&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content1\"</span>&gt;列表1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#content2\"</span>&gt;列表2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">&lt;div id=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</div><div class=\"line\">&lt;div id=<span class=\"string\">\"content2\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</div><div class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</div><div class=\"line\">\t<span class=\"comment\">#content1,</span></div><div class=\"line\">\t<span class=\"comment\">#content2&#123;</span></div><div class=\"line\">\t    display:none;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">#content1:target,</span></div><div class=\"line\">\t<span class=\"comment\">#content2:target&#123;</span></div><div class=\"line\">\t    display:block;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">#content1:target ~ .nav li&#123;</span></div><div class=\"line\">\t    // 改变li元素的背景色和字体颜色</div><div class=\"line\">\t    &amp;:first-child&#123;</div><div class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">\t        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">#content2:target ~ .nav li&#123;</span></div><div class=\"line\">\t    // 改变li元素的背景色和字体颜色</div><div class=\"line\">\t    &amp;:last-child&#123;</div><div class=\"line\">\t        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">\t        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">方法2：</div><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">    &lt;input class=<span class=\"string\">\"nav1\"</span> id=<span class=\"string\">\"li1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</div><div class=\"line\">    &lt;input class=<span class=\"string\">\"nav2\"</span> id=<span class=\"string\">\"li2\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"nav\"</span>&gt;</div><div class=\"line\">    &lt;ul class=<span class=\"string\">'nav'</span>&gt;</div><div class=\"line\">        &lt;li class=<span class=\"string\">'active'</span>&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li1\"</span>&gt;列表1&lt;/label&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"li2\"</span>&gt;列表2&lt;/label&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"content\"</span>&gt;</div><div class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表1内容:123456&lt;/div&gt;</div><div class=\"line\">        &lt;div class=<span class=\"string\">\"content1\"</span>&gt;列表2内容:abcdefgkijkl&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</div><div class=\"line\">\t.container&#123;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    width:400px;</div><div class=\"line\">    margin: 50px auto;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">input&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.nav&#123;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    overflow:hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">li&#123;</div><div class=\"line\">    width:200px;</div><div class=\"line\">    <span class=\"built_in\">float</span>:left;</div><div class=\"line\">    text-align:center;</div><div class=\"line\">    background:<span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">li label&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">    width:200px;</div><div class=\"line\">    line-height:36px;</div><div class=\"line\">    font-size:18px;</div><div class=\"line\">    cursor:pointer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.content&#123;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    overflow:hidden;</div><div class=\"line\">    width:400px;</div><div class=\"line\">    height:100px;</div><div class=\"line\">    border:1px solid <span class=\"comment\">#999;</span></div><div class=\"line\">    box-sizing:border-box;</div><div class=\"line\">    padding:10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.content1,</div><div class=\"line\">.content2&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">    width:100%;</div><div class=\"line\">    height:100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.nav1:checked ~ .nav li &#123;</div><div class=\"line\">    background:<span class=\"comment\">#ddd;</span></div><div class=\"line\">    color:<span class=\"comment\">#000;</span></div><div class=\"line\">    </div><div class=\"line\">    &amp;:first-child&#123;</div><div class=\"line\">        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.nav2:checked ~ .nav li&#123;</div><div class=\"line\">    background:<span class=\"comment\">#ddd;</span></div><div class=\"line\">    color:<span class=\"comment\">#000;</span></div><div class=\"line\">    </div><div class=\"line\">    &amp;:last-child&#123;</div><div class=\"line\">        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.nav1:checked ~ .content &gt; div&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">    </div><div class=\"line\">    &amp;:first-child&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.nav2:checked ~ .content &gt; div&#123;</div><div class=\"line\">    display:none;</div><div class=\"line\">    </div><div class=\"line\">    &amp;:last-child&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.active &#123;</div><div class=\"line\">        background:<span class=\"comment\">#ff7300;</span></div><div class=\"line\">        color:<span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.default&#123;</div><div class=\"line\">    display:block;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>2.说出输出顺序结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">  console.log(1)</div><div class=\"line\">&#125;, 0);</div><div class=\"line\">new Promise(<span class=\"keyword\">function</span> executor(resolve) &#123;</div><div class=\"line\">  console.log(2);</div><div class=\"line\">  <span class=\"keyword\">for</span>( var i=0 ; i&lt;10000 ; i++ ) &#123;</div><div class=\"line\">    i == 9999 &amp;&amp; resolve();</div><div class=\"line\">  &#125;</div><div class=\"line\">  console.log(3);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">  console.log(4);</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(5);</div></pre></td></tr></table></figure>\n<p>首先先碰到一个 setTimeout，于是会先设置一个定时，在定时结束后将传递这个函数放到任务队列里面，因此开始肯定不会输出 1 。</p>\n<p>然后是一个 Promise，里面的函数是直接执行的，因此应该直接输出 2 3 。</p>\n<p>然后，Promise 的 then 应当会放到当前 tick 的最后，但是还是在当前 tick 中。</p>\n<p>因此，应当先输出 5，然后再输出 4 。</p>\n<p>最后在到下一个 tick，就是 1 。</p>\n<p>“2 3 5 4 1”</p>\n<p>3.统计字符串中每种字符出现的次数,出现次数最多的是? 出现?次<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">  var str=<span class=\"string\">\"helloworld\"</span>;</div><div class=\"line\">  方法一：用<span class=\"built_in\">hash</span></div><div class=\"line\">  <span class=\"keyword\">for</span>(var i=0,<span class=\"built_in\">hash</span>=&#123;&#125;;i&lt;str.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">hash</span>[str[i]])&#123;</div><div class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]++</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">hash</span>[str[i]]=1;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</div><div class=\"line\">方法二：用正则</div><div class=\"line\">var arr=str.split(<span class=\"string\">\"\"</span>)</div><div class=\"line\">  .sort()</div><div class=\"line\">  .join(<span class=\"string\">\"\"</span>)</div><div class=\"line\">  .match(/([a-z])\\1*/g)</div><div class=\"line\">  .sort(<span class=\"keyword\">function</span>(a,b)&#123;</div><div class=\"line\"><span class=\"built_in\">return</span> b.length-a.length; &#125;)</div><div class=\"line\">console.log(<span class=\"string\">\"出现最多的是: \"</span>+arr[0][0]</div><div class=\"line\">  +<span class=\"string\">\"共\"</span>+arr[0].length+<span class=\"string\">\"次\"</span>);</div><div class=\"line\">var <span class=\"built_in\">hash</span>=&#123;&#125;;</div><div class=\"line\">  arr.forEach(<span class=\"keyword\">function</span>(val)&#123;</div><div class=\"line\">    <span class=\"built_in\">hash</span>[val[0]]=val.length;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  console.dir(<span class=\"built_in\">hash</span>);</div></pre></td></tr></table></figure></p>\n<p>4.以下分别输出什么,为什么<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var User = &#123;</div><div class=\"line\">  count: 1,</div><div class=\"line\"> </div><div class=\"line\">  getCount: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> this.count;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">console.log(User.getCount());  // what?</div><div class=\"line\"> </div><div class=\"line\">var func = User.getCount;</div><div class=\"line\">console.log(func());  // what?</div></pre></td></tr></table></figure></p>\n<p>答案是1和undefined。</p>\n<p>func是在winodw的上下文中被执行的，所以会访问不到count属性。</p>\n<p>4.在页面中展现一颗多叉树的结构，如图，并添加节点的选择、增加与删除的功能<br> ·点击某个节点元素，则该节点元素呈现一个特殊被选中的样式<br> ·增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉<br> ·增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节·点内容为输入框中内容，插入在其子节点的最后一个位置<br> ·提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程<br> ·当前被遍历到的节点做一个特殊显示（比如不同的颜色）<br> ·每隔一段时间（500ms，1s等时间自定）再遍历下一个节点<br> ·增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</p>\n<p> <a href=\"http://ife.baidu.com/2016/task/all\">http://ife.baidu.com/2016/task/all</a></p>"},{"title":"《JavaScript设计模式》很有感","_content":"之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）\n先给个书的链接: [JavaScript设计模式-张容铭](https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&ie=UTF8&qid=1482324196&sr=1-2&keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F)\n\n## 什么是设计模式\n\n设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。\n\n## 创建型设计模式\n\n创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。\n\n## 简单工厂模式\n作者把简单工厂模式比喻成一个神奇的魔术师。\n\n定义\n\n又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。\n\n使用场景\n\n看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：\n\n``` bash\n// 篮球基类\nvar Basketball = function() {\n    this.intro = '篮球盛行于美国';\n};\nBasketball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要5名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 足球基类\nvar Football = function() {\n    this.intro = '足球盛行于美国';\n};\nFootball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要11名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 运动工厂\nvar SportsFactory = function(name) {\n    switch(name) {\n        case 'NBA': \n            return new Basketball();\n        case 'wordCup': \n            return new Football();\n    }\n};\n```\n\n当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。\n简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。\n\n收获与总结\n\n团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。\n\n## 工厂方法模式\n\n作者把工厂方法模式比喻成一张名片。\n\n定义\n\n通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。\n\n使用场景\n\n在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。\n\n```bash\n// 工厂类\nvar Factory = function(type, content) {\n    if(this instanceof Factory) {\n        var s = new this[type](content);\n        return s;\n    } else {\n        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染\n        return new Factory(type, content);\n    }\n};\nFactory.prototype = {\n    Java: function(content) {\n        // ...\n    },\n    JavaScript: function(content) {\n        // ...\n    },\n    php: function(content) {\n        // ...\n    }\n};\n```\n\n这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。\n\n收获与总结\n\n对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。\n\n## 抽象工厂模式\n\n抽象工厂模式让你感觉出现的都是幻觉。\n\n定义\n\n通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。\n\n抽象类\n\n抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。\n\n使用场景\n\n抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。\n\n```bash\n// 抽象工厂方法\nvar VehicleFactory = function(subType, superType) {\n    // 判断抽象工厂中是否有该抽象类\n    if(typeof VehicleFactory[superType] === 'function') {\n        // 缓存类\n        function F() {};\n        // 继承父类属性和方法\n        F.prototype = new VehicleFactory[superType]();\n        // 将子类构造函数指向子类\n        subType.constructor = subType;\n        // 子类原型继承父类\n        subType.prototype = new F();\n    } else {\n        // 不存在该抽象类抛出错误\n        throw new Error('未创建该抽象类');\n    }\n};\n// 小汽车抽象类\nVehicleFactory.Car = function() {\n    this.type = 'car';\n};\nVehicleFactory.Car.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用')\n    }\n};\n// 公交车抽象类\nVehicleFactory.Bus = function() {\n    this.type = 'bus';\n};\nVehicleFactory.Bus.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用');\n    }\n};\n```\n\n抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。\n\n收获与总结\n\n抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。\n\n## 建造者模式\n\n建造者模式告诉我们分即是合。\n\n定义\n\n将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。\n\n应用场景\n\n现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。\n建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。\n\n```bash\n// 创建一位人类\nvar Human = function(param) {\n    // 技能\n    this.skill = param && param.skill || '保密';\n    // 兴趣爱好\n    this.hobby = param && param.hobby || '保密';\n};\n// 类人原型方法\nHuman.prototype = {\n    getSkill: function() {\n        return this.skill;\n    },\n    getHobby: function() {\n        return this.hobby;\n    }\n};\n// 实例化姓名类\nvar Named = function(name) {\n    var that = this;\n    // 构造器，解析姓名的姓与名\n    (function(name, that) {\n        that.wholeName = name;\n        if(name.indexOf(' ') > -1) {\n            that.FirstName = name.slice(0, name.indexOf(' '));\n            that.FirstName = name.slice(name.indexOf(' '));\n        }\n    })(name, that);\n};\n// 实例化职位类\nvar Work = function(work) {\n    var that = this;\n    // 构造器，通过传入的职位特征来设置相应职位及描述\n    (function(work, that) {\n        switch(work) {\n            case 'code':\n                that.work = '工程师';\n                break;\n            case 'UI':\n            case 'UE':\n                that.work = '设计师';\n                break;\n            case 'teach':\n                that.work = '教师';\n                break;\n            default:\n                that.work = work;\n        }\n    })(work, that);\n};\n// 更换期望的职位\nWork.prototype.changeWork = function(work) {\n    this.work = work;\n```\n\n下面来创建一位应聘者\n\n```bash\n// 应聘者创建类\nvar Person = function(name, work) {\n    // 创建应聘者缓存对象\n    var _person = new Human();\n    // 创建应聘者姓名解析对象\n    _person.name = new Named(name);\n    // 创建应聘者期望职位\n    _person.work = new Work(work);\n    // 返回创建的应聘者对象\n    return _person;\n}\n```\n\n收获与总结\n\n建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。\n\n## 原型模式\n\n原型模式是JavaScript语言之魂。\n\n定义\n\n用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。\n\n使用场景\n\n还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。\n原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。\n\n```bash\n// 原型对象复制方法\nfunction prototypeExtend() {\n    var F = function() {},\n        args = arguments,\n        i = 0,\n        len = args.length;\n    for (; i < len; i++) {\n        // 遍历每个模板对象中的属性\n        for(var j in args[i]) {\n            F.prototype[j] = args[i][j];\n        }\n    }\n    // 返回缓存类实例\n    return new F();\n}\n```\n\n企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。\n\n```bash\nvar penguin = prototypeExtend({\n    speed: 20,\n    swim: function() {\n        console.log('游泳速度' + this.speed);\n    },\n    run: function() {\n        console.log('奔跑速度' + this.speed);\n    }\n})\n```\n\n这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。\n\n收获与总结\n\n原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。\n\n## 单例模式\n\n哈哈，让你感受下一个人的寂寞。\n\n定义\n\n又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。\n\n使用场景\n\n单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。\n\n```bash\nvar A = {\n    Util: {\n        util_method1: function() {},\n        util_method2: function() {}\n    },\n    Tool: {\n        tool_method1: function() {},\n        tool_method2: function() {}\n    },\n    Ajax: {\n        ajax_method1: function() {},\n        ajax_method2: function() {}\n    }\n    ...\n}\n```\n\n如果想使用这个代码库，像下面这样访问即可：\n\n```bash\nA.Util.util_method1();\nA.Tool.tool_method2();\n```\n\n收获与总结\n\n单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。\n\n结构型设计模式\n\n结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。\n\n## 外观模式\n\n作者把这种模式比喻成一种套餐服务。\n\n定义\n\n为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。\n\n使用场景\n\n为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。\n\n```bash\n// 外观模式实现\nfunction addEvent(dom, type, fn) {\n    // 对于支持DOM2级事件处理程序的浏览器\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    // 对于不支持addEventListener但支持attachEvent的浏览器\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\n```\n\n解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。\n\n收获与总结\n\n当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。\n\n## 适配器模式\n\n听到这个模式的名字，有没有想到水管弯弯的场景呢？\n\n定义\n\n将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。\n\n使用场景\n\n公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。\n适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。\nJavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。\n\n```bash\nfunction doSomeThing(name, title, age, color, size, prize){}\n```\n\n记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：\n\n```bash\n/**\n * obj.name: name\n * obj.title: title\n * obj.age: age\n * obj.color: color\n * obj.size: size\n * obj.prize: prize\n***/\nfunction doSomeThing(obj){}\n```\n\n然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。\n\n```bash\nfunction doSomeThing(obj) {\n    var _adapter = {\n        name: '雨夜清荷',\n        title: '设计模式',\n        age: 24,\n        color: 'pink',\n        size: 100,\n        prize: 50\n    };\n    for(var i in _adapter) {\n        _adapter[i] = obj[i] || _adapter[i];\n    }\n}\n```\n\n收获与总结\n\nJavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。\n\n## 代理模式\n\n有没有想到牛郎织女鹊桥相会的场景？\n\n定义\n\n由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。\n\n使用场景\n\n跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。\n代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。\n\n```bash\n// 前端浏览器页面\n<script type=\"text/javascript\">\n// 回调函数\nfunction jsonpCallBack(res,req) {\n    console.log(res,req);\n}\n</script>\n<script type=\"text/javascript\" src=\"http://localhost/test/jsonp.php?callback=jsonp CallBack&data=getJsonPData\"></script>\n\n\n// 另一个域下的服务器请求接口\n<?php\n/* 后端获取请求字段数据，并生成返回内容 */\n$data = $_GET[\"data\"];\n$callback = $_GET[\"callback\"];\necho $callback.\"('success', '\".$data.\"')\";\n?>\n```\n\n这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。\n\n收获与总结\n\n代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。\n由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。\n\n## 装饰者模式\n\n显然房子装修就是一种典型的装饰者模式。\n\n定义\n\n在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。\n\n使用场景\n\n静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。\n\n```bash\n// 装饰者\nvar decorator = function(input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input);\n    // 若事件源已经绑定事件\n    if(typeof input.onclick === 'function') {\n        // 缓存事件源原有回调函数\n        var oldClickFn = input.onclick;\n        // 为事件源定义新的事件\n        input.onclick = function() {\n            // 事件源原有回调函数\n            oldClickFn();\n            // 执行事件源新增回调函数\n            fn();\n        }\n    } else {\n        input.onclick = fn;\n    }\n}\n```\n\n收获与总结\n\n除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。\n\n## 桥接模式\n\n作者把这种模式比喻成城市间的公路。\n\n定义\n\n在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。\n\n使用场景\n\n有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。\n对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。\n\n```bash\nfunction changeColor(dom, color, bg) {\n    // 设置元素的字体颜色\n    dom.style.color = color;\n    // 设置元素的背景颜色\n    dom.style.background = bg;\n}\n````\n\n接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。\n对于事件的桥接方法，可以用一个匿名函数来代替。\n\n```bash\nvar spans = document.getElementsByTagName('span');\nspans[0].onmouseover = function() {\n    changeColor(this, 'red', '#ddd');\n}\n```\n\n收获与总结\n\n桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。\n\n## 组合模式\n\n作者把组合模式比喻成超值午餐，感觉很形象。\n\n定义\n\n又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n使用场景\n\n为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。\n我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。\n在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。\n\n收获与总结\n\n组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。\n\n享元模式\n\n作者把享元模式比喻成城市公交车，可以仔细思考一番。\n\n定义\n\n运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。\n\n使用场景\n\n现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。\n享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。\n\n```bash\nvar Flyweight = function() {\n    // 已创建的元素\n    var created = [];\n    // 创建一个新闻包装容器\n    function create() {\n        var dom = document.createElement('div');\n        // 将容器插入新闻列表容器中\n        document.getElementById('container').appendChild(dom);\n        // 缓存新创建的元素\n        created.push(dom);\n        // 返回创建的新元素\n        return dom;\n    }\n    return {\n        // 获取创建新闻元素方法\n        getDiv: function() {\n            // 如果已创建的元素小于当前页元素总个数(5个)，则创建\n            if(created.length < 5) {\n                return created();\n            } else {\n                // 获取第一个元素，并插入去后面\n                var div = created.shift();\n                created.push(div);\n                return div;\n            }\n        }\n    }\n}\n````\n\n上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。\n\n```bash\nvar paper = 0,\n    num = 5,\n    len = article.length;\n// 添加五条新闻\nfor(var i = 0; i < 5; i++) {\n    if(article[i])\n        // 通过享元类获取创建的元素并写入新闻内容\n        Flyweight.getDiv().innerHTML = article[i];\n}\n\n// 下一页按钮绑定事件\ndocument.getElementById('next_page').onclick = function() {\n    // 如果新闻内容不足5条则返回\n    if(article.length < 5) {\n        return;\n    }\n    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引\n        j = 0;\n    // 插入5条新闻\n    for(; j < 5; j++) {\n        // 如果存在n+j条则插入\n        if(article[n + j]) {\n            Flyweight.getDiv().innerHTML = article[n + j];\n        // 否则插入起始位置第n+j-len条\n        } else if(article[n + j - len]) {\n            Flyweight.getDiv().innerHTML = article[n + j - len];\n        } else {\n            Flyweight.getDiv().innerHTML = \"\";\n        }\n    }\n}\n```\n\n这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。\n\n收获与总结\n\n享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。\n\n## 行为型设计模式\n\n行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。\n\n## 模板方法模式\n\n作者把这种模式比喻成照猫画虎。\n\n定义\n\n父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。\n\n使用场景\n\n提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。\n模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。\n打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。\n模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。\n\n```bash\n// 格式化字符串方法\nfunction formateString(str, data) {\n    return str.replace(/\\{#(\\w+)#\\}/g, function(match, key) {\n        return typeof data[key] === undefined ? '': data[key]\n    });\n}\n// 基础导航\nvar Nav = function(data) {\n    // 基础导航样式模板\n    this.item = '<a href=\"{#href#}\" title=\"{#title#}\">{#name#}</a>';\n    // 创建字符串\n    this.html = '';\n    // 格式化数据\n    for(var i = 0, len = data.length; i < len; i++) {\n        this.html += formateString(this.item, data[i]);\n    }\n    // 返回字符串数据\n    return this.html;\n}\n```\n\n对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。\n\n```bash\nvar NumNav = function(data) {\n    // 消息提醒信息组件模板\n    var tpl = '<b>{#num#}</b>';\n    // 装饰数据\n    for(var i = data.length - 1; i >= 0; i--) {\n        data[i].name += data[i].name + formateString(tpl, data[i]);\n    }\n    // 继承基础导航类\n    return Nav.call(this, data);\n}\n```\n\n收获与总结\n\n模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。\n\n## 观察者模式\n\n作者把这种模式比喻成通信卫星。\n\n定义\n\n又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。\n\n使用场景\n\n在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。\n观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。\n这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。\n\n```bash\nvar Observer = (function() {\n    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存\n    var __messages = {};\n    return {\n        // 注册信息接口\n        regist: function() {},\n        // 发布信息接口\n        fire: function() {},\n        // 移除信息接口\n        remove: function() {}\n    }\n})();\n```\n\n下面就是可以自己具体实现这些接口了。\n\n收获与总结\n\n观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。\n\n## 状态模式\n\n作者把这种模式比喻成超级玛丽。\n\n定义\n\n当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。\n\n使用场景\n\n平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。\n将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。\n\n```bash\n// 投票结果状态对象\nvar ResultState = function() {\n    // 判断结果保存在内部状态中\n    var States = {\n        // 每种状态作为一种独立方法保存\n        state0: function() {\n            console.log('这是第一种情况')：\n        },\n        state1: function() {\n            console.log('这是第二种情况')：\n        },\n        state2: function() {\n            console.log('这是第三种情况')：\n        },\n        state3: function() {\n            console.log('这是第四种情况')：\n        }\n    }\n    // 获取某种状态并执行对应方法\n    function show(result) {\n        States['state' + result] && States['state' + result]();\n    }\n    return {\n        // 返回调用状态方法接口\n        show: show\n    }\n}();\n```\n\n想调用第三种结果就可以如下调用\n\n```bash\nResultState.show(3);\n```\n\n对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。\n\n收获与总结\n\n状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。\n\n## 策略模式\n\n作者把这种模式比喻成活诸葛。\n\n定义\n\n将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。\n\n使用场景\n\n年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。\n结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：\n\n```bash\n// 价格策略对象\nvar PriceStrategy = function() {\n    // 内部算法对象\n    var strategy = {\n        // 100返30\n        return30: function(price) {},\n        // 100返50\n        return50: function(price) {},\n        // 9折\n        percent90: function(price) {},\n        // 8折\n        percent80: function(price) {},\n        // 5折\n        percent50: function(price) {},\n    }\n    // 策略算法调用接口\n    return function(algorithm, price) {\n        return strategy[algorithm] && strategy[algorithm](price);\n    }\n}();\n```\n\n收获与总结\n\n策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。\n\n## 职责链模式\n\n作者把这种模式比喻成一个有序车站。\n\n定义\n\n解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。\n\n使用场景\n\n项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。\n对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。\n\n收获与总结\n\n职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。\n\n## 命令模式\n\n定义\n\n将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。\n\n使用场景\n\n现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。\n命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。\n那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。\n\n```bash\n// 模块实现模块\nvar viewCommand = (function() {\n    var tpl = {\n        // 展示图片结构模块\n        product: [\n            '<div>',.....,'</div>'\n        ].join(''),\n        // 展示标题结构模块\n        title: [\n        '<div>',.....,'</div>'\n        ].join(''),\n    },\n    // 格式化字符串缓存字符串\n    html = '';\n    // 格式化字符串\n    function formateString(str, obj) {}\n    // 方法集合\n    var Action = {\n        // 创建方法\n        create: function(data, view) {\n            // 解析数据\n            if(data.length) {\n                // 遍历\n                for(var i = 0, len = data.length; i < len; i++) {\n                    html += formateString(tpl[view], data[i]);\n                }\n            } else {\n                html += formateString(tpl[view], data);\n            }\n        },\n        // 展示方法\n        display: function(container, data, vuew) {\n            // 如果传入数据\n            if(data) {\n                // 根据给的数据创建视图\n                this.create(data, view);\n            }\n            // 展示模块\n            document.getElementById(container).innerHTML = html;\n            // 展示后清空缓存字符串\n            html = '';\n        }\n    }\n    // 命令接口\n    return function excute(msg) {\n        // 解析命令，如果msg.param不是数组则将其转化为数组\n        msg.param = Object.prototype.toString.call(msg.param) === \"[object Array]\" ? msg.param : [msg.param];\n        // Action内部调用的方法引用this，此处保证作用域this执行传入Action\n        Action[msg.command].apply(Action, msg.param)\n    }\n})();\n```\n\n下面就可以测试这个命令对象了：\n\n```bash\nvar productData = [\n    {\n        src: 'command/02.jpg',\n        text: '绽放的桃花'\n    },\n    {\n        src: 'command/03.jpg',\n        text: '阳光下的温馨'\n    }\n],\n// 模块标题数据\ntitleData = {\n    title: '夏日里的一片温馨',\n    tips: '暖暖的温情带给人们家的感觉'\n}\n// 调用命令对象\nviewCommand({\n    command: 'display',\n    param: ['title', titleData, 'title']\n});\nviewCommand({\n    command: 'create',\n    param: ['product', productData, 'product']\n});\n```\n\n有了命令模式，想创建任何页面视图都是一件很简单的事情。\n\n收获与总结\n\n命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。\n\n## 访问者模式\n\n作者把这种模式比喻成驻华大使。\n\n定义\n\n针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。\n\n使用场景\n\n用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：\n\n```bash\nvar bindEvent = function(dom, type, fn) {\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\nvar demo = document.getElementById('demo');\nbindEvent(demo, 'click', function() {\n    this.style.background = 'red';\n});\n```\n\n这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。\n访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：\n\n```bash\nfunction bindIEEvent(dom, type, fn, data) {\n    var data = data || {};\n    dom.attachEvent('on' + type, function(e){\n        fn.call(dom, e, data);\n    });\n};\n```\n\n上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。\n\n收获与总结\n\n访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。\n\n## 中介者模式\n\n作者把这种模式比喻成媒婆，好吧，我笑了这里。\n\n定义\n\n通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。\n\n使用场景\n\n项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。\n观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。\n如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：\n\n```bash\n// 中介者对象\nvar Mediator = function() {\n    // 消息对象\n    var _msg = {};\n    return {\n        // 订阅消息方法，type:消息名称 action:消息回调函数\n        register: function(type, action) {\n            // 如果消息存在\n            if(_msg[type])\n                // 存入回调函数\n                _msg[type].push(action);\n            else {\n                // 不存在则建立消息容器\n                _msg[type] = [];\n                _msg[type].push(action);\n            }\n        },\n        // 发布消息方法\n        send: function(type) {\n            // 如果该消息已经被订阅\n            if(_msg[type]) {\n                // 遍历已存储的消息回调函数\n                for(var i = 0, len = _msg[type].length; i < len; i++) {\n                    // 执行回调函数\n                    _msg[type][i] && _msg[type][i]();\n                }\n            }\n        }\n    }\n}();\n```\n\n这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。\n\n收获与总结\n\n同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。\n\n备忘录模式\n\n定义\n\n在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。\n\n使用场景\n\n在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：\n\n```bash\n// Page备忘录类\nvar Page = function() {\n    // 信息缓存对象\n    var cache = {};\n    return function(page, fn) {\n        // 判断该页数据是否在缓存中\n        if(cache[page]) {\n            // 显示该页内容\n            showPage(page, cache[page]);\n            // 执行成功回调函数\n            fn && fn();\n        } else {\n            // 否则异步请求\n            $.post('./data/getNewsData.php', {\n                page: page\n            }, function(res) {\n                // 成功返回\n                if(res.errNo == 0) {\n                    showPage(page, res.data);\n                    cache[page] = res.data;\n                    fn && fn();\n                } else {\n                    // 处理异常\n                }\n            })\n        }\n    }\n}\n```\n\n上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。\n\n收获与总结\n\n备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。\n\n## 迭代器模式\n\n作者把这种模式比喻成一个点钞机。\n\n定义\n\n在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。\n\n使用场景\n\n迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：\n\n```bash\nvar Iterator = function(items, container) {\n    // 获取父元素\n    var container = container && document.getElementById(container) || document,\n    // 获取元素\n        items = container.getElementsByTagName(items),\n    // 获取元素长度\n        length = items.length,\n    // 当前索引值\n        index = 0;\n    // 缓存原生数组splice方法\n    var splice = [].splice;\n    return {\n        // 获取第一个元素\n        first: function() {},\n        // 获取最后一个元素\n        second: function() {},\n        // 获取前一个元素\n        pre: function() {},\n        // 获取后一个元素\n        next: function() {},\n        // 获取某一个元素\n        get: function(num) {},\n        // 对每一个元素执行某一个方法\n        dealEach: function(fn) {},\n        // 对某一个元素执行某一个方法\n        dealItem: function(num, fn) {},\n        // 排他方式处理某一个元素\n        exclusive: function() {}\n    }\n}\n```\n\n下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。\n\n收获与总结\n\n通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。\n\n## 解释器模式\n\n定义\n\n对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。\n\n使用场景\n\n一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：\n\n```bash\n<div calss=\"wrap\">\n    <div class=\"link-inner\">\n        <a href=\"#\">link</a>\n    </div>\n    <div class=\"button-inner\">\n        <button>text</button>\n    </div>\n</div>\n```\n\n要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV>DIV2>SPAN。\n上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。\n\n收获与总结\n\n一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。\n\n## 技巧型设计模式\n\n技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。\n\n## 架构型设计模式\n\n架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。\n\n学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。","source":"_posts/javascript-model.md","raw":"---\ntitle: 《JavaScript设计模式》很有感\ncategories: 学习笔记\ntags: [神书推荐]\n---\n之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）\n先给个书的链接: [JavaScript设计模式-张容铭](https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&ie=UTF8&qid=1482324196&sr=1-2&keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F)\n\n## 什么是设计模式\n\n设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。\n\n## 创建型设计模式\n\n创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。\n\n## 简单工厂模式\n作者把简单工厂模式比喻成一个神奇的魔术师。\n\n定义\n\n又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。\n\n使用场景\n\n看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：\n\n``` bash\n// 篮球基类\nvar Basketball = function() {\n    this.intro = '篮球盛行于美国';\n};\nBasketball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要5名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 足球基类\nvar Football = function() {\n    this.intro = '足球盛行于美国';\n};\nFootball.prototype = {\n    getMember: function() {\n        console.log('每个队伍需要11名队员');\n    },\n    getBallSize: function() {\n        console.log('篮球很大');\n    }\n};\n// 运动工厂\nvar SportsFactory = function(name) {\n    switch(name) {\n        case 'NBA': \n            return new Basketball();\n        case 'wordCup': \n            return new Football();\n    }\n};\n```\n\n当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。\n简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。\n\n收获与总结\n\n团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。\n\n## 工厂方法模式\n\n作者把工厂方法模式比喻成一张名片。\n\n定义\n\n通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。\n\n使用场景\n\n在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。\n\n```bash\n// 工厂类\nvar Factory = function(type, content) {\n    if(this instanceof Factory) {\n        var s = new this[type](content);\n        return s;\n    } else {\n        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染\n        return new Factory(type, content);\n    }\n};\nFactory.prototype = {\n    Java: function(content) {\n        // ...\n    },\n    JavaScript: function(content) {\n        // ...\n    },\n    php: function(content) {\n        // ...\n    }\n};\n```\n\n这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。\n\n收获与总结\n\n对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。\n\n## 抽象工厂模式\n\n抽象工厂模式让你感觉出现的都是幻觉。\n\n定义\n\n通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。\n\n抽象类\n\n抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。\n\n使用场景\n\n抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。\n\n```bash\n// 抽象工厂方法\nvar VehicleFactory = function(subType, superType) {\n    // 判断抽象工厂中是否有该抽象类\n    if(typeof VehicleFactory[superType] === 'function') {\n        // 缓存类\n        function F() {};\n        // 继承父类属性和方法\n        F.prototype = new VehicleFactory[superType]();\n        // 将子类构造函数指向子类\n        subType.constructor = subType;\n        // 子类原型继承父类\n        subType.prototype = new F();\n    } else {\n        // 不存在该抽象类抛出错误\n        throw new Error('未创建该抽象类');\n    }\n};\n// 小汽车抽象类\nVehicleFactory.Car = function() {\n    this.type = 'car';\n};\nVehicleFactory.Car.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用')\n    }\n};\n// 公交车抽象类\nVehicleFactory.Bus = function() {\n    this.type = 'bus';\n};\nVehicleFactory.Bus.prototype = {\n    getPrice: function() {\n        return new Error('抽象方法不能调用');\n    }\n};\n```\n\n抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。\n\n收获与总结\n\n抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。\n\n## 建造者模式\n\n建造者模式告诉我们分即是合。\n\n定义\n\n将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。\n\n应用场景\n\n现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。\n建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。\n\n```bash\n// 创建一位人类\nvar Human = function(param) {\n    // 技能\n    this.skill = param && param.skill || '保密';\n    // 兴趣爱好\n    this.hobby = param && param.hobby || '保密';\n};\n// 类人原型方法\nHuman.prototype = {\n    getSkill: function() {\n        return this.skill;\n    },\n    getHobby: function() {\n        return this.hobby;\n    }\n};\n// 实例化姓名类\nvar Named = function(name) {\n    var that = this;\n    // 构造器，解析姓名的姓与名\n    (function(name, that) {\n        that.wholeName = name;\n        if(name.indexOf(' ') > -1) {\n            that.FirstName = name.slice(0, name.indexOf(' '));\n            that.FirstName = name.slice(name.indexOf(' '));\n        }\n    })(name, that);\n};\n// 实例化职位类\nvar Work = function(work) {\n    var that = this;\n    // 构造器，通过传入的职位特征来设置相应职位及描述\n    (function(work, that) {\n        switch(work) {\n            case 'code':\n                that.work = '工程师';\n                break;\n            case 'UI':\n            case 'UE':\n                that.work = '设计师';\n                break;\n            case 'teach':\n                that.work = '教师';\n                break;\n            default:\n                that.work = work;\n        }\n    })(work, that);\n};\n// 更换期望的职位\nWork.prototype.changeWork = function(work) {\n    this.work = work;\n```\n\n下面来创建一位应聘者\n\n```bash\n// 应聘者创建类\nvar Person = function(name, work) {\n    // 创建应聘者缓存对象\n    var _person = new Human();\n    // 创建应聘者姓名解析对象\n    _person.name = new Named(name);\n    // 创建应聘者期望职位\n    _person.work = new Work(work);\n    // 返回创建的应聘者对象\n    return _person;\n}\n```\n\n收获与总结\n\n建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。\n\n## 原型模式\n\n原型模式是JavaScript语言之魂。\n\n定义\n\n用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。\n\n使用场景\n\n还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。\n原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。\n\n```bash\n// 原型对象复制方法\nfunction prototypeExtend() {\n    var F = function() {},\n        args = arguments,\n        i = 0,\n        len = args.length;\n    for (; i < len; i++) {\n        // 遍历每个模板对象中的属性\n        for(var j in args[i]) {\n            F.prototype[j] = args[i][j];\n        }\n    }\n    // 返回缓存类实例\n    return new F();\n}\n```\n\n企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。\n\n```bash\nvar penguin = prototypeExtend({\n    speed: 20,\n    swim: function() {\n        console.log('游泳速度' + this.speed);\n    },\n    run: function() {\n        console.log('奔跑速度' + this.speed);\n    }\n})\n```\n\n这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。\n\n收获与总结\n\n原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。\n\n## 单例模式\n\n哈哈，让你感受下一个人的寂寞。\n\n定义\n\n又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。\n\n使用场景\n\n单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。\n\n```bash\nvar A = {\n    Util: {\n        util_method1: function() {},\n        util_method2: function() {}\n    },\n    Tool: {\n        tool_method1: function() {},\n        tool_method2: function() {}\n    },\n    Ajax: {\n        ajax_method1: function() {},\n        ajax_method2: function() {}\n    }\n    ...\n}\n```\n\n如果想使用这个代码库，像下面这样访问即可：\n\n```bash\nA.Util.util_method1();\nA.Tool.tool_method2();\n```\n\n收获与总结\n\n单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。\n\n结构型设计模式\n\n结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。\n\n## 外观模式\n\n作者把这种模式比喻成一种套餐服务。\n\n定义\n\n为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。\n\n使用场景\n\n为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。\n\n```bash\n// 外观模式实现\nfunction addEvent(dom, type, fn) {\n    // 对于支持DOM2级事件处理程序的浏览器\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    // 对于不支持addEventListener但支持attachEvent的浏览器\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\n```\n\n解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。\n\n收获与总结\n\n当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。\n\n## 适配器模式\n\n听到这个模式的名字，有没有想到水管弯弯的场景呢？\n\n定义\n\n将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。\n\n使用场景\n\n公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。\n适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。\nJavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。\n\n```bash\nfunction doSomeThing(name, title, age, color, size, prize){}\n```\n\n记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：\n\n```bash\n/**\n * obj.name: name\n * obj.title: title\n * obj.age: age\n * obj.color: color\n * obj.size: size\n * obj.prize: prize\n***/\nfunction doSomeThing(obj){}\n```\n\n然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。\n\n```bash\nfunction doSomeThing(obj) {\n    var _adapter = {\n        name: '雨夜清荷',\n        title: '设计模式',\n        age: 24,\n        color: 'pink',\n        size: 100,\n        prize: 50\n    };\n    for(var i in _adapter) {\n        _adapter[i] = obj[i] || _adapter[i];\n    }\n}\n```\n\n收获与总结\n\nJavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。\n\n## 代理模式\n\n有没有想到牛郎织女鹊桥相会的场景？\n\n定义\n\n由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。\n\n使用场景\n\n跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。\n代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。\n\n```bash\n// 前端浏览器页面\n<script type=\"text/javascript\">\n// 回调函数\nfunction jsonpCallBack(res,req) {\n    console.log(res,req);\n}\n</script>\n<script type=\"text/javascript\" src=\"http://localhost/test/jsonp.php?callback=jsonp CallBack&data=getJsonPData\"></script>\n\n\n// 另一个域下的服务器请求接口\n<?php\n/* 后端获取请求字段数据，并生成返回内容 */\n$data = $_GET[\"data\"];\n$callback = $_GET[\"callback\"];\necho $callback.\"('success', '\".$data.\"')\";\n?>\n```\n\n这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。\n\n收获与总结\n\n代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。\n由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。\n\n## 装饰者模式\n\n显然房子装修就是一种典型的装饰者模式。\n\n定义\n\n在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。\n\n使用场景\n\n静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。\n\n```bash\n// 装饰者\nvar decorator = function(input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input);\n    // 若事件源已经绑定事件\n    if(typeof input.onclick === 'function') {\n        // 缓存事件源原有回调函数\n        var oldClickFn = input.onclick;\n        // 为事件源定义新的事件\n        input.onclick = function() {\n            // 事件源原有回调函数\n            oldClickFn();\n            // 执行事件源新增回调函数\n            fn();\n        }\n    } else {\n        input.onclick = fn;\n    }\n}\n```\n\n收获与总结\n\n除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。\n\n## 桥接模式\n\n作者把这种模式比喻成城市间的公路。\n\n定义\n\n在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。\n\n使用场景\n\n有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。\n对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。\n\n```bash\nfunction changeColor(dom, color, bg) {\n    // 设置元素的字体颜色\n    dom.style.color = color;\n    // 设置元素的背景颜色\n    dom.style.background = bg;\n}\n````\n\n接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。\n对于事件的桥接方法，可以用一个匿名函数来代替。\n\n```bash\nvar spans = document.getElementsByTagName('span');\nspans[0].onmouseover = function() {\n    changeColor(this, 'red', '#ddd');\n}\n```\n\n收获与总结\n\n桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。\n\n## 组合模式\n\n作者把组合模式比喻成超值午餐，感觉很形象。\n\n定义\n\n又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n使用场景\n\n为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。\n我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。\n在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。\n\n收获与总结\n\n组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。\n\n享元模式\n\n作者把享元模式比喻成城市公交车，可以仔细思考一番。\n\n定义\n\n运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。\n\n使用场景\n\n现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。\n享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。\n\n```bash\nvar Flyweight = function() {\n    // 已创建的元素\n    var created = [];\n    // 创建一个新闻包装容器\n    function create() {\n        var dom = document.createElement('div');\n        // 将容器插入新闻列表容器中\n        document.getElementById('container').appendChild(dom);\n        // 缓存新创建的元素\n        created.push(dom);\n        // 返回创建的新元素\n        return dom;\n    }\n    return {\n        // 获取创建新闻元素方法\n        getDiv: function() {\n            // 如果已创建的元素小于当前页元素总个数(5个)，则创建\n            if(created.length < 5) {\n                return created();\n            } else {\n                // 获取第一个元素，并插入去后面\n                var div = created.shift();\n                created.push(div);\n                return div;\n            }\n        }\n    }\n}\n````\n\n上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。\n\n```bash\nvar paper = 0,\n    num = 5,\n    len = article.length;\n// 添加五条新闻\nfor(var i = 0; i < 5; i++) {\n    if(article[i])\n        // 通过享元类获取创建的元素并写入新闻内容\n        Flyweight.getDiv().innerHTML = article[i];\n}\n\n// 下一页按钮绑定事件\ndocument.getElementById('next_page').onclick = function() {\n    // 如果新闻内容不足5条则返回\n    if(article.length < 5) {\n        return;\n    }\n    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引\n        j = 0;\n    // 插入5条新闻\n    for(; j < 5; j++) {\n        // 如果存在n+j条则插入\n        if(article[n + j]) {\n            Flyweight.getDiv().innerHTML = article[n + j];\n        // 否则插入起始位置第n+j-len条\n        } else if(article[n + j - len]) {\n            Flyweight.getDiv().innerHTML = article[n + j - len];\n        } else {\n            Flyweight.getDiv().innerHTML = \"\";\n        }\n    }\n}\n```\n\n这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。\n\n收获与总结\n\n享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。\n\n## 行为型设计模式\n\n行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。\n\n## 模板方法模式\n\n作者把这种模式比喻成照猫画虎。\n\n定义\n\n父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。\n\n使用场景\n\n提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。\n模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。\n打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。\n模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。\n\n```bash\n// 格式化字符串方法\nfunction formateString(str, data) {\n    return str.replace(/\\{#(\\w+)#\\}/g, function(match, key) {\n        return typeof data[key] === undefined ? '': data[key]\n    });\n}\n// 基础导航\nvar Nav = function(data) {\n    // 基础导航样式模板\n    this.item = '<a href=\"{#href#}\" title=\"{#title#}\">{#name#}</a>';\n    // 创建字符串\n    this.html = '';\n    // 格式化数据\n    for(var i = 0, len = data.length; i < len; i++) {\n        this.html += formateString(this.item, data[i]);\n    }\n    // 返回字符串数据\n    return this.html;\n}\n```\n\n对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。\n\n```bash\nvar NumNav = function(data) {\n    // 消息提醒信息组件模板\n    var tpl = '<b>{#num#}</b>';\n    // 装饰数据\n    for(var i = data.length - 1; i >= 0; i--) {\n        data[i].name += data[i].name + formateString(tpl, data[i]);\n    }\n    // 继承基础导航类\n    return Nav.call(this, data);\n}\n```\n\n收获与总结\n\n模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。\n\n## 观察者模式\n\n作者把这种模式比喻成通信卫星。\n\n定义\n\n又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。\n\n使用场景\n\n在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。\n观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。\n这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。\n\n```bash\nvar Observer = (function() {\n    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存\n    var __messages = {};\n    return {\n        // 注册信息接口\n        regist: function() {},\n        // 发布信息接口\n        fire: function() {},\n        // 移除信息接口\n        remove: function() {}\n    }\n})();\n```\n\n下面就是可以自己具体实现这些接口了。\n\n收获与总结\n\n观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。\n\n## 状态模式\n\n作者把这种模式比喻成超级玛丽。\n\n定义\n\n当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。\n\n使用场景\n\n平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。\n将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。\n\n```bash\n// 投票结果状态对象\nvar ResultState = function() {\n    // 判断结果保存在内部状态中\n    var States = {\n        // 每种状态作为一种独立方法保存\n        state0: function() {\n            console.log('这是第一种情况')：\n        },\n        state1: function() {\n            console.log('这是第二种情况')：\n        },\n        state2: function() {\n            console.log('这是第三种情况')：\n        },\n        state3: function() {\n            console.log('这是第四种情况')：\n        }\n    }\n    // 获取某种状态并执行对应方法\n    function show(result) {\n        States['state' + result] && States['state' + result]();\n    }\n    return {\n        // 返回调用状态方法接口\n        show: show\n    }\n}();\n```\n\n想调用第三种结果就可以如下调用\n\n```bash\nResultState.show(3);\n```\n\n对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。\n\n收获与总结\n\n状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。\n\n## 策略模式\n\n作者把这种模式比喻成活诸葛。\n\n定义\n\n将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。\n\n使用场景\n\n年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。\n结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：\n\n```bash\n// 价格策略对象\nvar PriceStrategy = function() {\n    // 内部算法对象\n    var strategy = {\n        // 100返30\n        return30: function(price) {},\n        // 100返50\n        return50: function(price) {},\n        // 9折\n        percent90: function(price) {},\n        // 8折\n        percent80: function(price) {},\n        // 5折\n        percent50: function(price) {},\n    }\n    // 策略算法调用接口\n    return function(algorithm, price) {\n        return strategy[algorithm] && strategy[algorithm](price);\n    }\n}();\n```\n\n收获与总结\n\n策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。\n\n## 职责链模式\n\n作者把这种模式比喻成一个有序车站。\n\n定义\n\n解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。\n\n使用场景\n\n项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。\n对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。\n\n收获与总结\n\n职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。\n\n## 命令模式\n\n定义\n\n将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。\n\n使用场景\n\n现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。\n命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。\n那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。\n\n```bash\n// 模块实现模块\nvar viewCommand = (function() {\n    var tpl = {\n        // 展示图片结构模块\n        product: [\n            '<div>',.....,'</div>'\n        ].join(''),\n        // 展示标题结构模块\n        title: [\n        '<div>',.....,'</div>'\n        ].join(''),\n    },\n    // 格式化字符串缓存字符串\n    html = '';\n    // 格式化字符串\n    function formateString(str, obj) {}\n    // 方法集合\n    var Action = {\n        // 创建方法\n        create: function(data, view) {\n            // 解析数据\n            if(data.length) {\n                // 遍历\n                for(var i = 0, len = data.length; i < len; i++) {\n                    html += formateString(tpl[view], data[i]);\n                }\n            } else {\n                html += formateString(tpl[view], data);\n            }\n        },\n        // 展示方法\n        display: function(container, data, vuew) {\n            // 如果传入数据\n            if(data) {\n                // 根据给的数据创建视图\n                this.create(data, view);\n            }\n            // 展示模块\n            document.getElementById(container).innerHTML = html;\n            // 展示后清空缓存字符串\n            html = '';\n        }\n    }\n    // 命令接口\n    return function excute(msg) {\n        // 解析命令，如果msg.param不是数组则将其转化为数组\n        msg.param = Object.prototype.toString.call(msg.param) === \"[object Array]\" ? msg.param : [msg.param];\n        // Action内部调用的方法引用this，此处保证作用域this执行传入Action\n        Action[msg.command].apply(Action, msg.param)\n    }\n})();\n```\n\n下面就可以测试这个命令对象了：\n\n```bash\nvar productData = [\n    {\n        src: 'command/02.jpg',\n        text: '绽放的桃花'\n    },\n    {\n        src: 'command/03.jpg',\n        text: '阳光下的温馨'\n    }\n],\n// 模块标题数据\ntitleData = {\n    title: '夏日里的一片温馨',\n    tips: '暖暖的温情带给人们家的感觉'\n}\n// 调用命令对象\nviewCommand({\n    command: 'display',\n    param: ['title', titleData, 'title']\n});\nviewCommand({\n    command: 'create',\n    param: ['product', productData, 'product']\n});\n```\n\n有了命令模式，想创建任何页面视图都是一件很简单的事情。\n\n收获与总结\n\n命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。\n\n## 访问者模式\n\n作者把这种模式比喻成驻华大使。\n\n定义\n\n针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。\n\n使用场景\n\n用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：\n\n```bash\nvar bindEvent = function(dom, type, fn) {\n    if(dom.addEventListener) {\n        dom.addEventListener(type, fn, false);\n    } else if(dom.attachEvent) {\n        dom.attachEvent('on' + type, fn);\n    } else {\n        dom['on' + type] = fn;\n    }\n}\nvar demo = document.getElementById('demo');\nbindEvent(demo, 'click', function() {\n    this.style.background = 'red';\n});\n```\n\n这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。\n访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：\n\n```bash\nfunction bindIEEvent(dom, type, fn, data) {\n    var data = data || {};\n    dom.attachEvent('on' + type, function(e){\n        fn.call(dom, e, data);\n    });\n};\n```\n\n上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。\n\n收获与总结\n\n访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。\n\n## 中介者模式\n\n作者把这种模式比喻成媒婆，好吧，我笑了这里。\n\n定义\n\n通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。\n\n使用场景\n\n项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。\n观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。\n如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：\n\n```bash\n// 中介者对象\nvar Mediator = function() {\n    // 消息对象\n    var _msg = {};\n    return {\n        // 订阅消息方法，type:消息名称 action:消息回调函数\n        register: function(type, action) {\n            // 如果消息存在\n            if(_msg[type])\n                // 存入回调函数\n                _msg[type].push(action);\n            else {\n                // 不存在则建立消息容器\n                _msg[type] = [];\n                _msg[type].push(action);\n            }\n        },\n        // 发布消息方法\n        send: function(type) {\n            // 如果该消息已经被订阅\n            if(_msg[type]) {\n                // 遍历已存储的消息回调函数\n                for(var i = 0, len = _msg[type].length; i < len; i++) {\n                    // 执行回调函数\n                    _msg[type][i] && _msg[type][i]();\n                }\n            }\n        }\n    }\n}();\n```\n\n这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。\n\n收获与总结\n\n同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。\n\n备忘录模式\n\n定义\n\n在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。\n\n使用场景\n\n在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：\n\n```bash\n// Page备忘录类\nvar Page = function() {\n    // 信息缓存对象\n    var cache = {};\n    return function(page, fn) {\n        // 判断该页数据是否在缓存中\n        if(cache[page]) {\n            // 显示该页内容\n            showPage(page, cache[page]);\n            // 执行成功回调函数\n            fn && fn();\n        } else {\n            // 否则异步请求\n            $.post('./data/getNewsData.php', {\n                page: page\n            }, function(res) {\n                // 成功返回\n                if(res.errNo == 0) {\n                    showPage(page, res.data);\n                    cache[page] = res.data;\n                    fn && fn();\n                } else {\n                    // 处理异常\n                }\n            })\n        }\n    }\n}\n```\n\n上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。\n\n收获与总结\n\n备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。\n\n## 迭代器模式\n\n作者把这种模式比喻成一个点钞机。\n\n定义\n\n在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。\n\n使用场景\n\n迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：\n\n```bash\nvar Iterator = function(items, container) {\n    // 获取父元素\n    var container = container && document.getElementById(container) || document,\n    // 获取元素\n        items = container.getElementsByTagName(items),\n    // 获取元素长度\n        length = items.length,\n    // 当前索引值\n        index = 0;\n    // 缓存原生数组splice方法\n    var splice = [].splice;\n    return {\n        // 获取第一个元素\n        first: function() {},\n        // 获取最后一个元素\n        second: function() {},\n        // 获取前一个元素\n        pre: function() {},\n        // 获取后一个元素\n        next: function() {},\n        // 获取某一个元素\n        get: function(num) {},\n        // 对每一个元素执行某一个方法\n        dealEach: function(fn) {},\n        // 对某一个元素执行某一个方法\n        dealItem: function(num, fn) {},\n        // 排他方式处理某一个元素\n        exclusive: function() {}\n    }\n}\n```\n\n下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。\n\n收获与总结\n\n通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。\n\n## 解释器模式\n\n定义\n\n对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。\n\n使用场景\n\n一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：\n\n```bash\n<div calss=\"wrap\">\n    <div class=\"link-inner\">\n        <a href=\"#\">link</a>\n    </div>\n    <div class=\"button-inner\">\n        <button>text</button>\n    </div>\n</div>\n```\n\n要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV>DIV2>SPAN。\n上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。\n\n收获与总结\n\n一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。\n\n## 技巧型设计模式\n\n技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。\n\n## 架构型设计模式\n\n架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。\n\n学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。","slug":"javascript-model","published":1,"date":"2017-08-16T15:10:23.767Z","updated":"2017-08-16T15:58:16.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f7loy20009qwx3o91itfwq","content":"<p>之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）<br>先给个书的链接: <a href=\"https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1482324196&amp;sr=1-2&amp;keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">JavaScript设计模式-张容铭</a></p>\n<h2 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h2><p>设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。</p>\n<h2 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h2><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>作者把简单工厂模式比喻成一个神奇的魔术师。</p>\n<p>定义</p>\n<p>又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。</p>\n<p>使用场景</p>\n<p>看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 篮球基类</div><div class=\"line\">var Basketball = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.intro = <span class=\"string\">'篮球盛行于美国'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Basketball.prototype = &#123;</div><div class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'每个队伍需要5名队员'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 足球基类</div><div class=\"line\">var Football = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.intro = <span class=\"string\">'足球盛行于美国'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Football.prototype = &#123;</div><div class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'每个队伍需要11名队员'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 运动工厂</div><div class=\"line\">var SportsFactory = <span class=\"keyword\">function</span>(name) &#123;</div><div class=\"line\">    switch(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'NBA'</span>: </div><div class=\"line\">            <span class=\"built_in\">return</span> new Basketball();</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'wordCup'</span>: </div><div class=\"line\">            <span class=\"built_in\">return</span> new Football();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。<br>简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。</p>\n<p>收获与总结</p>\n<p>团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。</p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>作者把工厂方法模式比喻成一张名片。</p>\n<p>定义</p>\n<p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p>\n<p>使用场景</p>\n<p>在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 工厂类</div><div class=\"line\">var Factory = <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, content) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(this instanceof Factory) &#123;</div><div class=\"line\">        var s = new this[<span class=\"built_in\">type</span>](content);</div><div class=\"line\">        <span class=\"built_in\">return</span> s;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染</div><div class=\"line\">        <span class=\"built_in\">return</span> new Factory(<span class=\"built_in\">type</span>, content);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Factory.prototype = &#123;</div><div class=\"line\">    Java: <span class=\"keyword\">function</span>(content) &#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    JavaScript: <span class=\"keyword\">function</span>(content) &#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    php: <span class=\"keyword\">function</span>(content) &#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。</p>\n<p>收获与总结</p>\n<p>对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>抽象工厂模式让你感觉出现的都是幻觉。</p>\n<p>定义</p>\n<p>通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。</p>\n<p>抽象类</p>\n<p>抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。</p>\n<p>使用场景</p>\n<p>抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 抽象工厂方法</div><div class=\"line\">var VehicleFactory = <span class=\"keyword\">function</span>(subType, superType) &#123;</div><div class=\"line\">    // 判断抽象工厂中是否有该抽象类</div><div class=\"line\">    <span class=\"keyword\">if</span>(typeof VehicleFactory[superType] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        // 缓存类</div><div class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">F</span></span>() &#123;&#125;;</div><div class=\"line\">        // 继承父类属性和方法</div><div class=\"line\">        F.prototype = new VehicleFactory[superType]();</div><div class=\"line\">        // 将子类构造函数指向子类</div><div class=\"line\">        subType.constructor = subType;</div><div class=\"line\">        // 子类原型继承父类</div><div class=\"line\">        subType.prototype = new F();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        // 不存在该抽象类抛出错误</div><div class=\"line\">        throw new Error(<span class=\"string\">'未创建该抽象类'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 小汽车抽象类</div><div class=\"line\">VehicleFactory.Car = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.type = <span class=\"string\">'car'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">VehicleFactory.Car.prototype = &#123;</div><div class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 公交车抽象类</div><div class=\"line\">VehicleFactory.Bus = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.type = <span class=\"string\">'bus'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">VehicleFactory.Bus.prototype = &#123;</div><div class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。</p>\n<p>收获与总结</p>\n<p>抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。</p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p>建造者模式告诉我们分即是合。</p>\n<p>定义</p>\n<p>将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。</p>\n<p>应用场景</p>\n<p>现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。<br>建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一位人类</div><div class=\"line\">var Human = <span class=\"keyword\">function</span>(param) &#123;</div><div class=\"line\">    // 技能</div><div class=\"line\">    this.skill = param &amp;&amp; param.skill || <span class=\"string\">'保密'</span>;</div><div class=\"line\">    // 兴趣爱好</div><div class=\"line\">    this.hobby = param &amp;&amp; param.hobby || <span class=\"string\">'保密'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 类人原型方法</div><div class=\"line\">Human.prototype = &#123;</div><div class=\"line\">    getS<span class=\"built_in\">kill</span>: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> this.skill;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getHobby: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> this.hobby;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 实例化姓名类</div><div class=\"line\">var Named = <span class=\"keyword\">function</span>(name) &#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    // 构造器，解析姓名的姓与名</div><div class=\"line\">    (<span class=\"keyword\">function</span>(name, that) &#123;</div><div class=\"line\">        that.wholeName = name;</div><div class=\"line\">        <span class=\"keyword\">if</span>(name.indexOf(<span class=\"string\">' '</span>) &gt; -1) &#123;</div><div class=\"line\">            that.FirstName = name.slice(0, name.indexOf(<span class=\"string\">' '</span>));</div><div class=\"line\">            that.FirstName = name.slice(name.indexOf(<span class=\"string\">' '</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name, that);</div><div class=\"line\">&#125;;</div><div class=\"line\">// 实例化职位类</div><div class=\"line\">var Work = <span class=\"keyword\">function</span>(work) &#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    // 构造器，通过传入的职位特征来设置相应职位及描述</div><div class=\"line\">    (<span class=\"keyword\">function</span>(work, that) &#123;</div><div class=\"line\">        switch(work) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'code'</span>:</div><div class=\"line\">                that.work = <span class=\"string\">'工程师'</span>;</div><div class=\"line\">                <span class=\"built_in\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UI'</span>:</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UE'</span>:</div><div class=\"line\">                that.work = <span class=\"string\">'设计师'</span>;</div><div class=\"line\">                <span class=\"built_in\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'teach'</span>:</div><div class=\"line\">                that.work = <span class=\"string\">'教师'</span>;</div><div class=\"line\">                <span class=\"built_in\">break</span>;</div><div class=\"line\">            default:</div><div class=\"line\">                that.work = work;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(work, that);</div><div class=\"line\">&#125;;</div><div class=\"line\">// 更换期望的职位</div><div class=\"line\">Work.prototype.changeWork = <span class=\"keyword\">function</span>(work) &#123;</div><div class=\"line\">    this.work = work;</div></pre></td></tr></table></figure>\n<p>下面来创建一位应聘者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 应聘者创建类</div><div class=\"line\">var Person = <span class=\"keyword\">function</span>(name, work) &#123;</div><div class=\"line\">    // 创建应聘者缓存对象</div><div class=\"line\">    var _person = new Human();</div><div class=\"line\">    // 创建应聘者姓名解析对象</div><div class=\"line\">    _person.name = new Named(name);</div><div class=\"line\">    // 创建应聘者期望职位</div><div class=\"line\">    _person.work = new Work(work);</div><div class=\"line\">    // 返回创建的应聘者对象</div><div class=\"line\">    <span class=\"built_in\">return</span> _person;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>原型模式是JavaScript语言之魂。</p>\n<p>定义</p>\n<p>用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。</p>\n<p>使用场景</p>\n<p>还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。<br>原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 原型对象复制方法</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">prototypeExtend</span></span>() &#123;</div><div class=\"line\">    var F = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        args = arguments,</div><div class=\"line\">        i = 0,</div><div class=\"line\">        len = args.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</div><div class=\"line\">        // 遍历每个模板对象中的属性</div><div class=\"line\">        <span class=\"keyword\">for</span>(var j <span class=\"keyword\">in</span> args[i]) &#123;</div><div class=\"line\">            F.prototype[j] = args[i][j];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 返回缓存类实例</div><div class=\"line\">    <span class=\"built_in\">return</span> new F();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var penguin = prototypeExtend(&#123;</div><div class=\"line\">    speed: 20,</div><div class=\"line\">    swim: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'游泳速度'</span> + this.speed);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    run: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'奔跑速度'</span> + this.speed);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。</p>\n<p>收获与总结</p>\n<p>原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>哈哈，让你感受下一个人的寂寞。</p>\n<p>定义</p>\n<p>又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。</p>\n<p>使用场景</p>\n<p>单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var A = &#123;</div><div class=\"line\">    Util: &#123;</div><div class=\"line\">        util_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        util_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    Tool: &#123;</div><div class=\"line\">        tool_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        tool_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    Ajax: &#123;</div><div class=\"line\">        ajax_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        ajax_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果想使用这个代码库，像下面这样访问即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A.Util.util_method1();</div><div class=\"line\">A.Tool.tool_method2();</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。</p>\n<p>结构型设计模式</p>\n<p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。</p>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><p>作者把这种模式比喻成一种套餐服务。</p>\n<p>定义</p>\n<p>为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。</p>\n<p>使用场景</p>\n<p>为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 外观模式实现</div><div class=\"line\"><span class=\"keyword\">function</span> addEvent(dom, <span class=\"built_in\">type</span>, fn) &#123;</div><div class=\"line\">    // 对于支持DOM2级事件处理程序的浏览器</div><div class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</div><div class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    // 对于不支持addEventListener但支持attachEvent的浏览器</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</div><div class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。</p>\n<p>收获与总结</p>\n<p>当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>听到这个模式的名字，有没有想到水管弯弯的场景呢？</p>\n<p>定义</p>\n<p>将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。</p>\n<p>使用场景</p>\n<p>公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。<br>适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。<br>JavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">do</span>SomeThing(name, title, age, color, size, prize)&#123;&#125;</div></pre></td></tr></table></figure>\n<p>记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * obj.name: name</div><div class=\"line\"> * obj.title: title</div><div class=\"line\"> * obj.age: age</div><div class=\"line\"> * obj.color: color</div><div class=\"line\"> * obj.size: size</div><div class=\"line\"> * obj.prize: prize</div><div class=\"line\">***/</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">do</span>SomeThing(obj)&#123;&#125;</div></pre></td></tr></table></figure>\n<p>然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">do</span>SomeThing(obj) &#123;</div><div class=\"line\">    var _adapter = &#123;</div><div class=\"line\">        name: <span class=\"string\">'雨夜清荷'</span>,</div><div class=\"line\">        title: <span class=\"string\">'设计模式'</span>,</div><div class=\"line\">        age: 24,</div><div class=\"line\">        color: <span class=\"string\">'pink'</span>,</div><div class=\"line\">        size: 100,</div><div class=\"line\">        prize: 50</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> _adapter) &#123;</div><div class=\"line\">        _adapter[i] = obj[i] || _adapter[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>JavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>有没有想到牛郎织女鹊桥相会的场景？</p>\n<p>定义</p>\n<p>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。</p>\n<p>使用场景</p>\n<p>跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。<br>代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 前端浏览器页面</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">// 回调函数</div><div class=\"line\"><span class=\"keyword\">function</span> jsonpCallBack(res,req) &#123;</div><div class=\"line\">    console.log(res,req);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://localhost/test/jsonp.php?callback=jsonp CallBack&amp;data=getJsonPData\"</span>&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 另一个域下的服务器请求接口</div><div class=\"line\">&lt;?php</div><div class=\"line\">/* 后端获取请求字段数据，并生成返回内容 */</div><div class=\"line\"><span class=\"variable\">$data</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"data\"</span>];</div><div class=\"line\"><span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"callback\"</span>];</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">\"('success', '\"</span>.<span class=\"variable\">$data</span>.<span class=\"string\">\"')\"</span>;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。</p>\n<p>收获与总结</p>\n<p>代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。<br>由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。</p>\n<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h2><p>显然房子装修就是一种典型的装饰者模式。</p>\n<p>定义</p>\n<p>在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。</p>\n<p>使用场景</p>\n<p>静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 装饰者</div><div class=\"line\">var decorator = <span class=\"keyword\">function</span>(input, fn) &#123;</div><div class=\"line\">    // 获取事件源</div><div class=\"line\">    var input = document.getElementById(input);</div><div class=\"line\">    // 若事件源已经绑定事件</div><div class=\"line\">    <span class=\"keyword\">if</span>(typeof input.onclick === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        // 缓存事件源原有回调函数</div><div class=\"line\">        var oldClickFn = input.onclick;</div><div class=\"line\">        // 为事件源定义新的事件</div><div class=\"line\">        input.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            // 事件源原有回调函数</div><div class=\"line\">            oldClickFn();</div><div class=\"line\">            // 执行事件源新增回调函数</div><div class=\"line\">            fn();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        input.onclick = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p>作者把这种模式比喻成城市间的公路。</p>\n<p>定义</p>\n<p>在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。</p>\n<p>使用场景</p>\n<p>有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。<br>对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> changeColor(dom, color, <span class=\"built_in\">bg</span>) &#123;</div><div class=\"line\">    // 设置元素的字体颜色</div><div class=\"line\">    dom.style.color = color;</div><div class=\"line\">    // 设置元素的背景颜色</div><div class=\"line\">    dom.style.background = <span class=\"built_in\">bg</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<p>接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。<br>对于事件的桥接方法，可以用一个匿名函数来代替。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var spans = document.getElementsByTagName(<span class=\"string\">'span'</span>);</div><div class=\"line\">spans[0].onmouseover = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    changeColor(this, <span class=\"string\">'red'</span>, <span class=\"string\">'#ddd'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p>作者把组合模式比喻成超值午餐，感觉很形象。</p>\n<p>定义</p>\n<p>又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>使用场景</p>\n<p>为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。<br>我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。<br>在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。</p>\n<p>收获与总结</p>\n<p>组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。</p>\n<p>享元模式</p>\n<p>作者把享元模式比喻成城市公交车，可以仔细思考一番。</p>\n<p>定义</p>\n<p>运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p>\n<p>使用场景</p>\n<p>现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。<br>享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Flyweight = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 已创建的元素</div><div class=\"line\">    var created = [];</div><div class=\"line\">    // 创建一个新闻包装容器</div><div class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">create</span></span>() &#123;</div><div class=\"line\">        var dom = document.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">        // 将容器插入新闻列表容器中</div><div class=\"line\">        document.getElementById(<span class=\"string\">'container'</span>).appendChild(dom);</div><div class=\"line\">        // 缓存新创建的元素</div><div class=\"line\">        created.push(dom);</div><div class=\"line\">        // 返回创建的新元素</div><div class=\"line\">        <span class=\"built_in\">return</span> dom;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 获取创建新闻元素方法</div><div class=\"line\">        getDiv: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            // 如果已创建的元素小于当前页元素总个数(5个)，则创建</div><div class=\"line\">            <span class=\"keyword\">if</span>(created.length &lt; 5) &#123;</div><div class=\"line\">                <span class=\"built_in\">return</span> created();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                // 获取第一个元素，并插入去后面</div><div class=\"line\">                var div = created.shift();</div><div class=\"line\">                created.push(div);</div><div class=\"line\">                <span class=\"built_in\">return</span> div;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<p>上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var paper = 0,</div><div class=\"line\">    num = 5,</div><div class=\"line\">    len = article.length;</div><div class=\"line\">// 添加五条新闻</div><div class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(article[i])</div><div class=\"line\">        // 通过享元类获取创建的元素并写入新闻内容</div><div class=\"line\">        Flyweight.getDiv().innerHTML = article[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 下一页按钮绑定事件</div><div class=\"line\">document.getElementById(<span class=\"string\">'next_page'</span>).onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 如果新闻内容不足5条则返回</div><div class=\"line\">    <span class=\"keyword\">if</span>(article.length &lt; 5) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引</div><div class=\"line\">        j = 0;</div><div class=\"line\">    // 插入5条新闻</div><div class=\"line\">    <span class=\"keyword\">for</span>(; j &lt; 5; j++) &#123;</div><div class=\"line\">        // 如果存在n+j条则插入</div><div class=\"line\">        <span class=\"keyword\">if</span>(article[n + j]) &#123;</div><div class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j];</div><div class=\"line\">        // 否则插入起始位置第n+j-len条</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(article[n + j - len]) &#123;</div><div class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j - len];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Flyweight.getDiv().innerHTML = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。</p>\n<p>收获与总结</p>\n<p>享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。</p>\n<h2 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h2><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>作者把这种模式比喻成照猫画虎。</p>\n<p>定义</p>\n<p>父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>使用场景</p>\n<p>提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。<br>模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。<br>打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。<br>模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 格式化字符串方法</div><div class=\"line\"><span class=\"keyword\">function</span> formateString(str, data) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> str.replace(/\\&#123;<span class=\"comment\">#(\\w+)#\\&#125;/g, function(match, key) &#123;</span></div><div class=\"line\">        <span class=\"built_in\">return</span> typeof data[key] === undefined ? <span class=\"string\">''</span>: data[key]</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 基础导航</div><div class=\"line\">var Nav = <span class=\"keyword\">function</span>(data) &#123;</div><div class=\"line\">    // 基础导航样式模板</div><div class=\"line\">    this.item = <span class=\"string\">'&lt;a href=\"&#123;#href#&#125;\" title=\"&#123;#title#&#125;\"&gt;&#123;#name#&#125;&lt;/a&gt;'</span>;</div><div class=\"line\">    // 创建字符串</div><div class=\"line\">    this.html = <span class=\"string\">''</span>;</div><div class=\"line\">    // 格式化数据</div><div class=\"line\">    <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</div><div class=\"line\">        this.html += formateString(this.item, data[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 返回字符串数据</div><div class=\"line\">    <span class=\"built_in\">return</span> this.html;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var NumNav = <span class=\"keyword\">function</span>(data) &#123;</div><div class=\"line\">    // 消息提醒信息组件模板</div><div class=\"line\">    var tpl = <span class=\"string\">'&lt;b&gt;&#123;#num#&#125;&lt;/b&gt;'</span>;</div><div class=\"line\">    // 装饰数据</div><div class=\"line\">    <span class=\"keyword\">for</span>(var i = data.length - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">        data[i].name += data[i].name + formateString(tpl, data[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 继承基础导航类</div><div class=\"line\">    <span class=\"built_in\">return</span> Nav.call(this, data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>作者把这种模式比喻成通信卫星。</p>\n<p>定义</p>\n<p>又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p>\n<p>使用场景</p>\n<p>在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。<br>观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。<br>这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Observer = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存</div><div class=\"line\">    var __messages = &#123;&#125;;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 注册信息接口</div><div class=\"line\">        regist: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 发布信息接口</div><div class=\"line\">        fire: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 移除信息接口</div><div class=\"line\">        remove: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>下面就是可以自己具体实现这些接口了。</p>\n<p>收获与总结</p>\n<p>观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。</p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>作者把这种模式比喻成超级玛丽。</p>\n<p>定义</p>\n<p>当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。</p>\n<p>使用场景</p>\n<p>平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。<br>将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 投票结果状态对象</div><div class=\"line\">var ResultState = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 判断结果保存在内部状态中</div><div class=\"line\">    var States = &#123;</div><div class=\"line\">        // 每种状态作为一种独立方法保存</div><div class=\"line\">        state0: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第一种情况'</span>)：</div><div class=\"line\">        &#125;,</div><div class=\"line\">        state1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第二种情况'</span>)：</div><div class=\"line\">        &#125;,</div><div class=\"line\">        state2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第三种情况'</span>)：</div><div class=\"line\">        &#125;,</div><div class=\"line\">        state3: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第四种情况'</span>)：</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 获取某种状态并执行对应方法</div><div class=\"line\">    <span class=\"keyword\">function</span> show(result) &#123;</div><div class=\"line\">        States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 返回调用状态方法接口</div><div class=\"line\">        show: show</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<p>想调用第三种结果就可以如下调用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResultState.show(3);</div></pre></td></tr></table></figure>\n<p>对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。</p>\n<p>收获与总结</p>\n<p>状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>作者把这种模式比喻成活诸葛。</p>\n<p>定义</p>\n<p>将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p>\n<p>使用场景</p>\n<p>年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。<br>结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 价格策略对象</div><div class=\"line\">var PriceStrategy = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 内部算法对象</div><div class=\"line\">    var strategy = &#123;</div><div class=\"line\">        // 100返30</div><div class=\"line\">        <span class=\"built_in\">return</span>30: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 100返50</div><div class=\"line\">        <span class=\"built_in\">return</span>50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 9折</div><div class=\"line\">        percent90: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 8折</div><div class=\"line\">        percent80: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 5折</div><div class=\"line\">        percent50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 策略算法调用接口</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(algorithm, price) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。</p>\n<h2 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h2><p>作者把这种模式比喻成一个有序车站。</p>\n<p>定义</p>\n<p>解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。</p>\n<p>使用场景</p>\n<p>项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。<br>对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。</p>\n<p>收获与总结</p>\n<p>职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。</p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>定义</p>\n<p>将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。</p>\n<p>使用场景</p>\n<p>现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。<br>命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。<br>那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 模块实现模块</div><div class=\"line\">var viewCommand = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    var tpl = &#123;</div><div class=\"line\">        // 展示图片结构模块</div><div class=\"line\">        product: [</div><div class=\"line\">            <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></div><div class=\"line\">        ].join(<span class=\"string\">''</span>),</div><div class=\"line\">        // 展示标题结构模块</div><div class=\"line\">        title: [</div><div class=\"line\">        <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></div><div class=\"line\">        ].join(<span class=\"string\">''</span>),</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 格式化字符串缓存字符串</div><div class=\"line\">    html = <span class=\"string\">''</span>;</div><div class=\"line\">    // 格式化字符串</div><div class=\"line\">    <span class=\"keyword\">function</span> formateString(str, obj) &#123;&#125;</div><div class=\"line\">    // 方法集合</div><div class=\"line\">    var Action = &#123;</div><div class=\"line\">        // 创建方法</div><div class=\"line\">        create: <span class=\"keyword\">function</span>(data, view) &#123;</div><div class=\"line\">            // 解析数据</div><div class=\"line\">            <span class=\"keyword\">if</span>(data.length) &#123;</div><div class=\"line\">                // 遍历</div><div class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</div><div class=\"line\">                    html += formateString(tpl[view], data[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                html += formateString(tpl[view], data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 展示方法</div><div class=\"line\">        display: <span class=\"keyword\">function</span>(container, data, vuew) &#123;</div><div class=\"line\">            // 如果传入数据</div><div class=\"line\">            <span class=\"keyword\">if</span>(data) &#123;</div><div class=\"line\">                // 根据给的数据创建视图</div><div class=\"line\">                this.create(data, view);</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 展示模块</div><div class=\"line\">            document.getElementById(container).innerHTML = html;</div><div class=\"line\">            // 展示后清空缓存字符串</div><div class=\"line\">            html = <span class=\"string\">''</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 命令接口</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span> excute(msg) &#123;</div><div class=\"line\">        // 解析命令，如果msg.param不是数组则将其转化为数组</div><div class=\"line\">        msg.param = Object.prototype.toString.call(msg.param) === <span class=\"string\">\"[object Array]\"</span> ? msg.param : [msg.param];</div><div class=\"line\">        // Action内部调用的方法引用this，此处保证作用域this执行传入Action</div><div class=\"line\">        Action[msg.command].apply(Action, msg.param)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>下面就可以测试这个命令对象了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var productData = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        src: <span class=\"string\">'command/02.jpg'</span>,</div><div class=\"line\">        text: <span class=\"string\">'绽放的桃花'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        src: <span class=\"string\">'command/03.jpg'</span>,</div><div class=\"line\">        text: <span class=\"string\">'阳光下的温馨'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">],</div><div class=\"line\">// 模块标题数据</div><div class=\"line\">titleData = &#123;</div><div class=\"line\">    title: <span class=\"string\">'夏日里的一片温馨'</span>,</div><div class=\"line\">    tips: <span class=\"string\">'暖暖的温情带给人们家的感觉'</span></div><div class=\"line\">&#125;</div><div class=\"line\">// 调用命令对象</div><div class=\"line\">viewCommand(&#123;</div><div class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'display'</span>,</div><div class=\"line\">    param: [<span class=\"string\">'title'</span>, titleData, <span class=\"string\">'title'</span>]</div><div class=\"line\">&#125;);</div><div class=\"line\">viewCommand(&#123;</div><div class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'create'</span>,</div><div class=\"line\">    param: [<span class=\"string\">'product'</span>, productData, <span class=\"string\">'product'</span>]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>有了命令模式，想创建任何页面视图都是一件很简单的事情。</p>\n<p>收获与总结</p>\n<p>命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。</p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>作者把这种模式比喻成驻华大使。</p>\n<p>定义</p>\n<p>针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。</p>\n<p>使用场景</p>\n<p>用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"built_in\">bind</span>Event = <span class=\"keyword\">function</span>(dom, <span class=\"built_in\">type</span>, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</div><div class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</div><div class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var demo = document.getElementById(<span class=\"string\">'demo'</span>);</div><div class=\"line\"><span class=\"built_in\">bind</span>Event(demo, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.style.background = <span class=\"string\">'red'</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。<br>访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">bind</span>IEEvent(dom, <span class=\"built_in\">type</span>, fn, data) &#123;</div><div class=\"line\">    var data = data || &#123;&#125;;</div><div class=\"line\">    dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, <span class=\"keyword\">function</span>(e)&#123;</div><div class=\"line\">        fn.call(dom, e, data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。</p>\n<p>收获与总结</p>\n<p>访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。</p>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>作者把这种模式比喻成媒婆，好吧，我笑了这里。</p>\n<p>定义</p>\n<p>通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。</p>\n<p>使用场景</p>\n<p>项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。<br>观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。<br>如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 中介者对象</div><div class=\"line\">var Mediator = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 消息对象</div><div class=\"line\">    var _msg = &#123;&#125;;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 订阅消息方法，<span class=\"built_in\">type</span>:消息名称 action:消息回调函数</div><div class=\"line\">        register: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, action) &#123;</div><div class=\"line\">            // 如果消息存在</div><div class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>])</div><div class=\"line\">                // 存入回调函数</div><div class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                // 不存在则建立消息容器</div><div class=\"line\">                _msg[<span class=\"built_in\">type</span>] = [];</div><div class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 发布消息方法</div><div class=\"line\">        send: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>) &#123;</div><div class=\"line\">            // 如果该消息已经被订阅</div><div class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>]) &#123;</div><div class=\"line\">                // 遍历已存储的消息回调函数</div><div class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = _msg[<span class=\"built_in\">type</span>].length; i &lt; len; i++) &#123;</div><div class=\"line\">                    // 执行回调函数</div><div class=\"line\">                    _msg[<span class=\"built_in\">type</span>][i] &amp;&amp; _msg[<span class=\"built_in\">type</span>][i]();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<p>这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。</p>\n<p>收获与总结</p>\n<p>同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。</p>\n<p>备忘录模式</p>\n<p>定义</p>\n<p>在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。</p>\n<p>使用场景</p>\n<p>在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Page备忘录类</div><div class=\"line\">var Page = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 信息缓存对象</div><div class=\"line\">    var cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(page, fn) &#123;</div><div class=\"line\">        // 判断该页数据是否在缓存中</div><div class=\"line\">        <span class=\"keyword\">if</span>(cache[page]) &#123;</div><div class=\"line\">            // 显示该页内容</div><div class=\"line\">            showPage(page, cache[page]);</div><div class=\"line\">            // 执行成功回调函数</div><div class=\"line\">            fn &amp;&amp; fn();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            // 否则异步请求</div><div class=\"line\">            $.post(<span class=\"string\">'./data/getNewsData.php'</span>, &#123;</div><div class=\"line\">                page: page</div><div class=\"line\">            &#125;, <span class=\"keyword\">function</span>(res) &#123;</div><div class=\"line\">                // 成功返回</div><div class=\"line\">                <span class=\"keyword\">if</span>(res.errNo == 0) &#123;</div><div class=\"line\">                    showPage(page, res.data);</div><div class=\"line\">                    cache[page] = res.data;</div><div class=\"line\">                    fn &amp;&amp; fn();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    // 处理异常</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。</p>\n<p>收获与总结</p>\n<p>备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>作者把这种模式比喻成一个点钞机。</p>\n<p>定义</p>\n<p>在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>\n<p>使用场景</p>\n<p>迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Iterator = <span class=\"keyword\">function</span>(items, container) &#123;</div><div class=\"line\">    // 获取父元素</div><div class=\"line\">    var container = container &amp;&amp; document.getElementById(container) || document,</div><div class=\"line\">    // 获取元素</div><div class=\"line\">        items = container.getElementsByTagName(items),</div><div class=\"line\">    // 获取元素长度</div><div class=\"line\">        length = items.length,</div><div class=\"line\">    // 当前索引值</div><div class=\"line\">        index = 0;</div><div class=\"line\">    // 缓存原生数组splice方法</div><div class=\"line\">    var splice = [].splice;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 获取第一个元素</div><div class=\"line\">        first: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取最后一个元素</div><div class=\"line\">        second: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取前一个元素</div><div class=\"line\">        pre: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取后一个元素</div><div class=\"line\">        next: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取某一个元素</div><div class=\"line\">        get: <span class=\"keyword\">function</span>(num) &#123;&#125;,</div><div class=\"line\">        // 对每一个元素执行某一个方法</div><div class=\"line\">        dealEach: <span class=\"keyword\">function</span>(fn) &#123;&#125;,</div><div class=\"line\">        // 对某一个元素执行某一个方法</div><div class=\"line\">        dealItem: <span class=\"keyword\">function</span>(num, fn) &#123;&#125;,</div><div class=\"line\">        // 排他方式处理某一个元素</div><div class=\"line\">        exclusive: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。</p>\n<p>收获与总结</p>\n<p>通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>定义</p>\n<p>对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p>\n<p>使用场景</p>\n<p>一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div calss=<span class=\"string\">\"wrap\"</span>&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"link-inner\"</span>&gt;</div><div class=\"line\">        &lt;a href=<span class=\"string\">\"#\"</span>&gt;link&lt;/a&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"button-inner\"</span>&gt;</div><div class=\"line\">        &lt;button&gt;text&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV&gt;DIV2&gt;SPAN。<br>上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。</p>\n<p>收获与总结</p>\n<p>一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。</p>\n<h2 id=\"技巧型设计模式\"><a href=\"#技巧型设计模式\" class=\"headerlink\" title=\"技巧型设计模式\"></a>技巧型设计模式</h2><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。</p>\n<h2 id=\"架构型设计模式\"><a href=\"#架构型设计模式\" class=\"headerlink\" title=\"架构型设计模式\"></a>架构型设计模式</h2><p>架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。</p>\n<p>学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前总听到设计模式很重要,于是发现了一本好书——《JavaScript设计模式》，写的通俗易懂，用一个个故事串起了一整本书，（定义一般都比较晦涩难懂，可以先看看使用场景再回来理解相关定义）<br>先给个书的链接: <a href=\"https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD/dp/B013HO6DNS/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1482324196&amp;sr=1-2&amp;keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">JavaScript设计模式-张容铭</a></p>\n<h2 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h2><p>设计模式是代码设计经验的总结，为了可重用代码，保证代码的可靠性等。设计模式主要分为三大类型，创建型模式，结构型模式和行为型模式，本书还额外写了另两类设计模式，技巧型模式和架构型模式。JavaScript设计模式是以面向对象编程为基础的，JavaScript的面向对象编程和传统的C++、Java的面向对象编程有些差别，这让我一开始接触JavaScript的时候感到十分痛苦，但是这只能靠自己慢慢积累慢慢思考。想继续了解JavaScript设计模式必须要先搞懂JavaScript面向对象编程，否则只会让你自己更痛苦。</p>\n<h2 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h2><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。创建型设计模式主要有简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式和单例模式，下面一一道来。</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>作者把简单工厂模式比喻成一个神奇的魔术师。</p>\n<p>定义</p>\n<p>又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象。</p>\n<p>使用场景</p>\n<p>看完上面的定义一定很不解，说的到底是啥，现在就举个例子来解释一下。比如体育商品店卖体育器材，里面有很多体育用品及其相关介绍。当你来到体育用品店买一个篮球，只需问售货员，他就会帮你找到你所要的东西。用程序实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 篮球基类</div><div class=\"line\">var Basketball = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.intro = <span class=\"string\">'篮球盛行于美国'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Basketball.prototype = &#123;</div><div class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'每个队伍需要5名队员'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 足球基类</div><div class=\"line\">var Football = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.intro = <span class=\"string\">'足球盛行于美国'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Football.prototype = &#123;</div><div class=\"line\">    getMember: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'每个队伍需要11名队员'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getBallSize: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'篮球很大'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 运动工厂</div><div class=\"line\">var SportsFactory = <span class=\"keyword\">function</span>(name) &#123;</div><div class=\"line\">    switch(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'NBA'</span>: </div><div class=\"line\">            <span class=\"built_in\">return</span> new Basketball();</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'wordCup'</span>: </div><div class=\"line\">            <span class=\"built_in\">return</span> new Football();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>当你使用这个运动工厂时只需要记住SportsFactory这个工厂对象就好了，它会帮你找到你想要的。<br>简单工厂模式的理念是创建对象，上面例子是将不同的类实例化，但是简单工厂模式还可以创建相似对象，将相似的东西提取，不相似的针对性处理即可。这样只需创建一个对象就可以替代多个类了。</p>\n<p>收获与总结</p>\n<p>团队开发不同于个人，对全局变量的限制很大，要尽量少得创建全局变量。如果有同一类对象在不同需求中重复使用，那么大部分是不需要重复创建的，要学会代码复用。用简单工厂来创建对象，可以减少全局变量创建提高代码复用率，它的使用场合限制在创建单一对象。</p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>作者把工厂方法模式比喻成一张名片。</p>\n<p>定义</p>\n<p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p>\n<p>使用场景</p>\n<p>在实际开发中，需求的变更是很正常的，开始需求简单可以直接创建对象，类似的需求多了可以用简单工厂方法重构，但是如果需求不停变化，那么不仅要修改工厂函数还要添加类，这样就没完了。而工厂方法模式本意是将实际创建对象的工作推迟到子类中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 工厂类</div><div class=\"line\">var Factory = <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, content) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(this instanceof Factory) &#123;</div><div class=\"line\">        var s = new this[<span class=\"built_in\">type</span>](content);</div><div class=\"line\">        <span class=\"built_in\">return</span> s;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        // 防止使用者不知道这是一个类，忘了加new操作符创建，导致全局变量污染</div><div class=\"line\">        <span class=\"built_in\">return</span> new Factory(<span class=\"built_in\">type</span>, content);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Factory.prototype = &#123;</div><div class=\"line\">    Java: <span class=\"keyword\">function</span>(content) &#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    JavaScript: <span class=\"keyword\">function</span>(content) &#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    php: <span class=\"keyword\">function</span>(content) &#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这样以后如果想添加其他类，只需要在Factory的原型里添加就可以了。</p>\n<p>收获与总结</p>\n<p>对于创建很多类的对象，简单工厂模式就不适合了，通过工厂模式可以轻松创建多个类的实例对象，而且避免了使用者与对象类之间的耦合，用户不必关心创建该对象的具体类，只需调用工厂方法即可。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>抽象工厂模式让你感觉出现的都是幻觉。</p>\n<p>定义</p>\n<p>通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责某一类产品的实例。</p>\n<p>抽象类</p>\n<p>抽象类是一种声明但不能使用的类，当你使用的时候就会报错。JavaScript中的抽象类不能像传统面向对象语言那样轻松地创建，我们可以在类的方法中手动抛出错误来模拟抽象类。你可能会想，这样的类什么都不能做能有什么用？其实它在继承上是很有用的。</p>\n<p>使用场景</p>\n<p>抽象工厂模式不能用来创建具体对象，一般用它作为父类类创建一些子类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 抽象工厂方法</div><div class=\"line\">var VehicleFactory = <span class=\"keyword\">function</span>(subType, superType) &#123;</div><div class=\"line\">    // 判断抽象工厂中是否有该抽象类</div><div class=\"line\">    <span class=\"keyword\">if</span>(typeof VehicleFactory[superType] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        // 缓存类</div><div class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">F</span></span>() &#123;&#125;;</div><div class=\"line\">        // 继承父类属性和方法</div><div class=\"line\">        F.prototype = new VehicleFactory[superType]();</div><div class=\"line\">        // 将子类构造函数指向子类</div><div class=\"line\">        subType.constructor = subType;</div><div class=\"line\">        // 子类原型继承父类</div><div class=\"line\">        subType.prototype = new F();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        // 不存在该抽象类抛出错误</div><div class=\"line\">        throw new Error(<span class=\"string\">'未创建该抽象类'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 小汽车抽象类</div><div class=\"line\">VehicleFactory.Car = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.type = <span class=\"string\">'car'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">VehicleFactory.Car.prototype = &#123;</div><div class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 公交车抽象类</div><div class=\"line\">VehicleFactory.Bus = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.type = <span class=\"string\">'bus'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">VehicleFactory.Bus.prototype = &#123;</div><div class=\"line\">    getPrice: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> new Error(<span class=\"string\">'抽象方法不能调用'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>抽象工厂实际上是一个子类继承父类的方法，在该方法中需要通过传递子类以及继承父类的名称。</p>\n<p>收获与总结</p>\n<p>抽象工厂模式是设计模式中最抽象的一种，也是创建模式中唯一一种抽象化创建模式。该模式创建出的结果不是一个真实的对象实例，而是一个类簇，指定了类的结构。</p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p>建造者模式告诉我们分即是合。</p>\n<p>定义</p>\n<p>将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。</p>\n<p>应用场景</p>\n<p>现在有一个发布简历的需求，就是帮别人在公司网站上发布简历，但是这些简历有一个需求，除了将兴趣爱好以及一些特长发布在页面里，其他信息如联系方式等不要发布在网站上，而且每个人想找的工作是可以分类的。这样一些需求我们需要创建的东西就多了，这时候前面的三种工厂模式都不适合了，这里就可以用建造者模式。<br>建造者模式和只关心创建结果的工厂模式不同，虽然其目的也是创建一个对象，但是更多关心的是创建这个对象的整个过程。在本例中，我们需要的不仅仅是应聘者的实例还要在创建过程中注意这位应聘者有哪些兴趣爱好等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一位人类</div><div class=\"line\">var Human = <span class=\"keyword\">function</span>(param) &#123;</div><div class=\"line\">    // 技能</div><div class=\"line\">    this.skill = param &amp;&amp; param.skill || <span class=\"string\">'保密'</span>;</div><div class=\"line\">    // 兴趣爱好</div><div class=\"line\">    this.hobby = param &amp;&amp; param.hobby || <span class=\"string\">'保密'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 类人原型方法</div><div class=\"line\">Human.prototype = &#123;</div><div class=\"line\">    getS<span class=\"built_in\">kill</span>: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> this.skill;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getHobby: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> this.hobby;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 实例化姓名类</div><div class=\"line\">var Named = <span class=\"keyword\">function</span>(name) &#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    // 构造器，解析姓名的姓与名</div><div class=\"line\">    (<span class=\"keyword\">function</span>(name, that) &#123;</div><div class=\"line\">        that.wholeName = name;</div><div class=\"line\">        <span class=\"keyword\">if</span>(name.indexOf(<span class=\"string\">' '</span>) &gt; -1) &#123;</div><div class=\"line\">            that.FirstName = name.slice(0, name.indexOf(<span class=\"string\">' '</span>));</div><div class=\"line\">            that.FirstName = name.slice(name.indexOf(<span class=\"string\">' '</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name, that);</div><div class=\"line\">&#125;;</div><div class=\"line\">// 实例化职位类</div><div class=\"line\">var Work = <span class=\"keyword\">function</span>(work) &#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    // 构造器，通过传入的职位特征来设置相应职位及描述</div><div class=\"line\">    (<span class=\"keyword\">function</span>(work, that) &#123;</div><div class=\"line\">        switch(work) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'code'</span>:</div><div class=\"line\">                that.work = <span class=\"string\">'工程师'</span>;</div><div class=\"line\">                <span class=\"built_in\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UI'</span>:</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'UE'</span>:</div><div class=\"line\">                that.work = <span class=\"string\">'设计师'</span>;</div><div class=\"line\">                <span class=\"built_in\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'teach'</span>:</div><div class=\"line\">                that.work = <span class=\"string\">'教师'</span>;</div><div class=\"line\">                <span class=\"built_in\">break</span>;</div><div class=\"line\">            default:</div><div class=\"line\">                that.work = work;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(work, that);</div><div class=\"line\">&#125;;</div><div class=\"line\">// 更换期望的职位</div><div class=\"line\">Work.prototype.changeWork = <span class=\"keyword\">function</span>(work) &#123;</div><div class=\"line\">    this.work = work;</div></pre></td></tr></table></figure>\n<p>下面来创建一位应聘者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 应聘者创建类</div><div class=\"line\">var Person = <span class=\"keyword\">function</span>(name, work) &#123;</div><div class=\"line\">    // 创建应聘者缓存对象</div><div class=\"line\">    var _person = new Human();</div><div class=\"line\">    // 创建应聘者姓名解析对象</div><div class=\"line\">    _person.name = new Named(name);</div><div class=\"line\">    // 创建应聘者期望职位</div><div class=\"line\">    _person.work = new Work(work);</div><div class=\"line\">    // 返回创建的应聘者对象</div><div class=\"line\">    <span class=\"built_in\">return</span> _person;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>建造者模式和前面几种创建型设计模式不同，它关心对象的整个创建过程，因此通常将创建对象的类模块化，这样使创建类的每一个模块都可以得到灵活的运用与高质量的复用。这种方式对于整个对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低，不建议使用建造者模式。</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>原型模式是JavaScript语言之魂。</p>\n<p>定义</p>\n<p>用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。</p>\n<p>使用场景</p>\n<p>还是关于子类继承父类的问题，为了提高性能，对于每次创建的一些简单的而又有差异化的属性可以放在构造函数中，将一些消耗资源比较大的方法放在基类的原型中，这样就可以避免不必要的消耗，这就是原型模式的雏形。<br>原型模式更多的是用在对象的创建上，比如创建一个实例对象的构造函数比较复杂或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，可以通过对这些对象属性或者方法进行复制来实现创建。首先要有一个原型对象的复制方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 原型对象复制方法</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">prototypeExtend</span></span>() &#123;</div><div class=\"line\">    var F = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        args = arguments,</div><div class=\"line\">        i = 0,</div><div class=\"line\">        len = args.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</div><div class=\"line\">        // 遍历每个模板对象中的属性</div><div class=\"line\">        <span class=\"keyword\">for</span>(var j <span class=\"keyword\">in</span> args[i]) &#123;</div><div class=\"line\">            F.prototype[j] = args[i][j];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 返回缓存类实例</div><div class=\"line\">    <span class=\"built_in\">return</span> new F();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>企鹅游戏中创建一个企鹅对象，如果没有企鹅基类，只提供了一些动作模板对象，可以通过实现这些模板对象的继承来创建一个企鹅实例对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var penguin = prototypeExtend(&#123;</div><div class=\"line\">    speed: 20,</div><div class=\"line\">    swim: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'游泳速度'</span> + this.speed);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    run: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'奔跑速度'</span> + this.speed);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样通过prototypeExtend创建的就是一个对象，不用再用new去创建一个新的实例对象。</p>\n<p>收获与总结</p>\n<p>原型模式实际上也是一种继承，可以让多个对象分享同一个原型对象的属性和方法，这种继承的实现是不需要创建的，而是将原型对象分享给那些继承的对象。原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>哈哈，让你感受下一个人的寂寞。</p>\n<p>定义</p>\n<p>又被称为单体模式，只允许实例化一次的对象类。有时也可以用一个对象来规划一个命名空间，井井有条地管理对象上的属性和方法。</p>\n<p>使用场景</p>\n<p>单例模式应该是JavaScript中最常见的一种设计模式了，经常为我们提供一个命名空间，来防止不同的人命名变量的冲突。还可以用它来创建一个小型的代码库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var A = &#123;</div><div class=\"line\">    Util: &#123;</div><div class=\"line\">        util_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        util_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    Tool: &#123;</div><div class=\"line\">        tool_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        tool_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    Ajax: &#123;</div><div class=\"line\">        ajax_method1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        ajax_method2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果想使用这个代码库，像下面这样访问即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A.Util.util_method1();</div><div class=\"line\">A.Tool.tool_method2();</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>单例模式有时也被称为单体模式，它是只允许实例化一次的对象类，有时这么做也是为了节省系统资源。JavaScript中单例模式经常作为命名空间对象来实现，通过单例对象，我们可以将各个模块的代码井井有条地梳理在一起。</p>\n<p>结构型设计模式</p>\n<p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计。主要有外观模式，适配器模式，代理模式，装饰者模式，桥接模式，组合模式和享元模式。</p>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><p>作者把这种模式比喻成一种套餐服务。</p>\n<p>定义</p>\n<p>为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更加容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用。</p>\n<p>使用场景</p>\n<p>为页面文档document对象添加点击事件时，如果直接用onclick来绑定事件，那么如果团队中再有人要为document绑定click事件时，就会把之前绑定的那个时间覆盖，因为这是DOM0级事件。我们应该用DOM2级事件处理程序提供的addEventListener来实现，然而老版本IE是不支持这个方法的，必须用attachEvent，这样如果我们写一个能兼容所有浏览器的方式操作起来就会更方便，这时候就可以用到外观模式。为功能统一但方法不统一的接口提供一个统一的接口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 外观模式实现</div><div class=\"line\"><span class=\"keyword\">function</span> addEvent(dom, <span class=\"built_in\">type</span>, fn) &#123;</div><div class=\"line\">    // 对于支持DOM2级事件处理程序的浏览器</div><div class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</div><div class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    // 对于不支持addEventListener但支持attachEvent的浏览器</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</div><div class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>解决浏览器兼容问题只是外观模式应用的一部分，很多代码库中都是通过外观模式来封装多个功能，简化底层造作方法的。</p>\n<p>收获与总结</p>\n<p>当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用及其复杂。通过外观模式，对接口进行二次封装可以隐藏其复杂性。</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>听到这个模式的名字，有没有想到水管弯弯的场景呢？</p>\n<p>定义</p>\n<p>将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决。</p>\n<p>使用场景</p>\n<p>公司有个活动页面正在使用公司内部开发的A框架，可是很多新来的同事使用A框架开发新的功能需求时总是感觉很吃力，而且能用的方法有限，为了让新同事尽快融入项目的开发，可以引入jQuery框架，由于A框架和jQuery框架很像，这样就可以写一个适配器而不需要将之前的代码全用jQuery写一遍。<br>适配器模式不仅在编程中很常见，在生活中这种模式也很常见，比如三角插头充电器对于两项插头是不能用的，此时就需要一个三项转两项插头电源适配器，这就是一种适配器模式，其实它就是为了两个代码库所写的代码兼容运行而书写的额外代码。<br>JavaScript中适配器模式还能适配两个代码库，适配参数，适配数据，适配服务端数据等。以参数适配为例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">do</span>SomeThing(name, title, age, color, size, prize)&#123;&#125;</div></pre></td></tr></table></figure>\n<p>记住这些参数的顺序是很困难的，所以我们经常是以一个参数对象方式传入的，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * obj.name: name</div><div class=\"line\"> * obj.title: title</div><div class=\"line\"> * obj.age: age</div><div class=\"line\"> * obj.color: color</div><div class=\"line\"> * obj.size: size</div><div class=\"line\"> * obj.prize: prize</div><div class=\"line\">***/</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">do</span>SomeThing(obj)&#123;&#125;</div></pre></td></tr></table></figure>\n<p>然而当调用的时候也不能确定传递的参数是否完整，如有一些必须得参数没有传入，一些参数有默认值等，这个时候就可以用适配器来适配传入的参数对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">do</span>SomeThing(obj) &#123;</div><div class=\"line\">    var _adapter = &#123;</div><div class=\"line\">        name: <span class=\"string\">'雨夜清荷'</span>,</div><div class=\"line\">        title: <span class=\"string\">'设计模式'</span>,</div><div class=\"line\">        age: 24,</div><div class=\"line\">        color: <span class=\"string\">'pink'</span>,</div><div class=\"line\">        size: 100,</div><div class=\"line\">        prize: 50</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> _adapter) &#123;</div><div class=\"line\">        _adapter[i] = obj[i] || _adapter[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>JavaScript中的适配器更多应用在对象之间，为了使对象可用，通常会将对象拆分并重新包装，这样就要了解适配器对象的内部结构，这也是与外观模式的区别所在。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>有没有想到牛郎织女鹊桥相会的场景？</p>\n<p>定义</p>\n<p>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用。</p>\n<p>使用场景</p>\n<p>跨域问题应该是使用代理模式解决的一个最典型的问题。由于用户模块上传的照片量越来越大，导致服务器需要将上传模块重新部署到另外一个域中，这就导致了跨域问题。我们可以将相册页面和上传模块所在的服务器抽象成两个对象，想让跨域两端的对象之间实现通信，就需要找个代理对象来实现他们之间的通信。<br>代理对象有很多种，简单一点的如img之类的标签通过src可以向其他域下的服务器发送请求。不过这类请求是get请求，是单向的，不会有响应数据。另外一种代理对象的形式是通过script标签。而我们需要的代理对象，是对页面与浏览器间通信的，JSONP就实现了一种代理模式。我们知道src属性可以实现get请求，因此可以在src指向的url地址上添加一些字段信息，服务器获取这些字段信息，相应生成一分内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 前端浏览器页面</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">// 回调函数</div><div class=\"line\"><span class=\"keyword\">function</span> jsonpCallBack(res,req) &#123;</div><div class=\"line\">    console.log(res,req);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://localhost/test/jsonp.php?callback=jsonp CallBack&amp;data=getJsonPData\"</span>&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 另一个域下的服务器请求接口</div><div class=\"line\">&lt;?php</div><div class=\"line\">/* 后端获取请求字段数据，并生成返回内容 */</div><div class=\"line\"><span class=\"variable\">$data</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"data\"</span>];</div><div class=\"line\"><span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">\"callback\"</span>];</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">\"('success', '\"</span>.<span class=\"variable\">$data</span>.<span class=\"string\">\"')\"</span>;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>这种方式可以想象成合理的一只小船，通过小船将你的请求发送给对岸，然后对岸的人们将数据放在小船里为你带回来。</p>\n<p>收获与总结</p>\n<p>代理模式除了在跨域问题中有很多应用外，有时对对象的实例化对资源的开销很大，如页面加载初期加载文件有很多，此时能够延迟加载一些图片对页面首屏加载时间收益是很大的，通过代理可以先加载预览图片然后再加载开销大的图片。<br>由此可见，代理模式可以解决系统之间耦合度以及系统资源开销大的问题，通过代理对象可以保护被代理对象，使被代理对象不受外界的影响。</p>\n<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h2><p>显然房子装修就是一种典型的装饰者模式。</p>\n<p>定义</p>\n<p>在不改变原对象的基础上，通过对其进行包装扩展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。</p>\n<p>使用场景</p>\n<p>静止是相对的，运动是绝对的，所以没有一成不变的需求。在实际项目开发中需求总在不断变化，当原有的功能已经不能满足用户的需求时，我们要做的就是在这个基础上添砖加瓦，设置新功能和属性来满足用户提出的需求，这就是装饰者模式要做的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 装饰者</div><div class=\"line\">var decorator = <span class=\"keyword\">function</span>(input, fn) &#123;</div><div class=\"line\">    // 获取事件源</div><div class=\"line\">    var input = document.getElementById(input);</div><div class=\"line\">    // 若事件源已经绑定事件</div><div class=\"line\">    <span class=\"keyword\">if</span>(typeof input.onclick === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        // 缓存事件源原有回调函数</div><div class=\"line\">        var oldClickFn = input.onclick;</div><div class=\"line\">        // 为事件源定义新的事件</div><div class=\"line\">        input.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            // 事件源原有回调函数</div><div class=\"line\">            oldClickFn();</div><div class=\"line\">            // 执行事件源新增回调函数</div><div class=\"line\">            fn();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        input.onclick = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>除了装饰者模式，适配器模式也可以对原有对象进行扩展，所不同的是适配器进行扩展很多时候是对对象内部结构的重组，因此了解其自身结构是必须的。而装饰者模式对对象的扩展是一种良性扩展，不用了解其具体实现，只是在外部进行了一次封装扩展。</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p>作者把这种模式比喻成城市间的公路。</p>\n<p>定义</p>\n<p>在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。</p>\n<p>使用场景</p>\n<p>有时候，页面中一些小小细节的改变常常因逻辑相似而导致大片臃肿的代码，让页面苦涩不堪。现在项目有一个需求，是要把页面上部的用户信息添加一些鼠标划过的特效，但是用户信息由很多小组件组成，对于用户名，鼠标划过直接改变背景色，但是像用户等级、用户消息这类部件只能改变里面的数字内容，处理逻辑不太一样。这样就需要写不少代码，但是又会感觉很冗余。这时候，我们首先要提取共同点，对想的抽象逻辑做抽象提取处理。<br>对于用户信息模块的每一部分鼠标滑过与鼠标离开两个事件的执行函数有很大一部分是相似的，比如它们都处理每个部件中的某个元素，它们都是处理元素的字体颜色和背景颜色。可以创建下面这样一个函数，解除this耦合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> changeColor(dom, color, <span class=\"built_in\">bg</span>) &#123;</div><div class=\"line\">    // 设置元素的字体颜色</div><div class=\"line\">    dom.style.color = color;</div><div class=\"line\">    // 设置元素的背景颜色</div><div class=\"line\">    dom.style.background = <span class=\"built_in\">bg</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<p>接下来就是对具体元素绑定事件了，但是仅仅知道元素事件绑定与抽象提取的设置样式方法changeColor是不够的，需要用一个方法将他们链接起来，这个方法就是桥接方法，这种模式就是桥接模式。就像你开着车去沈阳，那么你就需要找到一条连接北京与沈阳的公路，才能顺利往返两地。<br>对于事件的桥接方法，可以用一个匿名函数来代替。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var spans = document.getElementsByTagName(<span class=\"string\">'span'</span>);</div><div class=\"line\">spans[0].onmouseover = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    changeColor(this, <span class=\"string\">'red'</span>, <span class=\"string\">'#ddd'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦。</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p>作者把组合模式比喻成超值午餐，感觉很形象。</p>\n<p>定义</p>\n<p>又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层级结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>使用场景</p>\n<p>为强化首页用户体验，项目经理准备在用户首页添加一个新闻模块，当然新闻的内容是根据用户平时关注的内容挖掘的，因此有的人可能会显示文字新闻，有的人可能会是图片新闻等等。<br>我们先来仔细分析下这个需求，需求中的这些新闻大致可以分为相互独立的几种类型，对某类新闻做修改时不会影响到其他类的新闻，这样可以将每一类新闻抽象成面向对象编程中的一个类，然后在这些新闻类中挑选一些组合成需要的模块，这时候就可以用组合模式了。<br>在页面中，组合模式更常用在创建表单上，比如注册页面可能有不同的表单提交模块。对于这些需求，我们只需要有一个基本的个体，然后通过一定的组合即可实现。</p>\n<p>收获与总结</p>\n<p>组合模式能够给我们提供一个清晰的组成结构，组合对象类通过继承同一个父类使其具有统一的方法，这样也方便了统一管理与使用。</p>\n<p>享元模式</p>\n<p>作者把享元模式比喻成城市公交车，可以仔细思考一番。</p>\n<p>定义</p>\n<p>运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p>\n<p>使用场景</p>\n<p>现在有新闻的内容太多，我们有了一个分页显示所有新闻的需求。一个简单直观的做法就是页面加载后异步请求新闻数据，然后创建所有条新闻插入页面中，需要显示哪一页就显示哪一页。但是这样做有一个很大的问题，这样一下子创建几百条新闻同时插入页面会造成多页的开销严重影响网页的性能。这里的所有新闻都有相似的结构，只是内容不同罢了，对于这种相同结构造成多余开销的问题，可以用享元模式来解决。<br>享元模式 主要是对其数据、方法共享分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来减少开销。上面例子中，所有新闻个体都有共同的结构，应该作为内部数据，而下一页按钮绑定的事件则是外部方法。同时为了使用内部数据还需要提供一个操作方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Flyweight = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 已创建的元素</div><div class=\"line\">    var created = [];</div><div class=\"line\">    // 创建一个新闻包装容器</div><div class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">create</span></span>() &#123;</div><div class=\"line\">        var dom = document.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">        // 将容器插入新闻列表容器中</div><div class=\"line\">        document.getElementById(<span class=\"string\">'container'</span>).appendChild(dom);</div><div class=\"line\">        // 缓存新创建的元素</div><div class=\"line\">        created.push(dom);</div><div class=\"line\">        // 返回创建的新元素</div><div class=\"line\">        <span class=\"built_in\">return</span> dom;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 获取创建新闻元素方法</div><div class=\"line\">        getDiv: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            // 如果已创建的元素小于当前页元素总个数(5个)，则创建</div><div class=\"line\">            <span class=\"keyword\">if</span>(created.length &lt; 5) &#123;</div><div class=\"line\">                <span class=\"built_in\">return</span> created();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                // 获取第一个元素，并插入去后面</div><div class=\"line\">                var div = created.shift();</div><div class=\"line\">                created.push(div);</div><div class=\"line\">                <span class=\"built_in\">return</span> div;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<p>上面创建一个享元类，由于每页只能显示5条新闻，所以创建5个元素，保存在享元类内部，可以通过getDiv方法来获取创建的元素。下面就要实现外部数据和外部方法，外部数据就是我们要显示的所有新闻内容，由于每个内容都不一样肯定不能共享。首先，我们要根据新闻内容实例化页面，然后，对下一页绑定一个点击事件，显示下一页。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var paper = 0,</div><div class=\"line\">    num = 5,</div><div class=\"line\">    len = article.length;</div><div class=\"line\">// 添加五条新闻</div><div class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(article[i])</div><div class=\"line\">        // 通过享元类获取创建的元素并写入新闻内容</div><div class=\"line\">        Flyweight.getDiv().innerHTML = article[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 下一页按钮绑定事件</div><div class=\"line\">document.getElementById(<span class=\"string\">'next_page'</span>).onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 如果新闻内容不足5条则返回</div><div class=\"line\">    <span class=\"keyword\">if</span>(article.length &lt; 5) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    var n = ++paper * num % len,  // 获取当前页的第一条新闻索引</div><div class=\"line\">        j = 0;</div><div class=\"line\">    // 插入5条新闻</div><div class=\"line\">    <span class=\"keyword\">for</span>(; j &lt; 5; j++) &#123;</div><div class=\"line\">        // 如果存在n+j条则插入</div><div class=\"line\">        <span class=\"keyword\">if</span>(article[n + j]) &#123;</div><div class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j];</div><div class=\"line\">        // 否则插入起始位置第n+j-len条</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(article[n + j - len]) &#123;</div><div class=\"line\">            Flyweight.getDiv().innerHTML = article[n + j - len];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Flyweight.getDiv().innerHTML = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样用享元模式对页面重构之后每次操作只需要操作5个元素，这样性能可以提高很多。</p>\n<p>收获与总结</p>\n<p>享元模式的应用是为了提高程序的执行效率与系统性能，因此在大型系统开发中应用比较广泛，可以避免程序中的数据重复。应用时一定要找准内部状态与外部状态，这样才能更合理地提取分离。</p>\n<h2 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h2><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象，还涉及类或对象之间的交流模式并加以实现。行为型设计模式主要有模板方法模式，观察者模式，状态模式，策略模式，职责链模式，命令模式，访问者模式，中介者模式，备忘录模式，迭代器模式和解释器模式，这么多的模式真得好好消化一阵子了。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>作者把这种模式比喻成照猫画虎。</p>\n<p>定义</p>\n<p>父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以不改变父类算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>使用场景</p>\n<p>提示框归一化，一个网站有很多页面，如果每个页面的弹出框样式不太一致就会显得不是很和谐，需要将他们的样式统一。新手最直观的想法就是去每个页面一个个修改，当然这样的代价是很大的，我们需要写一个弹出框插件，将这些弹出框封装好，然后再各个页面调用即可。这是在这个插件中就可以使用模板方法模式了，不需要重复写多个样式。<br>模板方法模式就是将多个模型抽象画归一，从中抽象出一个最基本的模板，这个模板可以作为实体也可以作为抽象对象，其他模块只需要继承这个模板方法，也可以扩展某些方法。<br>打个比方，我们生活中用蛋糕做模具做蛋糕，做出的蛋糕是外形相同的，因为他们都用同一个模具。然而商店里面卖的蛋糕是各式各样的，这都是对蛋糕的二次加工。我们的需求中基本提示框就是我们抽象出来的模具，其他提示框比这个提示框要多一些功能，我们只需要对他们做一些二次加工就能满足需求了。<br>模板方法不仅在归一化组件时使用，有时候创建页面时也是很常用的，比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能的，第三类多了后面显示网址功能。这也可以用模板方法实现，此时抽象出来的基类是最简单的基础导航类。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 格式化字符串方法</div><div class=\"line\"><span class=\"keyword\">function</span> formateString(str, data) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> str.replace(/\\&#123;<span class=\"comment\">#(\\w+)#\\&#125;/g, function(match, key) &#123;</span></div><div class=\"line\">        <span class=\"built_in\">return</span> typeof data[key] === undefined ? <span class=\"string\">''</span>: data[key]</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 基础导航</div><div class=\"line\">var Nav = <span class=\"keyword\">function</span>(data) &#123;</div><div class=\"line\">    // 基础导航样式模板</div><div class=\"line\">    this.item = <span class=\"string\">'&lt;a href=\"&#123;#href#&#125;\" title=\"&#123;#title#&#125;\"&gt;&#123;#name#&#125;&lt;/a&gt;'</span>;</div><div class=\"line\">    // 创建字符串</div><div class=\"line\">    this.html = <span class=\"string\">''</span>;</div><div class=\"line\">    // 格式化数据</div><div class=\"line\">    <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</div><div class=\"line\">        this.html += formateString(this.item, data[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 返回字符串数据</div><div class=\"line\">    <span class=\"built_in\">return</span> this.html;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于消息提醒导航类，只需额外添加消息提醒组件模板，并与消息提醒组件模板对传入的网址数据进行装饰，得到所需的字符串，在调用从基类继承的方法处理这些字符串即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var NumNav = <span class=\"keyword\">function</span>(data) &#123;</div><div class=\"line\">    // 消息提醒信息组件模板</div><div class=\"line\">    var tpl = <span class=\"string\">'&lt;b&gt;&#123;#num#&#125;&lt;/b&gt;'</span>;</div><div class=\"line\">    // 装饰数据</div><div class=\"line\">    <span class=\"keyword\">for</span>(var i = data.length - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">        data[i].name += data[i].name + formateString(tpl, data[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 继承基础导航类</div><div class=\"line\">    <span class=\"built_in\">return</span> Nav.call(this, data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>模板方法的核心在于对方法的重用，将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法共用。子类继承的方法是可扩展的，这就需要对基类继承的方法进行重写。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>作者把这种模式比喻成通信卫星。</p>\n<p>定义</p>\n<p>又被称作发布-订阅模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p>\n<p>使用场景</p>\n<p>在团队开发中，经常是一个人负责一个模块，那么每人负责的模块之间要如何进行沟通呢？比如你实现一些需求需要添加一些代码，但是这个需求需要其他模块配合，但是每个模块都是不同人写的，你不想因为新添加的代码影响到他人实现的功能，这个时候就需要用到观察者模式了。<br>观察者模式就是为了解决主体对象与观察者之间的耦合。打个比方，目前每个国家都在研发并发射卫星，发射这些卫星是为了监控一些信息，那么它就可以被看做一个观察者或者说是一个消息系统，如果让这颗卫星为飞机导航，那么这架飞机就是一个被观察者或者说是一个主体对象。那么如果地面上的中转站或者其他飞机需要知道这架飞机的信息，于是每当飞机到达一个地方时就会向卫星发出位子信息，然后卫星又将信息广播到已经订阅这架飞机的中转站，这样就可以避免一些飞机事故发生。<br>这时候，观察者至少需要有两个方法，一个是接收某架飞机发来的消息，一个是向订阅的中转站发送响应消息。但是，并不是每个中转站都要时刻监控飞机状态的，所以还需要一个取消注册的方法。当然这些消息还需要保存，就需要一个保存消息的容器。这时候观察者雏形就出来了，他有一个消息容器和三个方法，订阅消息方法，取消订阅消息方法，发送订阅消息方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Observer = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 防止消息队列暴露而被篡改，故将消息容器作为静态私有变量保存</div><div class=\"line\">    var __messages = &#123;&#125;;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 注册信息接口</div><div class=\"line\">        regist: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 发布信息接口</div><div class=\"line\">        fire: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 移除信息接口</div><div class=\"line\">        remove: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>下面就是可以自己具体实现这些接口了。</p>\n<p>收获与总结</p>\n<p>观察者模式最主要是解决类或对象之间的耦合，解耦两个互相依赖的对象，使其依赖于观察者的消息机制。这样对于任何一个订阅者来说，其他订阅者对象的改变不会影响到自身，其自身既可以是消息的发出者也可以是消息的执行者，这都依赖于调用观察者对象中的三种方法（订阅，注销，发布消息）中的哪一种。</p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>作者把这种模式比喻成超级玛丽。</p>\n<p>定义</p>\n<p>当一个对象内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对像。</p>\n<p>使用场景</p>\n<p>平时写代码的时候经常会遇到要写很多条件判断语句的情况，那么怎么减少代码中的条件判断语句呢？对于这类分支条件内部独立结果的管理，可以使用状态模式，每一种条件作为对象的一种状态，面对不同的判断结果，其实就是选择对象内的一种状态。<br>将不同的判断结果封装在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 投票结果状态对象</div><div class=\"line\">var ResultState = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 判断结果保存在内部状态中</div><div class=\"line\">    var States = &#123;</div><div class=\"line\">        // 每种状态作为一种独立方法保存</div><div class=\"line\">        state0: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第一种情况'</span>)：</div><div class=\"line\">        &#125;,</div><div class=\"line\">        state1: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第二种情况'</span>)：</div><div class=\"line\">        &#125;,</div><div class=\"line\">        state2: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第三种情况'</span>)：</div><div class=\"line\">        &#125;,</div><div class=\"line\">        state3: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            console.log(<span class=\"string\">'这是第四种情况'</span>)：</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 获取某种状态并执行对应方法</div><div class=\"line\">    <span class=\"keyword\">function</span> show(result) &#123;</div><div class=\"line\">        States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 返回调用状态方法接口</div><div class=\"line\">        show: show</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<p>想调用第三种结果就可以如下调用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResultState.show(3);</div></pre></td></tr></table></figure>\n<p>对于状态模式，主要目的就是将条件判断的不同结果转化为状态对象的内部状态，这个内部状态一般作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象即可。</p>\n<p>收获与总结</p>\n<p>状态模式既是解决程序中臃肿的分支判断语句问题，将每一个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次只需时遍历所有分支。</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>作者把这种模式比喻成活诸葛。</p>\n<p>定义</p>\n<p>将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p>\n<p>使用场景</p>\n<p>年底的时候，公司商品展销页都要开展大促销活动。在圣诞节，一部分商品5折出售，一部分商品8折出售，一部分商品9折出售，到元旦搞个幸运反馈活动，普通用户满100返30，高级VIP用户满100返50。这个时候上面的状态模式就不适用了，因为每一天每一个商品只有一种促销情况，这个时候可以用策略模式。<br>结构上看，它与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现实现对内部对象的调用，不同点是，策略模式不需要管理状态、状态间没有依赖关系、策略之剑可以相互替换、在策略对象内部保存的是相互独立的一些算法。看看策略对象的实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 价格策略对象</div><div class=\"line\">var PriceStrategy = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 内部算法对象</div><div class=\"line\">    var strategy = &#123;</div><div class=\"line\">        // 100返30</div><div class=\"line\">        <span class=\"built_in\">return</span>30: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 100返50</div><div class=\"line\">        <span class=\"built_in\">return</span>50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 9折</div><div class=\"line\">        percent90: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 8折</div><div class=\"line\">        percent80: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">        // 5折</div><div class=\"line\">        percent50: <span class=\"keyword\">function</span>(price) &#123;&#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 策略算法调用接口</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(algorithm, price) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<p>收获与总结</p>\n<p>策略模式主要特色是创建一系列策略算法，每组算法处理业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们是可以相互替换的，这样就解决了算法与使用者之间的耦合。</p>\n<h2 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h2><p>作者把这种模式比喻成一个有序车站。</p>\n<p>定义</p>\n<p>解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，知道最后一个对象完成请求的处理。</p>\n<p>使用场景</p>\n<p>项目经理准备改善页面中的输入验证与提示交互体验。如用户在输入框输入信息后，在输入框的下面提示出一些备选项，当用户输入完成后，则要对用户输入信息进行验证等，页面中很多模块需要用户提交信息，为增强用户体验，这些输入框大部分需要具备以上两种功能。现在需要完成这个需求，但是以后可能要对原有表单交互体验做一些修改，也就是这是一个半成品需求。这种情况下，我们需要将需求里面需要做的每一件事情独立出来，这样完整的需求就变成一个个相互独立的模块需求，这样就不会因为以后需求的改变而影响我们项目的进展，这样还有利于以后的单元测试。这其实就是一种职责链模式。<br>对于上面的需求，对输入框绑定事件是第一部分，第二部分是创建xhr进行异步数据获取，第三部分就是适配响应数据，将接收到的数据格式化成可处理的形式，最后一部分是向组件创建器传入相应数据生成组件。</p>\n<p>收获与总结</p>\n<p>职责链模式定义了请求的传递方向，通过多个对象对请求的传递，实现一个复杂的逻辑操作。因此职责链模式将负责的需求颗粒化逐一实现每个最小分内的需求，并将请求顺序地传递。对于职责链上的每一个对象来说，它可能是请求的发起者也可能是请求的接收者，通过这种方式不仅仅简化原对象的复杂度，而且解决原请求的发起者与原请求的接收者之间的耦合。</p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>定义</p>\n<p>将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。</p>\n<p>使用场景</p>\n<p>现在的需求是要做一个活动页面，平铺式的结构，不过页面的每个模块都有些相似的地方，比如每个预览产品图片区域，都有一行标题，然后标题下面是产品图片，只是图片的数量与排列不同。我们需要一种自由创建视图模块的方法，有时候创建多张图片有时候只创建一张图片，这时候可以试试命令模式。<br>命令模式是将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部中的一些方法。请求部分很简单，只需要按照给定参数格式书写指令即可，所以实现部分的封装才是重点，因为它要为请求部分提供所需方法。<br>那么哪些对象需要被命令化呢？既然需要动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、展示方法应该被命令化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 模块实现模块</div><div class=\"line\">var viewCommand = (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    var tpl = &#123;</div><div class=\"line\">        // 展示图片结构模块</div><div class=\"line\">        product: [</div><div class=\"line\">            <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></div><div class=\"line\">        ].join(<span class=\"string\">''</span>),</div><div class=\"line\">        // 展示标题结构模块</div><div class=\"line\">        title: [</div><div class=\"line\">        <span class=\"string\">'&lt;div&gt;'</span>,.....,<span class=\"string\">'&lt;/div&gt;'</span></div><div class=\"line\">        ].join(<span class=\"string\">''</span>),</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 格式化字符串缓存字符串</div><div class=\"line\">    html = <span class=\"string\">''</span>;</div><div class=\"line\">    // 格式化字符串</div><div class=\"line\">    <span class=\"keyword\">function</span> formateString(str, obj) &#123;&#125;</div><div class=\"line\">    // 方法集合</div><div class=\"line\">    var Action = &#123;</div><div class=\"line\">        // 创建方法</div><div class=\"line\">        create: <span class=\"keyword\">function</span>(data, view) &#123;</div><div class=\"line\">            // 解析数据</div><div class=\"line\">            <span class=\"keyword\">if</span>(data.length) &#123;</div><div class=\"line\">                // 遍历</div><div class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = data.length; i &lt; len; i++) &#123;</div><div class=\"line\">                    html += formateString(tpl[view], data[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                html += formateString(tpl[view], data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 展示方法</div><div class=\"line\">        display: <span class=\"keyword\">function</span>(container, data, vuew) &#123;</div><div class=\"line\">            // 如果传入数据</div><div class=\"line\">            <span class=\"keyword\">if</span>(data) &#123;</div><div class=\"line\">                // 根据给的数据创建视图</div><div class=\"line\">                this.create(data, view);</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 展示模块</div><div class=\"line\">            document.getElementById(container).innerHTML = html;</div><div class=\"line\">            // 展示后清空缓存字符串</div><div class=\"line\">            html = <span class=\"string\">''</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 命令接口</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span> excute(msg) &#123;</div><div class=\"line\">        // 解析命令，如果msg.param不是数组则将其转化为数组</div><div class=\"line\">        msg.param = Object.prototype.toString.call(msg.param) === <span class=\"string\">\"[object Array]\"</span> ? msg.param : [msg.param];</div><div class=\"line\">        // Action内部调用的方法引用this，此处保证作用域this执行传入Action</div><div class=\"line\">        Action[msg.command].apply(Action, msg.param)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>下面就可以测试这个命令对象了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var productData = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        src: <span class=\"string\">'command/02.jpg'</span>,</div><div class=\"line\">        text: <span class=\"string\">'绽放的桃花'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        src: <span class=\"string\">'command/03.jpg'</span>,</div><div class=\"line\">        text: <span class=\"string\">'阳光下的温馨'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">],</div><div class=\"line\">// 模块标题数据</div><div class=\"line\">titleData = &#123;</div><div class=\"line\">    title: <span class=\"string\">'夏日里的一片温馨'</span>,</div><div class=\"line\">    tips: <span class=\"string\">'暖暖的温情带给人们家的感觉'</span></div><div class=\"line\">&#125;</div><div class=\"line\">// 调用命令对象</div><div class=\"line\">viewCommand(&#123;</div><div class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'display'</span>,</div><div class=\"line\">    param: [<span class=\"string\">'title'</span>, titleData, <span class=\"string\">'title'</span>]</div><div class=\"line\">&#125;);</div><div class=\"line\">viewCommand(&#123;</div><div class=\"line\">    <span class=\"built_in\">command</span>: <span class=\"string\">'create'</span>,</div><div class=\"line\">    param: [<span class=\"string\">'product'</span>, productData, <span class=\"string\">'product'</span>]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>有了命令模式，想创建任何页面视图都是一件很简单的事情。</p>\n<p>收获与总结</p>\n<p>命令模式是将执行的命令封装，解决命令发起者与命令执行者之间的耦合，每一条命令实质上是一个操作。命令的是使用者不必了解命令执行者的命令接口是如何实现的，只需要知道如何调用。</p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>作者把这种模式比喻成驻华大使。</p>\n<p>定义</p>\n<p>针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的新方法。</p>\n<p>使用场景</p>\n<p>用DOM2级事件为页面中元素绑定事件时，为css设置一些样式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"built_in\">bind</span>Event = <span class=\"keyword\">function</span>(dom, <span class=\"built_in\">type</span>, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(dom.addEventListener) &#123;</div><div class=\"line\">        dom.addEventListener(<span class=\"built_in\">type</span>, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dom.attachEvent) &#123;</div><div class=\"line\">        dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dom[<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>] = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var demo = document.getElementById(<span class=\"string\">'demo'</span>);</div><div class=\"line\"><span class=\"built_in\">bind</span>Event(demo, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    this.style.background = <span class=\"string\">'red'</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个在IE浏览器中会出问题，因为IE的attachEvent事件中this指向的竟然是window而不是这个元素，所以如果想获取事件对象必须用window.e来获取。这个问题可以借用访问者模式来解决。<br>访问者模式的思想是我们在不改变操作对象的同时，为它添加新的操作方法，来实现对操作对象的访问。下面看看IE的实现方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">bind</span>IEEvent(dom, <span class=\"built_in\">type</span>, fn, data) &#123;</div><div class=\"line\">    var data = data || &#123;&#125;;</div><div class=\"line\">    dom.attachEvent(<span class=\"string\">'on'</span> + <span class=\"built_in\">type</span>, <span class=\"keyword\">function</span>(e)&#123;</div><div class=\"line\">        fn.call(dom, e, data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面实现方法的核心就是调用call方法，call方法的作用就是更改函数执行时的作用域，这正是访问者模式的精髓。</p>\n<p>收获与总结</p>\n<p>访问者模式解决数据与数据操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。访问者更适合那些数据稳定但是数据的操作方法易变的环境下。</p>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>作者把这种模式比喻成媒婆，好吧，我笑了这里。</p>\n<p>定义</p>\n<p>通过中介者对象封装一系列对象之间的交互，是对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可以改变对象之间的交互。</p>\n<p>使用场景</p>\n<p>项目经理准备在用户首页上的导航模块添加一个设置层，让用户可以通过设置层来设置导航展开样式。但是页面中好多模块都有导航，这要改起来工作量也很大，上面讲的观察者模式虽然能解决模块之间的耦合，但是这里我们并没有需要向设置层发送请求的需求，设置层只是单向控制导航模块内导航的样式。这样的单向通信就可以使用中介者模式。<br>观察者模式和中介者模式都是通过消息收发机制实现，不过在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，而中介者模式中消息的发送方只有一个就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象（订阅者）才能订阅中介者消息。<br>如果用中介者模式来解决上面的问题，那么中介者对象就是设置层模块对象，它负责向各个导航模块对象发送用户设置消息，而各个导航模块则应该作为消息的订阅者存在，实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 中介者对象</div><div class=\"line\">var Mediator = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 消息对象</div><div class=\"line\">    var _msg = &#123;&#125;;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 订阅消息方法，<span class=\"built_in\">type</span>:消息名称 action:消息回调函数</div><div class=\"line\">        register: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>, action) &#123;</div><div class=\"line\">            // 如果消息存在</div><div class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>])</div><div class=\"line\">                // 存入回调函数</div><div class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                // 不存在则建立消息容器</div><div class=\"line\">                _msg[<span class=\"built_in\">type</span>] = [];</div><div class=\"line\">                _msg[<span class=\"built_in\">type</span>].push(action);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 发布消息方法</div><div class=\"line\">        send: <span class=\"keyword\">function</span>(<span class=\"built_in\">type</span>) &#123;</div><div class=\"line\">            // 如果该消息已经被订阅</div><div class=\"line\">            <span class=\"keyword\">if</span>(_msg[<span class=\"built_in\">type</span>]) &#123;</div><div class=\"line\">                // 遍历已存储的消息回调函数</div><div class=\"line\">                <span class=\"keyword\">for</span>(var i = 0, len = _msg[<span class=\"built_in\">type</span>].length; i &lt; len; i++) &#123;</div><div class=\"line\">                    // 执行回调函数</div><div class=\"line\">                    _msg[<span class=\"built_in\">type</span>][i] &amp;&amp; _msg[<span class=\"built_in\">type</span>][i]();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<p>这样就创建了一个中介者对象，下面就可以利用这个中介者对象完成我们的需求了。</p>\n<p>收获与总结</p>\n<p>同观察者模式一样，中介者模式的主要业务也是通过模块间或者对象间的复杂通信，来解决模块间或对象间的耦合。在中介者模式中，订阅者是单向的，只能是订阅者而不能是发布者。而消息统一由中介者对象发布。</p>\n<p>备忘录模式</p>\n<p>定义</p>\n<p>在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部状态以便日后对象使用或者对象恢复到以前的某个状态。</p>\n<p>使用场景</p>\n<p>在前面提到的新闻页面中，有上一页和下一页的按钮，页面的内容是用异步请求获取的。如果点击下一页按钮接着再点击上一页那么之前那一页又要进行一次异步请求，这是多余的操作。因为第一次已经获取了数据，不需要再发送多余的请求。这个时候可以用备忘录模式来缓存请求过的数据。也就是说每次发生请求的时候对当前状态做一次记录，将请求到的数据以及对应得页码缓存下来，如果之后返回到之前浏览过的页面，直接在缓存中查询即可，不用发生异步请求。先创建一个新闻缓存器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Page备忘录类</div><div class=\"line\">var Page = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">    // 信息缓存对象</div><div class=\"line\">    var cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(page, fn) &#123;</div><div class=\"line\">        // 判断该页数据是否在缓存中</div><div class=\"line\">        <span class=\"keyword\">if</span>(cache[page]) &#123;</div><div class=\"line\">            // 显示该页内容</div><div class=\"line\">            showPage(page, cache[page]);</div><div class=\"line\">            // 执行成功回调函数</div><div class=\"line\">            fn &amp;&amp; fn();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            // 否则异步请求</div><div class=\"line\">            $.post(<span class=\"string\">'./data/getNewsData.php'</span>, &#123;</div><div class=\"line\">                page: page</div><div class=\"line\">            &#125;, <span class=\"keyword\">function</span>(res) &#123;</div><div class=\"line\">                // 成功返回</div><div class=\"line\">                <span class=\"keyword\">if</span>(res.errNo == 0) &#123;</div><div class=\"line\">                    showPage(page, res.data);</div><div class=\"line\">                    cache[page] = res.data;</div><div class=\"line\">                    fn &amp;&amp; fn();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    // 处理异常</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码可以看出Page缓存器内部缓存了每次请求回来的新闻数据，这样以后如果用户想回看某页新闻数据就不需要发送不必要的请求了。</p>\n<p>收获与总结</p>\n<p>备忘录模式最主要的任务是对现有的数据或状态进行缓存，为将类某个时刻使用或恢复做准备。但是当数据量过大时，会严重占用系统提供的资源，此时对缓存器的优化是很有必要的，复用率低的数据缓存下来是不值得的。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>作者把这种模式比喻成一个点钞机。</p>\n<p>定义</p>\n<p>在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>\n<p>使用场景</p>\n<p>迭代器模式主要是解决重复循环迭代的问题，之前接触过面向对象语言的应该都对迭代器有所了解。迭代器就是用来顺序地访问一个聚合对象内部元素的，它可以简化我们遍历操作，就行银行里的点钞机，有了它可以大幅度降低我们的点钞成本。下面创建一个常用的迭代器对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Iterator = <span class=\"keyword\">function</span>(items, container) &#123;</div><div class=\"line\">    // 获取父元素</div><div class=\"line\">    var container = container &amp;&amp; document.getElementById(container) || document,</div><div class=\"line\">    // 获取元素</div><div class=\"line\">        items = container.getElementsByTagName(items),</div><div class=\"line\">    // 获取元素长度</div><div class=\"line\">        length = items.length,</div><div class=\"line\">    // 当前索引值</div><div class=\"line\">        index = 0;</div><div class=\"line\">    // 缓存原生数组splice方法</div><div class=\"line\">    var splice = [].splice;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        // 获取第一个元素</div><div class=\"line\">        first: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取最后一个元素</div><div class=\"line\">        second: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取前一个元素</div><div class=\"line\">        pre: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取后一个元素</div><div class=\"line\">        next: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;,</div><div class=\"line\">        // 获取某一个元素</div><div class=\"line\">        get: <span class=\"keyword\">function</span>(num) &#123;&#125;,</div><div class=\"line\">        // 对每一个元素执行某一个方法</div><div class=\"line\">        dealEach: <span class=\"keyword\">function</span>(fn) &#123;&#125;,</div><div class=\"line\">        // 对某一个元素执行某一个方法</div><div class=\"line\">        dealItem: <span class=\"keyword\">function</span>(num, fn) &#123;&#125;,</div><div class=\"line\">        // 排他方式处理某一个元素</div><div class=\"line\">        exclusive: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面具体实现迭代器里面的这些方法，然后就可以用这个迭代器对象啦。</p>\n<p>收获与总结</p>\n<p>通过迭代器我们可以顺序地访问一个聚合对象中的每一个元素。在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑。用迭代器去处理一个对象时，只需要提供处理的方法，而不必去关心对象的内部结构，这也解决了对象的使用者与对象内部结构之间的耦合。</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>定义</p>\n<p>对于一种语言，给出其文法表示，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p>\n<p>使用场景</p>\n<p>一个页面中的某些功能好坏有时是靠一定的数据依据支撑的。项目经理想看看用户对最近新增的功能使用情况，前后端要给出统计数据，然而前端交互统计项中要给出交互元素路径。这件事情与冒泡事件类似，只不过在这个路径中还要关心同一层级中当前元素的兄弟元素。比如下面的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div calss=<span class=\"string\">\"wrap\"</span>&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"link-inner\"</span>&gt;</div><div class=\"line\">        &lt;a href=<span class=\"string\">\"#\"</span>&gt;link&lt;/a&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"button-inner\"</span>&gt;</div><div class=\"line\">        &lt;button&gt;text&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>要获取button相对于class为wrap的div元素的Xpath路径，那么可以表示为DIV&gt;DIV2&gt;SPAN。<br>上面对需求的描述是一种文法，描述的是一组规则，现在要做的事实现一个规则解释器来解释上面的规则。首先要分析给出的文法，查找他们的相似点，然后该清楚我们要先实现什么再实现什么，基本上问题就能解决了。</p>\n<p>收获与总结</p>\n<p>一些描述性语句，几次功能的提取抽象，形成了一套语法法则，这就是解释器模式要处理的事情。是否能应用解释器模式的一条重要准则是能否根据需求解析出一套完整的语法规则，不论该语法规则简单或是复杂都是必须的。</p>\n<h2 id=\"技巧型设计模式\"><a href=\"#技巧型设计模式\" class=\"headerlink\" title=\"技巧型设计模式\"></a>技巧型设计模式</h2><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。这本书中总结了8种技巧型设计模式，分别是链模式，委托模式，数据访问对象模式，节流模式，简单模板模式，惰性模式，参与者模式和等待者模式。有兴趣的同学可以去买书来看哦，这里就不一一解释了。</p>\n<h2 id=\"架构型设计模式\"><a href=\"#架构型设计模式\" class=\"headerlink\" title=\"架构型设计模式\"></a>架构型设计模式</h2><p>架构型设计模式是一类框架结构，通过提供一些子系统，指定它们的职责，并将它们条理清晰地组织在一起。现在流行的前端框架都用了这种类型的设计模式。本书总结了6种架构型设计模式，分别是同步模块模式，异步模块模式，Widget模式，MVC模式，MVP模式和MVVM模式。</p>\n<p>学习设计模式的学习对于我们来说任重而道远，我们需要在实践中不断思考不断总结。</p>\n"},{"title":"微信小程序填坑日记","_content":"记录一下那些年，开发微信小程序踩过的坑\n<!-- more -->\n# 微信小程序认识\n\n## 总体认识\n隐约感受到的RN的身影\n[官方的Q&A文档](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html)\n>为什么脚本内不能使用window等对象\n>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件\n\n碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码\n反正我们知道它能直接调用微信本身的控件就行了\n## 小体认识\n*MVVM*,*前后端分离*,*数据绑定*,*数据驱动*\n![](https://hundren.github.io/demo/blogimg/model.png)\n# 一些代码\n自定义弹框\n``` bash\n<view hidden=\"{{showTrue}}\"></view>\n<view wx:if=\"{{showTrue}}\"></view>\n```\n改变样式\n``` bash\n<view class=\"{{diyClassName}}\"></view>\n```\n# 学习资源\n[最重要的当然是官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n[微信小程序资源汇总](https://github.com/justjavac/awesome-wechat-weapp)\n[用chrome运行小程序](https://github.com/chemzqm/wept)\n[官方demo源码](https://github.com/Hao-Wu/WeApp-Demo)\n\n# 填过的坑\n1.透明底的png图片,border-raduis：50%会变形\n2.canvas在swiper和scroll-view不兼容会浮出来\n3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值\n4.iphone：image图片里padding不能设百分比,只能设固定值\n5.最多只能打开5个页面,注意一下页面跳转的关闭","source":"_posts/wehchat-small.md","raw":"---\ntitle: 微信小程序填坑日记\ncategories: 学习笔记\ntags: [微信小程序,填坑]\n---\n记录一下那些年，开发微信小程序踩过的坑\n<!-- more -->\n# 微信小程序认识\n\n## 总体认识\n隐约感受到的RN的身影\n[官方的Q&A文档](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html)\n>为什么脚本内不能使用window等对象\n>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件\n\n碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码\n反正我们知道它能直接调用微信本身的控件就行了\n## 小体认识\n*MVVM*,*前后端分离*,*数据绑定*,*数据驱动*\n![](https://hundren.github.io/demo/blogimg/model.png)\n# 一些代码\n自定义弹框\n``` bash\n<view hidden=\"{{showTrue}}\"></view>\n<view wx:if=\"{{showTrue}}\"></view>\n```\n改变样式\n``` bash\n<view class=\"{{diyClassName}}\"></view>\n```\n# 学习资源\n[最重要的当然是官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n[微信小程序资源汇总](https://github.com/justjavac/awesome-wechat-weapp)\n[用chrome运行小程序](https://github.com/chemzqm/wept)\n[官方demo源码](https://github.com/Hao-Wu/WeApp-Demo)\n\n# 填过的坑\n1.透明底的png图片,border-raduis：50%会变形\n2.canvas在swiper和scroll-view不兼容会浮出来\n3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值\n4.iphone：image图片里padding不能设百分比,只能设固定值\n5.最多只能打开5个页面,注意一下页面跳转的关闭","slug":"wehchat-small","published":1,"date":"2017-06-21T13:47:01.863Z","updated":"2017-08-15T13:47:58.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f7loy5000bqwx3gp20qp5t","content":"<p>记录一下那些年，开发微信小程序踩过的坑<br><a id=\"more\"></a></p>\n<h1 id=\"微信小程序认识\"><a href=\"#微信小程序认识\" class=\"headerlink\" title=\"微信小程序认识\"></a>微信小程序认识</h1><h2 id=\"总体认识\"><a href=\"#总体认识\" class=\"headerlink\" title=\"总体认识\"></a>总体认识</h2><p>隐约感受到的RN的身影<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html\" target=\"_blank\" rel=\"external\">官方的Q&amp;A文档</a></p>\n<blockquote>\n<p>为什么脚本内不能使用window等对象<br>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件</p>\n</blockquote>\n<p>碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码<br>反正我们知道它能直接调用微信本身的控件就行了</p>\n<h2 id=\"小体认识\"><a href=\"#小体认识\" class=\"headerlink\" title=\"小体认识\"></a>小体认识</h2><p><em>MVVM</em>,<em>前后端分离</em>,<em>数据绑定</em>,<em>数据驱动</em><br><img src=\"https://hundren.github.io/demo/blogimg/model.png\" alt=\"\"></p>\n<h1 id=\"一些代码\"><a href=\"#一些代码\" class=\"headerlink\" title=\"一些代码\"></a>一些代码</h1><p>自定义弹框<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;view hidden=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</div><div class=\"line\">&lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</div></pre></td></tr></table></figure></p>\n<p>改变样式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;view class=<span class=\"string\">\"&#123;&#123;diyClassName&#125;&#125;\"</span>&gt;&lt;/view&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"external\">最重要的当然是官方文档</a><br><a href=\"https://github.com/justjavac/awesome-wechat-weapp\" target=\"_blank\" rel=\"external\">微信小程序资源汇总</a><br><a href=\"https://github.com/chemzqm/wept\" target=\"_blank\" rel=\"external\">用chrome运行小程序</a><br><a href=\"https://github.com/Hao-Wu/WeApp-Demo\" target=\"_blank\" rel=\"external\">官方demo源码</a></p>\n<h1 id=\"填过的坑\"><a href=\"#填过的坑\" class=\"headerlink\" title=\"填过的坑\"></a>填过的坑</h1><p>1.透明底的png图片,border-raduis：50%会变形<br>2.canvas在swiper和scroll-view不兼容会浮出来<br>3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值<br>4.iphone：image图片里padding不能设百分比,只能设固定值<br>5.最多只能打开5个页面,注意一下页面跳转的关闭</p>\n","site":{"data":{}},"excerpt":"<p>记录一下那些年，开发微信小程序踩过的坑<br>","more":"</p>\n<h1 id=\"微信小程序认识\"><a href=\"#微信小程序认识\" class=\"headerlink\" title=\"微信小程序认识\"></a>微信小程序认识</h1><h2 id=\"总体认识\"><a href=\"#总体认识\" class=\"headerlink\" title=\"总体认识\"></a>总体认识</h2><p>隐约感受到的RN的身影<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/performance/tips.html\">官方的Q&amp;A文档</a></p>\n<blockquote>\n<p>为什么脚本内不能使用window等对象<br>页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用window，也无法在脚本中操作组件</p>\n</blockquote>\n<p>碰巧RN也是通过JsCore与手机的原生语言通信的，简单来说它只不过是以 JavaScript 的形式告诉 Objective-C /java该执行什么代码<br>反正我们知道它能直接调用微信本身的控件就行了</p>\n<h2 id=\"小体认识\"><a href=\"#小体认识\" class=\"headerlink\" title=\"小体认识\"></a>小体认识</h2><p><em>MVVM</em>,<em>前后端分离</em>,<em>数据绑定</em>,<em>数据驱动</em><br><img src=\"https://hundren.github.io/demo/blogimg/model.png\" alt=\"\"></p>\n<h1 id=\"一些代码\"><a href=\"#一些代码\" class=\"headerlink\" title=\"一些代码\"></a>一些代码</h1><p>自定义弹框<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;view hidden=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</div><div class=\"line\">&lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;showTrue&#125;&#125;\"</span>&gt;&lt;/view&gt;</div></pre></td></tr></table></figure></p>\n<p>改变样式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;view class=<span class=\"string\">\"&#123;&#123;diyClassName&#125;&#125;\"</span>&gt;&lt;/view&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\">最重要的当然是官方文档</a><br><a href=\"https://github.com/justjavac/awesome-wechat-weapp\">微信小程序资源汇总</a><br><a href=\"https://github.com/chemzqm/wept\">用chrome运行小程序</a><br><a href=\"https://github.com/Hao-Wu/WeApp-Demo\">官方demo源码</a></p>\n<h1 id=\"填过的坑\"><a href=\"#填过的坑\" class=\"headerlink\" title=\"填过的坑\"></a>填过的坑</h1><p>1.透明底的png图片,border-raduis：50%会变形<br>2.canvas在swiper和scroll-view不兼容会浮出来<br>3.iphone：scroll-view内部滚动必须设置高度，在iphone不能设100%,可以通过js设高度或设固定值<br>4.iphone：image图片里padding不能设百分比,只能设固定值<br>5.最多只能打开5个页面,注意一下页面跳转的关闭</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6f7lowo0001qwx3mspg1jol","category_id":"cj6f7loxo0005qwx3cewvghwl","_id":"cj6f7loyd000fqwx3zn1kly0f"},{"post_id":"cj6f7loxh0003qwx3dx1hllnz","category_id":"cj6f7loy7000cqwx3eg1l48op","_id":"cj6f7loyh000iqwx3dnk39cnc"},{"post_id":"cj6f7loxt0007qwx3wqtz0hgx","category_id":"cj6f7loy7000cqwx3eg1l48op","_id":"cj6f7loyl000mqwx3om8647k0"},{"post_id":"cj6f7loy20009qwx3o91itfwq","category_id":"cj6f7loy7000cqwx3eg1l48op","_id":"cj6f7loyo000qqwx3u54pakb9"},{"post_id":"cj6f7loy5000bqwx3gp20qp5t","category_id":"cj6f7loy7000cqwx3eg1l48op","_id":"cj6f7loys000tqwx30qu64xg9"}],"PostTag":[{"post_id":"cj6f7lowo0001qwx3mspg1jol","tag_id":"cj6f7loxs0006qwx3o5pw0e4m","_id":"cj6f7loyc000eqwx3rzfwgrig"},{"post_id":"cj6f7loxh0003qwx3dx1hllnz","tag_id":"cj6f7loy8000dqwx3omcnz5r3","_id":"cj6f7loyk000lqwx302yonyac"},{"post_id":"cj6f7loxh0003qwx3dx1hllnz","tag_id":"cj6f7loyf000hqwx31kyhz7fd","_id":"cj6f7loyn000oqwx310hduwqb"},{"post_id":"cj6f7loxt0007qwx3wqtz0hgx","tag_id":"cj6f7loyj000kqwx3mfciszxj","_id":"cj6f7loys000sqwx3ynavdtxv"},{"post_id":"cj6f7loxt0007qwx3wqtz0hgx","tag_id":"cj6f7loyn000pqwx353pr0lpb","_id":"cj6f7loys000uqwx3vgxq2fkb"},{"post_id":"cj6f7loy20009qwx3o91itfwq","tag_id":"cj6f7loyq000rqwx3r31xhpup","_id":"cj6f7loyu000wqwx38aog0twt"},{"post_id":"cj6f7loy5000bqwx3gp20qp5t","tag_id":"cj6f7loyt000vqwx3tsq32pau","_id":"cj6f7loyx000yqwx37ruv5s3j"},{"post_id":"cj6f7loy5000bqwx3gp20qp5t","tag_id":"cj6f7loyf000hqwx31kyhz7fd","_id":"cj6f7loyx000zqwx3wi8bhkn5"}],"Tag":[{"name":"第一次","_id":"cj6f7loxs0006qwx3o5pw0e4m"},{"name":"JS填坑","_id":"cj6f7loy8000dqwx3omcnz5r3"},{"name":"填坑","_id":"cj6f7loyf000hqwx31kyhz7fd"},{"name":"面试","_id":"cj6f7loyj000kqwx3mfciszxj"},{"name":"题目","_id":"cj6f7loyn000pqwx353pr0lpb"},{"name":"神书推荐","_id":"cj6f7loyq000rqwx3r31xhpup"},{"name":"微信小程序","_id":"cj6f7loyt000vqwx3tsq32pau"}]}}